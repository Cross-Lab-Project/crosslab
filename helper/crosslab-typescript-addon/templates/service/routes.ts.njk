{%- macro generateRoutes() -%}
{%- set typeDependencies = ["TypedRequest","ValidationError"] -%}
{%- set validationDependencies = [] -%}
{%- set signatureDependencies = [] -%}
{%- set operationDependencies = [] -%}
{%- set operations = api | resolveOperations -%}

{%- for operation in operations -%}
    {%- set operationDependencies = (operationDependencies.push(operation.name), operationDependencies) -%}
    {%- set validationDependencies = (validationDependencies.push("validate" + (operation.name | cap) + "Input"), validationDependencies) -%}
    {%- set validationDependencies = (validationDependencies.push("validate" + (operation.name | cap) + "Output"), validationDependencies) -%}
    {%- if operation.parameters -%}
        {%- set signatureDependencies = (signatureDependencies.push(operation.name + "ParametersType"), signatureDependencies) -%}
    {%- endif -%}
    {%- if (operation.requestBody or operation.isProxyRequest) -%}
        {%- set signatureDependencies = (signatureDependencies.push(operation.name + "RequestBodyType"), signatureDependencies) -%}
    {%- endif -%}
{%- endfor -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import express from "express"

import operations from "../operations/index.js"

import {
    {{ typeDependencies | unique | join(",\n\t") }}
} from "./types.js"

import {
    {{ signatureDependencies | unique | join(",\n\t") }}
} from "./signatures.js"

import {
    {{ validationDependencies | unique | join(",\n\t") }}
} from "./requestValidation.js"

export default function router(): express.Router {
    const router = express.Router()

    {%- for operation in operations %}

    {% set pathParameters = [] -%}
    {%- set queryParameters = [] -%}

    {%- for parameter in operation.parameters -%}
        {%- if parameter.in == "path" -%}
            {%- set pathParameters = (pathParameters.push('"' + parameter.name + '": string'), pathParameters) -%}
        {%- endif -%}
        {%- if parameter.in == "query" -%}               
            {%- set queryParameters = (queryParameters.push('"' + parameter.name + '": string'), queryParameters) -%}
        {%- endif -%}
    {%- endfor -%}

    router.{{ operation.method }}("{{ operation.path | formatExpressPath }}", async (req: TypedRequest<
        {{- "{ " + (pathParameters | join(", ")) + " }" if pathParameters | length > 0 else "{}" -}},
        {{- operation.name + "RequestBodyType" if operation.requestBody else "{}" -}},
        {{- "{ " + (queryParameters | join(", ")) + " }" if queryParameters | length > 0 else "{}" -}}
    >, res, next) => {
        {% if operation.parameters -%}
        const parameters: {{ operation.name }}ParametersType = {
            {%- set parameterDefinitions = [] -%}
            {%- for parameter in operation.parameters %}
            {%- set parameterDefinitions = (
                parameterDefinitions.push(
                    '"' + parameter.name + '": '
                    + ('req.params["' + parameter.name + '"]' if parameter.in == "path")
                    + ('req.query["' + parameter.name + '"]' + (' === "true"' if parameter.schema.type == "boolean") if parameter.in == "query")
                    + ('req.get("' + parameter.name + '")' if parameter.in == "header")
                    + ('req.cookies["' + parameter.name + '"]' if parameter.in == "cookie")
                ), parameterDefinitions) -%}
            {%- endfor %}
            {{ parameterDefinitions | join(",\n\t\t\t") }}
        }

        {% endif -%}

        {% if (operation.requestBody or operation.isProxyRequest) -%}
        const body: {{ operation.name }}RequestBodyType = req.body

        {% endif -%}

        try {
            if (!validate{{ operation.name | cap }}Input(
                {{- "parameters" if operation.parameters -}}
                {{- ", " if (operation.parameters and (operation.requestBody or operation.isProxyRequest)) -}}
                {{- "body" if operation.requestBody -}}
            )) {
                throw new ValidationError("Request validation failed", (validate{{ operation.name | cap }}Input as any).errors, 400)
            }

            const result = await operations.{{ operation.name }}(
                req,
                {{- "parameters" if operation.parameters -}}
                {{- ", " if (operation.parameters and (operation.requestBody or operation.isProxyRequest)) -}}
                {{- "body" if (operation.requestBody or operation.isProxyRequest) -}}
            )

            if (!validate{{ operation.name | cap }}Output(result)) {
                throw new ValidationError("Response validation failed", (validate{{ operation.name | cap }}Output as any).errors, 500)
            }

            for (const headerName in result.headers) {
                const header = result.headers[headerName]
                if (header) {
                    res.setHeader(headerName, header)
                }
            }

            return res.status(result.status).send(result.body)
        } catch(error) {
            next(error)
            return
        }
    })

    {%- endfor %}

    return router
}
{%- endmacro -%}
{{ generateRoutes() }}