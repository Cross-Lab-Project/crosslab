{%- set operations = (api | resolveOperations) -%}
{%- set schemas = (api | resolveSchemas) -%}

{%- macro generateSignatures() -%}

{%- for operation in operations %}

{%- set success_responses = [] -%}
{%- set error_responses = [] -%}

{%- if operation.responses -%}
    {%- for response in operation.responses -%}
        {%- if response.status | int < 400 -%}
            {%- set success_responses = (success_responses.push(operation.name + response.status + "ResponseType"), success_responses) -%}
        {%- else -%}
            {%- set error_responses = (error_responses.push(operation.name + response.status + "ResponseType"), error_responses) -%}
        {%- endif -%}
    {%- endfor -%}
{%- endif %}

/**
 * Function signature for handling a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}Signature = (
        authorization: BoundAuthorizationFunctions & { user: string },
        {%- if operation.parameters | length > 0 -%}
            parameters: {{ operation.name }}ParametersType
        {%- endif -%}
        {{- ", " if (operation.parameters | length > 0 and (operation.requestBody or operation.isProxyRequest)) -}}
        {%- if operation.requestBody or operation.isProxyRequest -%}
            body: {{ operation.name }}RequestBodyType
        {%- endif -%}
    ) => 
    {%- if operation.responses | length > 0 -%}
        {{ " " }}Promise<{{ operation.name }}ResponseType> | {{ operation.name }}ResponseType
    {%- else -%}
        {{ " " }}Promise<undefined> | undefined
    {%- endif %}

{% if operation.parameters | length > 0 -%}
{%- set parametersTypeDeclarations = [] -%}
/**
 * Typing for the parameters of a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}ParametersType = {
    {% for parameter in operation.parameters -%}
        {%- set temp = '"' + parameter.name + '"' -%}
        {%- set temp = temp + ("?" if not parameter.required) + ": " -%}
        {%- set temp = temp + (parameter.schema | typeDeclaration(schemas, { "schemaType": "request" })) -%}
        {%- set parametersTypeDeclarations = (parametersTypeDeclarations.push(temp), parametersTypeDeclarations) -%}
    {%- endfor -%}
    {{ parametersTypeDeclarations | join(",\n\t") }},
}

{% endif -%}

{% if operation.requestBody or operation.isProxyRequest -%}
/**
 * Typing for the request body of a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}RequestBodyType = 
    {{- " " + operation.requestBody.schema | typeDeclaration(schemas, { "schemaType": "request" }) if operation.requestBody.schema}}
    {{- " any" if operation.isProxyRequest }}
    {{- " | undefined" if not operation.requestBody.required }}

{% endif -%}


{% if operation.responses | length > 0 -%}
/**
 * Typing for all possible responses to a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}ResponseType = 
    {{- " " + operation.name + "SuccessResponseType" if success_responses | length > 0 }}
    {{- " |" if success_responses | length > 0 and error_responses | length > 0 }}
    {{- " " + operation.name + "ErrorResponseType" if error_responses | length > 0 }}
{%- if success_responses | length > 0 %}

/**
 * Typing for all successful responses to a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}SuccessResponseType = {{ success_responses | join(" | ") }}

{%- endif %}

{%- if error_responses | length > 0 %}

/**
 * Typing for all error responses to a {{ operation.method | upper }} request on {{ operation.path }}
 */
export type {{ operation.name }}ErrorResponseType = {{ error_responses | join(" | ") }}
{%- endif %}
{%- endif %}

{%- for response in operation.responses %}

{%- set responseBody = "undefined" -%}
{%- if response.schema -%}
    {%- set responseBody = response.schema | typeDeclaration(schemas, { "schemaType": "response" }) | indent(4) -%}
{%- endif %}

/**
 * Typing for a response with status {{ response.status }} to a {{ operation.method | upper }} request on {{ operation.path }}
 */
export interface {{ operation.name }}{{ response.status }}ResponseType extends {{ "SuccessResponse" if response.status | int < 400 else "ErrorResponse" }} {
    status: {{ ("NumericRange<" + (response.status | replace("XX", "00")) + "," + (response.status | replace("XX", "00") | int + 100) + ">") if (response.status | endsWith("XX")) else response.status }}
    headers{{ "?" if not response.headers }}: {
        {% for header in response.headers -%}
        "{{ header.name }}"{{ "?" if not header.required}}: {{ header.schema | typeDeclaration(schemas, { "schemaType": "response" }) | indent(8) if header.schema else "undefined" }},
        {% endfor -%}
        [k: string]: string | undefined
    }
    body{{ "?" if not response.schema }}: {{ "any" if operation.isProxyRequest else responseBody }}
}

{%- endfor %}
{%- endfor %}
{%- endmacro -%}

{%- set typeDependencies = ["SuccessResponse", "ErrorResponse"] -%}
{%- for operation in operations -%}

    {%- if operation.parameters -%}
        {%- for parameter in operation.parameters -%}
            {%- if parameter.schema -%}
                {%- set typeDependencies = (typeDependencies.push(parameter.schema | typeDependencies(schemas)), typeDependencies) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}

    {%- if operation.requestBody -%}
        {%- set requestBody = operation.requestBody -%}
        {%- if requestBody.schema -%}
            {%- set typeDependencies = (typeDependencies.push(requestBody.schema | typeDependencies(schemas)), typeDependencies) -%}
        {%- endif -%}
    {%- endif -%}

    {%- if operation.responses -%}
        {%- for response in operation.responses -%}
            {%- if response.schema -%}
                {%- set typeDependencies = (typeDependencies.push(response.schema | typeDependencies(schemas)), typeDependencies) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}

{%- endfor -%}

{%- set signatures = generateSignatures() -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    {{- "\n\tSizedTuple," if signatures | includes("SizedTuple<") }}
    {{- "\n\tRequire," if signatures | includes("Require<") }}
    {{- "\n\tNumericRange," if signatures | includes("NumericRange<") }}
    {{ typeDependencies | flatten | unique | join(",\n\t") }}
} from "./types.js"

import { BoundAuthorizationFunctions } from '@crosslab/service-common/authorization';

{{ signatures }}