{%- set operations = (api | resolveOperations) -%}
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

import assert from "assert";
import { JSONSchemaFaker, Schema } from "json-schema-faker";
import RandExp from "randexp";
import seedrandom from "seedrandom";
import {
    {%- for operation in operations %}
    validate{{ operation.name | cap }}Input,
    validate{{ operation.name | cap }}Output,
    {%- endfor %}
} from "../../src/generated/requestValidation"

export default () => describe("Request Validation Tests", function () {
    this.beforeAll(function () {
        const randexpJWT = new RandExp(/^Bearer ([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)/)
        const randexpMacAddress = new RandExp(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)

        const rngJWT = seedrandom("jwt")
        const rngMacAddress = seedrandom("mac_address")
        
        randexpJWT.randInt = (from, to) => from + (rngJWT() * (to - from)) 
        randexpMacAddress.randInt = (from, to) => from + (rngMacAddress() * (to - from)) 

        JSONSchemaFaker.format({
            "jwt": (_) => randexpJWT.gen(),
            "mac_address": (_) => randexpMacAddress.gen()
        })
    })

    this.beforeEach(function () {
        JSONSchemaFaker.option({
            random: seedrandom("request validation tests")
        })
    })

{%- for operation in operations %}

    it("should return true when validating a valid input for {{ operation.name }}", function () {
        {%- if operation.parameters and operation.parameters | length > 0 %}
        const schemasParameters: { [k: string]: Schema } = {}
        const fakeParameters: { [k: string]: any } = {}
        {%- endif %}
        {%- for parameter in operation.parameters %}
        schemasParameters["{{ parameter.name }}"] = {{ parameter.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for parameter in operation.parameters %}
        fakeParameters["{{ parameter.name }}"] = JSONSchemaFaker.generate(schemasParameters["{{ parameter.name }}"])
        {%- endfor %}
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })

    {# BEGIN REQUIRED PARAMETERS TESTING #}
    {%- if operation.parameters %}
    {%- if operation.parameters | selectattr("required") | length > 0 %}

    it("should return false when validating an invalid input for {{ operation.name }} (undefined required parameters)", function () {
        const fakeParameters = undefined
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })
    {%- else %}

    it("should return true when validating a valid input for {{ operation.name }} (undefined unrequired parameters)", function () {
        const fakeParameters = undefined
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })

    it("should return false when validating an invalid input for {{ operation.name }} (null parameters)", function () {
        const fakeParameters = null
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })

    {%- endif %}
    {%- endif %}
    {# END REQUIRED PARAMETERS TESTING #}

    {%- for selectedParameter in operation.parameters %}

    it("should return false when validating an invalid input for {{ operation.name }} (invalid '{{ selectedParameter.name }}'-parameter)", function () {
        const schemasParameters: { [k: string]: Schema } = {}
        const fakeParameters: { [k: string]: any } = {}
        {%- for parameter in operation.parameters %}
        {%- if parameter == selectedParameter %}
        schemasParameters["{{ parameter.name }}"] = {{ { "not": parameter.schema } | stringify(4) | indent(8) }}
        {%- else %}
        schemasParameters["{{ parameter.name }}"] = {{ parameter.schema | stringify(4) | indent(8) }}
        {%- endif %}
        {%- endfor %}
        {%- for parameter in operation.parameters %}
        fakeParameters["{{ parameter.name }}"] = JSONSchemaFaker.generate(schemasParameters["{{ parameter.name }}"])
        {%- endfor %}
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })
    {%- endfor %}

    {%- if operation.requestBody %}

    it("should return false when validating an invalid input for {{ operation.name }} (invalid body)", function () {
        {%- if operation.parameters and operation.parameters | length > 0 %}
        const schemasParameters: { [k: string]: Schema } = {}
        const fakeParameters: { [k: string]: any } = {}
        {%- endif %}
        {%- for parameter in operation.parameters %}
        schemasParameters["{{ parameter.name }}"] = {{ parameter.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for parameter in operation.parameters %}
        fakeParameters["{{ parameter.name }}"] = JSONSchemaFaker.generate(schemasParameters["{{ parameter.name }}"])
        {%- endfor %}
        const schemaBody: Schema = {{ { "not": operation.requestBody.schema } | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        assert(!validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })

    {%- if not operation.requestBody.required %}

    it("should return true when validating a valid input for {{ operation.name }} (empty not unrequired body)", function () {
        {%- if operation.parameters and operation.parameters | length > 0 %}
        const schemasParameters: { [k: string]: Schema } = {}
        const fakeParameters: { [k: string]: any } = {}
        {%- endif %}
        {%- for parameter in operation.parameters %}
        schemasParameters["{{ parameter.name }}"] = {{ parameter.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for parameter in operation.parameters %}
        fakeParameters["{{ parameter.name }}"] = JSONSchemaFaker.generate(schemasParameters["{{ parameter.name }}"])
        {%- endfor %}
        const fakeBody = undefined
        assert(validate{{ operation.name | cap }}Input(
            {{- "fakeParameters as any" if operation.parameters -}}
            {{- ", " if (operation.parameters and operation.requestBody) -}}
            {{- "fakeBody as any" if operation.requestBody -}}
        ))
    })
    {%- endif%}
    {%- endif %}

    {%- for response in operation.responses %}

    it("should return true when validating a valid {{ response.status }} output for {{ operation.name }}", function () {
        {%- if response.headers and response.headers | length > 0 %}
        const schemasHeaders: { [k: string]: Schema } = {}
        const fakeHeaders: { [k: string]: any } = {}
        {%- endif %}
        {%- for header in response.headers %}
        schemasHeaders["{{ header.name }}"] = {{ header.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for header in response.headers %}
        fakeHeaders["{{ header.name }}"] = JSONSchemaFaker.generate(schemasHeaders["{{ header.name }}"])
        {%- endfor %}
        {%- if response.schema %}
        const schemaBody: Schema = {{ response.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })

    {# BEGIN REQUIRED HEADERS TESTING #}
    {%- if response.headers %}
    {%- if response.headers | selectattr("required") | length > 0 %}

    it("should return false when validating an invalid {{ response.status }} output for {{ operation.name }} (undefined required headers)", function () {
        const fakeHeaders = undefined
        {%- if response.schema %}
        const schemaBody: Schema = {{ response.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })
    {%- else %}

    it("should return true when validating a valid {{ response.status }} output for {{ operation.name }} (undefined unrequired headers)", function () {
        const fakeHeaders = undefined
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })

    it("should return false when validating an invalid {{ response.status }} output for {{ operation.name }} (null headers)", function () {
        JSONSchemaFaker.option({
            random: seedrandom("{{ operation.name }} output null headers")
        })
        const fakeHeaders = null
        {%- if operation.requestBody %}
        const schemaBody: Schema = {{ operation.requestBody.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders as any," if response.headers and response.headers | length > 0 }}
        }))
    })

    {%- endif %}
    {%- endif %}
    {# END REQUIRED HEADERS TESTING #}

    {%- for selectedHeader in response.headers %}
    
    it("should return false when validating an invalid {{ response.status }} output for {{ operation.name }} (invalid '{{ selectedHeader.name }}'-header)", function () {
        const schemasHeaders: { [k: string]: Schema } = {}
        const fakeHeaders: { [k: string]: any } = {}
        {%- for header in response.headers %}
        {%- if header == selectedHeader %}
        schemasHeaders["{{ header.name }}"] = {{ { "not": header.schema } | stringify(4) | indent(8) }}
        {%- else %}
        schemasHeaders["{{ header.name }}"] = {{ header.schema | stringify(4) | indent(8) }}
        {%- endif %}
        {%- endfor %}
        {%- for header in response.headers %}
        fakeHeaders["{{ header.name }}"] = JSONSchemaFaker.generate(schemasHeaders["{{ header.name }}"])
        {%- endfor %}
        {%- if response.schema %}
        const schemaBody: Schema = {{ response.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })
    {%- endfor %}

    {%- if response.schema %}

    it("should return false when validating an invalid {{ response.status }} output for {{ operation.name }} (invalid body)", function () {
        {%- if response.headers and response.headers | length > 0 %}
        const schemasHeaders: { [k: string]: Schema } = {}
        const fakeHeaders: { [k: string]: any } = {}
        {%- endif %}
        {%- for header in response.headers %}
        schemasHeaders["{{ header.name }}"] = {{ header.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for header in response.headers %}
        fakeHeaders["{{ header.name }}"] = JSONSchemaFaker.generate(schemasHeaders["{{ header.name }}"])
        {%- endfor %}
        const schemaBody: Schema = {{ { "not": response.schema } | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        assert(!validate{{ operation.name | cap }}Output({
            {{ "status: " }}{{ response.status if not response.status | endsWith("XX") else response.status[0] + "00" }}{{ "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })
    {%- endif %}
    {%- endfor %}

    {%- if operation | getInvalidStatusCode %}

    it("should return false when validating an output with an invalid status code for {{ operation.name }}", function () {
        {%- if response.headers and response.headers | length > 0 %}
        const schemasHeaders: { [k: string]: Schema } = {}
        const fakeHeaders: { [k: string]: any } = {}
        {%- endif %}
        {%- for header in response.headers %}
        schemasHeaders["{{ header.name }}"] = {{ header.schema | stringify(4) | indent(8) }}
        {%- endfor %}
        {%- for header in response.headers %}
        fakeHeaders["{{ header.name }}"] = JSONSchemaFaker.generate(schemasHeaders["{{ header.name }}"])
        {%- endfor %}
        {%- if response.schema %}
        const schemaBody: Schema = {{ response.schema | stringify(4) | indent(8) }}
        const fakeBody = JSONSchemaFaker.generate(schemaBody)
        {%- endif %}
        assert(!validate{{ operation.name | cap }}Output({
            {{ "status: " + (operation | getInvalidStatusCode) + "," }}
            {{- "\n\t\t\tbody: fakeBody," if response.schema }}
            {{- "\n\t\t\theaders: fakeHeaders," if response.headers and response.headers | length > 0 }}
        }))
    })
    {%- endif%}

    it("should return false when validating an output with a status code < 100 or >= 600 for {{ operation.name }}", function () {
        assert(!validate{{ operation.name | cap }}Output({
            status: 99
        }))
        assert(!validate{{ operation.name | cap }}Output({
            status: 600
        }))
    })
{%- endfor %}
})