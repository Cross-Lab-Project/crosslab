{%- macro generateRequestValidation() -%}
{%- set operations = (api | resolveOperations) -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import { FunctionWithErrors, ResponseData } from "./types.js"

import * as Signatures from "./signatures.js"

import * as BasicValidation from "./basicValidation.cjs"

{%- for operation in operations %}
{%- set low_name = operation.operationId | formatName(false) %}
{%- set cap_name = operation.operationId | formatName() %}
/**
 * This function validates the inputs to {{ low_name }}()
 */
export function validate{{ cap_name }}Input(
    {{- "parameters: " + "Signatures." + cap_name + "Parameters" if operation.parameters -}}
    {{- ", " if (operation.parameters and operation.requestBody) -}}
    {{- "body: " + "Signatures." + cap_name + "Body" if operation.requestBody -}}
) {
    {% if operation.parameters -%}
    if (parameters) {
        {%- for parameter in operation.parameters %}
        if (
            !BasicValidation.validate{{ parameter.name | formatName -}}Request(parameters["{{ parameter.name }}"]) 
            {{- "\n\t\t\t&& parameters['" +  parameter.name + "'] !== undefined" if not parameter.required }}
        ) {
            (validate{{ cap_name }}Input as FunctionWithErrors).errors = (BasicValidation.validate{{ parameter.name | formatName }}Request as FunctionWithErrors).errors
            return false
        }
        {%- endfor %}
    } else {
        {%- if operation.parameters | selectattr("required") | length > 0 %}
        return false
        {%- else %}
        if (parameters !== undefined) {
            return false
        }
        {%- endif %}
    }

    {% endif -%}

    {% if operation.requestBody -%}
    {% if not operation.requestBody.required -%}
    if (body === undefined) {
        return true
    }

    {% endif -%}
    if (!BasicValidation.validate{{ cap_name }}BodyRequest(body)) {
        (validate{{ cap_name }}Input as FunctionWithErrors).errors = (BasicValidation.validate{{ cap_name }}BodyRequest as FunctionWithErrors).errors
        return false
    }

    {% endif -%}

    return true
}

/**
 * This function validates the outputs of {{ low_name }}()
 */
export function validate{{ cap_name }}Output(response: ResponseData): response is Signatures.{{ cap_name }}Response {
    if (response.status < 100 || response.status >= 600) return false

    {% for response in operation.responses -%}
    {%- if response.status | endsWith("XX") %}
    if (response.status >= {{ (response.status | replace("X","0") | int) }} && response.status < {{ (response.status | replace("X","0") | int) + 100 }} ) {
    {%- else %}
    if (response.status === {{ response.status }}) {
    {%- endif %}
        {% if response.headers -%}
        if (response.headers) {
            {%- for header in response.headers %}
            if (
                !BasicValidation.validate{{ cap_name }}{{ header.name }}Response(response.headers["{{ header.name }}"])
                {{ "\n\t\t\t\t&& response.headers['" + header.name + "'] !== undefined " if not header.required -}} 
            ) {
                (validate{{ cap_name }}Output as FunctionWithErrors).errors = (BasicValidation.validate{{ cap_name }}{{ header.name }}Response as FunctionWithErrors).errors
                return false
            }   
            {%- endfor %}
        } else {
            {%- if response.headers | selectattr("required") | length > 0 %}
            return false
            {%- else %}
            if (response.headers !== undefined) {
                return false
            }
            {%- endif %}
        }

        {% endif -%}
        {% if response.schema -%}
        if (!BasicValidation.validate{{ cap_name }}Response{{ response.status }}Response(response.body)) {
            (validate{{ cap_name }}Output as FunctionWithErrors).errors = (BasicValidation.validate{{ cap_name }}Response{{ response.status }}Response as FunctionWithErrors).errors
            return false
        }

        {% endif -%}    
        return true
    }

    {% endfor -%}
    (validate{{ cap_name }}Output as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}
{% endfor -%}
{%- endmacro -%}
{{ generateRequestValidation() }}