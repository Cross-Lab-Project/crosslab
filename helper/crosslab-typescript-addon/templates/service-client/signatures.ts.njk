{%- macro generateSignatures() -%}
{%- set schemas = (api | resolveSchemas(false)) -%}
{%- set typeDependencies = ["SuccessResponse", "ErrorResponse"] -%}
{%- set operations = (api | resolveOperations) -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as Types from "./types.js"

{%- for operation in operations %}
{%- set low_name = operation.operationId | formatName(false) %}
{%- set cap_name = operation.operationId | formatName %}
{%- set success_responses = [] -%}
{%- set error_responses = [] -%}

{%- if operation.responses -%}
    {%- for response in operation.responses -%}
        {%- if response.status | string | replace("XX", "00") | int < 400 -%}
            {%- set success_responses = (success_responses.push(cap_name + "Response" + response.status), success_responses) -%}
        {%- else -%}
            {%- set error_responses = (error_responses.push(cap_name + "Response" + response.status), error_responses) -%}
        {%- endif -%}
    {%- endfor -%}
{%- endif %}

{%- if operation.parameters | length > 0 %}
{%- set parametersTypeDeclarations = [] %}

/**
 * Typing for the parameters of the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export type {{ cap_name }}Parameters = {
    {% for parameter in operation.parameters -%}
        {%- set temp = '"' + parameter.name + '"' -%}
        {%- set temp = temp + ("?" if not parameter.required) + ": " -%}
        {%- set temp = temp + (parameter.schema | typeDeclaration(schemas, { "prefixDirectlyResolved": "Types.", "schemaType": "request" }) | indent(4)) -%}
        {%- set parametersTypeDeclarations = (parametersTypeDeclarations.push(temp), parametersTypeDeclarations) -%}
    {%- endfor -%}
    {{ parametersTypeDeclarations | join(",\n\t") }},
}
{%- endif %}

{%- if operation.requestBody %}

/**
 * Typing for the body of the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export type {{ cap_name }}Body = 
    {{- " " + operation.requestBody.schema | typeDeclaration(schemas, { "prefixDirectlyResolved": "Types.", "schemaType": "request" }) | indent(4) if operation.requestBody.schema}}
    {{- " | undefined" if not operation.requestBody.required }}
{%- endif %}

{%- if operation.responses | length > 0 %}

/**
 * Typing for all possible responses to the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export type {{ cap_name }}Response = 
    {{- " " + cap_name + "SuccessResponse" if success_responses | length > 0 }}
    {{- " |" if success_responses | length > 0 and error_responses | length > 0 }}
    {{- " " + cap_name + "ErrorResponse" if error_responses | length > 0 }}

{%- if success_responses | length > 0 %}

/**
 * Typing for all successful responses to the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export type {{ cap_name }}SuccessResponse = {{ success_responses | join(" | ") }}
{%- endif %}

{%- if error_responses | length > 0 %}

/**
 * Typing for all error responses to the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export type {{ cap_name }}ErrorResponse = {{ error_responses | join(" | ") }}
{%- endif %}
{%- endif %}

{%- for response in operation.responses %}

{%- set responseBody = "undefined" -%}
{%- if response.schema -%}
    {%- set responseBody = response.schema | typeDeclaration(schemas, { "prefixDirectlyResolved": "Types.", "schemaType": "response" }) | indent(8) -%}
{%- endif %}

/**
 * Typing for a response with status {{ response.status }} to the request made by {{ low_name }}()
 * @category {{ low_name }}()
 */
export interface {{ cap_name }}Response{{ response.status }} extends {{ "Types.SuccessResponse" if response.status | string | replace("XX", "00") | int < 400 else "Types.ErrorResponse" }} {
    status: {{ ("Types.NumericRange<" + (response.status | replace("XX", "00")) + "," + (response.status | replace("XX", "00") | int + 99) + ">") if (response.status | endsWith("XX")) else response.status }}
    headers{{ "?" if not response.headers }}: {
        {% for header in response.headers -%}
        "{{ header.name }}"{{ "?" if not header.required}}: {{ header.schema | typeDeclaration(schemas, { "prefixDirectlyResolved": "Types.", "schemaType": "response" }) | indent(12) if header.schema else "undefined" }},
        {% endfor -%}
        [k: string]: string | undefined
    }
    body{{ "?" if not response.schema }}: {{ responseBody }}
}
{%- endfor %}
{%- endfor %}
{%- endmacro -%}

{%- set content = generateSignatures() -%}
{%- if content | includes("Require<") -%}
    {%- set content = content | replace('import {', 'import {\n\tRequire,') -%}
{%- endif -%}
{%- if content | includes("SizedTuple<") -%}
    {%- set content = content | replace('import {', 'import {\n\tSizedTuple,') -%}
{%- endif -%}

{{ content }}