{%- macro generateSignatures() -%}
{%- set unsortedSchemas = (api | resolveSchemas) -%}
{%- set sortedSchemas = unsortedSchemas | sortByAttribute("x-service-name") -%}
{%- set typeDependencies = ["SuccessResponse", "ErrorResponse"] -%}
{%- set unsortedOperations = (api | resolveOperations) -%}
{%- set sortedOperations = unsortedOperations | sortByAttribute("serviceName") -%}

{%- for operation in unsortedOperations -%}

    {%- if operation.parameters -%}
        {%- for parameter in operation.parameters -%}
            {%- if parameter.schema -%}
                {%- set typeDependencies = (typeDependencies.push((operation.serviceName | formatName) + "Types"), typeDependencies) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}

    {%- if operation.requestBody -%}
        {%- set requestBody = operation.requestBody -%}
        {%- if requestBody.schema -%}
                {%- set typeDependencies = (typeDependencies.push((operation.serviceName | formatName) + "Types"), typeDependencies) -%}
        {%- endif -%}
    {%- endif -%}

    {%- if operation.responses -%}
        {%- for response in operation.responses -%}
            {%- if response.schema -%}
                {%- set typeDependencies = (typeDependencies.push((operation.serviceName | formatName) + "Types"), typeDependencies) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}

{%- endfor -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    {{ typeDependencies | flatten | unique | join(",\n\t") }}
} from "./types"

{%- for serviceName, operations in sortedOperations %}
{%- set first = true %}

/**
 * Namespace containing the signatures for the {{ serviceName }}.
 */
export namespace {{ serviceName | formatName }}Signatures {
    {%- for operation in operations %}
    {%- set types = (serviceName | formatName) + "Types" %}
    {%- set success_responses = [] -%}
    {%- set error_responses = [] -%}

    {%- if operation.responses -%}
        {%- for response in operation.responses -%}
            {%- if response.status | int < 400 -%}
                {%- set success_responses = (success_responses.push(operation.name + response.status + "ResponseType"), success_responses) -%}
            {%- else -%}
                {%- set error_responses = (error_responses.push(operation.name + response.status + "ResponseType"), error_responses) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif %}

    {%- if operation.parameters | length > 0 %}
    {%- set parametersTypeDeclarations = [] %}
    {%- if not first -%}
        {{ "\n\n\t" }}
    {%- else -%}
        {{ "\n\t" }}
        {%- set first = false -%}
    {%- endif -%}
    
    /**
     * Typing for the parameters of a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export type {{ operation.name }}ParametersType = {
        {% for parameter in operation.parameters -%}
            {%- set temp = '"' + parameter.name + '"' -%}
            {%- set temp = temp + ("?" if not parameter.required) + ": " -%}
            {%- set temp = temp + (parameter.schema | typeDeclaration(sortedSchemas[serviceName], { "prefixTypes": types + "." }) | indent(4)) -%}
            {%- set parametersTypeDeclarations = (parametersTypeDeclarations.push(temp), parametersTypeDeclarations) -%}
        {%- endfor -%}
        {{ parametersTypeDeclarations | join(",\n\t") }},
    }
    {%- endif %}

    {%- if operation.requestBody %}
    {%- if not first -%}
        {{ "\n\n\t" }}
    {%- else -%}
        {{ "\n\t" }}
        {%- set first = false -%}
    {%- endif -%}

    /**
     * Typing for the request body of a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export type {{ operation.name }}RequestBodyType = 
        {{- " " + operation.requestBody.schema | typeDeclaration(sortedSchemas[serviceName], { "prefixTypes": types + "." }) | indent(4) if operation.requestBody.schema}}
        {{- " | undefined" if not operation.requestBody.required }}
    {%- endif %}

    {%- if operation.responses | length > 0 %}
    {%- if not first -%}
        {{ "\n\n\t" }}
    {%- else -%}
        {{ "\n\t" }}
        {%- set first = false -%}
    {%- endif -%}

    /**
     * Typing for all possible responses to a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export type {{ operation.name }}ResponseType = 
        {{- " " + operation.name + "SuccessResponseType" if success_responses | length > 0 }}
        {{- " |" if success_responses | length > 0 and error_responses | length > 0 }}
        {{- " " + operation.name + "ErrorResponseType" if error_responses | length > 0 }}

    {%- if success_responses | length > 0 %}

    /**
     * Typing for all successful responses to a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export type {{ operation.name }}SuccessResponseType = {{ success_responses | join(" | ") }}
    {%- endif %}

    {%- if error_responses | length > 0 %}

    /**
     * Typing for all error responses to a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export type {{ operation.name }}ErrorResponseType = {{ error_responses | join(" | ") }}
    {%- endif %}
    {%- endif %}

    {%- for response in operation.responses %}

    {%- set responseBody = "undefined" -%}
    {%- if response.schema -%}
        {%- set responseBody = response.schema | typeDeclaration(sortedSchemas[serviceName], { "prefixTypes": types + "." }) | indent(8) -%}
    {%- endif %}

    /**
     * Typing for a response with status {{ response.status }} to a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export interface {{ operation.name }}{{ response.status }}ResponseType extends {{ "SuccessResponse" if response.status | int < 400 else "ErrorResponse" }} {
        status: {{ response.status }}
        headers{{ "?" if not response.headers }}: {
            {% for header in response.headers -%}
            "{{ header.name }}"{{ "?" if not header.required}}: {{ header.schema | typeDeclaration(sortedSchemas[serviceName], { "prefixTypes": types + "." }) | indent(12) if header.schema else "undefined" }},
            {% endfor -%}
            [k: string]: string | undefined
        }
        body{{ "?" if not response.schema }}: {{ responseBody }}
    }
    {%- endfor %}
    {%- endfor %}
}
{%- endfor %}
{%- endmacro -%}
{{ generateSignatures() | prettier }}