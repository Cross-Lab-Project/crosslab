{%- macro generateRequestValidation() -%}
{%- set unsortedOperations = (api | resolveOperations) -%}
{%- set sortedOperations = unsortedOperations | sortByAttribute("serviceName") -%}
{%- set typeDependencies = ["ResponseData"] -%}
{%- set signatureDependencies = [] -%}
{%- set validationDependencies = [] -%}

{%- for operation in unsortedOperations -%}
    {%- if operation.parameters -%}
        {%- set signatureDependencies = (signatureDependencies.push((operation.serviceName | formatName) + "Signatures"), signatureDependencies) -%}
        {%- for parameter in operation.parameters -%}
            {%- set validationDependencies = (validationDependencies.push((operation.serviceName | formatName) + "BasicValidation"), validationDependencies) -%}
        {%- endfor -%}
    {%- endif -%}
    {%- if operation.requestBody -%}
        {%- set signatureDependencies = (signatureDependencies.push((operation.serviceName | formatName) + "Signatures"), signatureDependencies) -%}
        {%- set validationDependencies = (validationDependencies.push((operation.serviceName | formatName) + "BasicValidation"), validationDependencies) -%}
    {%- endif -%}
    {%- if operation.responses -%}
        {%- set signatureDependencies = (signatureDependencies.push((operation.serviceName | formatName) + "Signatures"), signatureDependencies) -%}
        {%- for response in operation.responses -%}
            {%- if response.schema -%}
                {%- set validationDependencies = (validationDependencies.push((operation.serviceName | formatName) + "BasicValidation"), validationDependencies) -%}
            {%- endif -%}
            {%- for header in response.headers -%}
                {%- set validationDependencies = (validationDependencies.push((operation.serviceName | formatName) + "BasicValidation"), validationDependencies) -%}
            {%- endfor -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    {{ typeDependencies | unique | join(",\n\t") }}
} from "./types"

import {
    {{ signatureDependencies | unique | join(",\n\t") }}
} from "./signatures"

import {
    {{ validationDependencies | unique | join(",\n\t") }}
} from "./basicValidation"

{%- for serviceName, operations in sortedOperations %}

/**
 * Namespace containing the request validation functions for the {{ serviceName }}.
 */
export namespace {{ serviceName | formatName }}RequestValidation {
{%- for operation in operations %}
{%- set basicValidation = (serviceName | formatName) + "BasicValidation" %}
{%- set signatures = (serviceName | formatName) + "Signatures" %}
    /**
     * This function validates the inputs of a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export function validate{{ operation.name | cap }}Input(
        {{- "parameters: " + signatures + "." + operation.name + "ParametersType" if operation.parameters -}}
        {{- ", " if (operation.parameters and operation.requestBody) -}}
        {{- "body: " + signatures + "." + operation.name + "RequestBodyType" if operation.requestBody -}}
    ) {
        {% if operation.parameters -%}
        if (parameters) {
            {%- for parameter in operation.parameters %}
            if (!{{ basicValidation }}.validate{{ parameter.name | formatName }}(parameters["{{ parameter.name }}"])) {
                (validate{{ operation.name | cap }}Input as any).errors = ({{ basicValidation }}.validate{{ parameter.name | formatName }} as any).errors
                return false
            }
            {%- endfor %}
        }
        {%- if operation.parameters | selectattr("required") | length > 0 -%}
        {{ "" }} else {
            return false
        }
        {%- endif %}

        {% endif -%}

        {% if operation.requestBody -%}
        if (!{{ basicValidation }}.validate{{ operation.name | cap }}RequestBody(body)) {
            (validate{{ operation.name | cap }}Input as any).errors = ({{ basicValidation }}.validate{{ operation.name | cap }}RequestBody as any).errors
            return false
        }

        {% endif -%}

        return true
    }

    /**
     * This function validates the outputs to a {{ operation.method | upper }} request on {{ operation.path }}
     */
    export function validate{{ operation.name | cap }}Output(response: ResponseData): response is {{ signatures }}.{{ operation.name }}ResponseType {
        if (response.status < 100 || response.status >= 600) return false

        {% for response in operation.responses -%}
        if (response.status === {{ response.status }}) {
            {% if response.headers -%}
            if (response.headers) {
                {%- for header in response.headers %}
                if (!{{ basicValidation }}.validate{{ operation.name | cap }}Header{{ header.name | formatName }}(response.headers["{{ header.name }}"])) {
                    (validate{{ operation.name | cap }}Output as any).errors = ({{ basicValidation }}.validate{{ operation.name | cap }}Header{{ header.name | formatName }} as any).errors
                    return false
                }   
                {%- endfor %}
            }
            {%- if response.headers | selectattr("required") | length > 0 -%}
            {{ "" }} else {
                return false
            }
            {%- endif %}

            {% endif -%}
            {% if response.schema -%}
            if (!{{ basicValidation }}.validate{{ operation.name | cap }}Response{{ response.status }}(response.body)) {
                (validate{{ operation.name | cap }}Output as any).errors = ({{ basicValidation }}.validate{{ operation.name | cap }}Response{{ response.status }} as any).errors
                return false
            }

            {% endif -%}    
            return true
        }

        {% endfor -%}
        (validate{{ operation.name | cap }}Output as any).errors = `Response status ${response.status} is unexpected`

        return false
    }
{% endfor -%}
}
{%- endfor %}
{%- endmacro -%}
{{ generateRequestValidation() | prettier }}