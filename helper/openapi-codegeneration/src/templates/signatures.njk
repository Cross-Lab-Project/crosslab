{%- import "./utils.njk" as utils -%}

{%- macro generateResponseInterfaces(function) -%}
{% set responseTypes = "" -%}
{% for response in function.responses -%}
{% set responseTypes = responseTypes  + " | " + function.name + "Response" + response.status -%}
interface {{ function.name }}Response{{ response.status }} {
{%- if response.status.endsWith("XX") %}
    status: {{ function.genericResponseStatuses[response.status] | join(" | ") }}
{%- else %}
    status: {{ response.status }}
{%- endif %}
{%- if response.content and response.content[0] and response.content[0].schema %}
    body: {{ response.content[0].schema.typeDeclaration | safe }}
{%- else %}
    body?: any
{%- endif %}
}
{% endfor -%}
{%- if responseTypes.length > 0 %}
type {{ function.name }}ResponseType = {{ responseTypes.slice(3) }}
{%- else %}
type {{ function.name }}ResponseType = {
    status: number,
    body?: any
}
{%- endif %}
{%- endmacro -%}

{%- macro generateSignature(function) -%}
export type {{ function.signature }} = ({{ "parameters: " + utils.parametersTypeDeclaration(function.parameters) if function.parameters -}}
{{ ", " if function.parameters and function.body -}}
{% if function.body -%}
    body: {{ utils.formatDeclaration(function.body.content[0].schema.typeDeclaration) | safe -}}
{% endif -%}
{{ ", " if function.parameters or function.body -}}
user: UserType) => Promise<{{ function.name }}ResponseType> | {{ function.name }}ResponseType
{%- endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    UserType,
    {{ typeDependencies | join(",\n\t") }}
} from "../types"

{% for function in functions -%}
{{ generateSignature(function) }}
{{ generateResponseInterfaces(function) }}

{% endfor -%}