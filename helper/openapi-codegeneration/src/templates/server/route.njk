{%- import "../general/utils.njk" as utils -%}

{%- macro generateRoute(function, basePath) -%}
router.{{ function.method }}("{{ function.path | replace("/" + basePath,"/") | replace("//", "/") | replace(r/\{([^\}]+)\}/g, ":$1")  }}", async (req: TypedRequest<
    {%- if function.parameters.path and function.parameters.path.length > 0 -%}
    {{- utils.parametersTypeDeclaration(function.parameters,false,["path"]) | safe -}}
    {%- else -%}
    {{- "{}" -}}
    {%- endif -%},
    {%- if function.body or function.isProxyFunction -%}
    {{- " " }}{{ function.name + "BodyType" | safe -}}
    {%- else -%}
    {{- " {}" -}}
    {%- endif -%},
    {%- if function.parameters.query and function.parameters.query.length > 0 -%}
    {{- " " + utils.parametersTypeDeclaration(function.parameters,false,["query"]) | safe -}}
    {%- else -%}
    {{- " {}" -}}
    {%- endif -%}>, res) => {
    {% if "jwt" in function.security -%}
    let user: UserType
    const jwt = extract_jwt_from_request(req)
    try {
        user = await options.JWTVerify(jwt, ["{{ function.scopes | join("\",\"") | safe }}"])
    } catch(err) {
        throw("JWT Verification Error!")
    }
    {% endif -%}
    {% if function.parameters -%}
    const parameters: {{ function.name }}ParametersType = {
    {%- if function.parameters.cookie and function.parameters.cookie.length > 0 %}
    {%- for parameter in function.parameters.cookie %}
        {{ parameter.name }}: req.cookies["{{ parameter.name }}"],
    {%- endfor %}
    {%- endif %}
    {%- if function.parameters.header and function.parameters.header.length > 0 %}
    {%- for parameter in function.parameters.header %}
        {{ parameter.name }}: req.headers["{{ parameter.name }}"] as {{ utils.formatDeclaration(parameter.schema.typeDeclaration) }},
    {%- endfor %}
    {%- endif %}
    {%- if function.parameters.path and function.parameters.path.length > 0 %}
    {%- for parameter in function.parameters.path %}
        {{ parameter.name }}: req.params["{{ parameter.name }}"],
    {%- endfor %}
    {%- endif -%}
    {%- if function.parameters.query and function.parameters.query.length > 0 %}
    {%- for parameter in function.parameters.query %}
        {{ parameter.name }}: req.query["{{ parameter.name }}"],
    {%- endfor %}
    {%- endif %}
    }
    {% endif -%}
    {% if function.body or function.isProxyFunction -%}
    const body = req.body
    {% endif -%}
    if (!{{ function.validateInput }}(
        {{- "parameters, " if function.parameters else "undefined, " -}}
        {{- "body" if function.body else "undefined" -}}
        )) {
        const errorMsg = "Input validation failed"
        console.error(errorMsg, ({{ function.validateInput }} as any).errors)
        return res.status(400).send(errorMsg)
    }
    try {
        const result = await {{ basePath }}.{{ function.name }}(
        {{- "parameters, " if function.parameters and (function.body or function.isProxyFunction or (function.security != "none" and ("jwt" in function.security))) else ("parameters" if function.parameters)-}}
        {{- "body, " if (function.body or function.isProxyFunction) and (function.security != "none" and ("jwt" in function.security)) else ("body" if function.body or function.isProxyFunction) -}}
        {{- "user" if function.security != "none" and ("jwt" in function.security) -}}
        )
        if (!{{ function.validateOutput }}(result)) {
            const errorMsg = "Output validation failed"
            console.error(errorMsg, ({{ function.validateOutput }} as any).errors)
            return res.status(400).send(errorMsg)
        }
        if (result.headers) {
            for (const headerName in result.headers) {
                const header = result.headers[headerName]
                if (header) {
                    res.setHeader(headerName, header)
                }
            }
        }
        return res.status(result.status || 200).send(result.body)
    } catch(err) {
        console.error(`Server Error: ${err}`)
        return res.status(500).send({
            status: 500,
            error: "Server Error"
        })
    }
})
{% endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import express from "express"
import * as {{ basePath }} from "../../operations/{{ basePath }}"
import {
    initServiceOptions,
    TypedRequest
    {{- ",\n\tUserType" if secured }}
    {{- ",\n\textract_jwt_from_request" if secured }}
} from "../types"
import {
    {{ validationDependencies | join(",\n\t") }}
} from "../validation/{{ basePath }}"
import {
{%- for function in functions %}
    {%- if function.parameters %}
    {{ function.name + "ParametersType," }}
    {%- endif %}
    {%- if function.body or function.isProxyFunction %}
    {{ function.name + "BodyType," }}
    {%- endif %}
{%- endfor %}
} from "../signatures/{{ basePath }}"

export default function {{ basePath }}Routes({{ "_" if not secured }}options: initServiceOptions): express.Router {
    const router = express.Router()
    {% for function in functions %}
    {{ generateRoute(function, basePath) | indent -}}
    {% endfor %}
    return router
}