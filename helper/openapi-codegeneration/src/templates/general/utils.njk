{%- macro formatDeclaration(td) -%}
{{ td | replace("{\n", "{ ") | replace("\n}", " }") | replace("\n\t", ", ") | replace("\n", " ") | replace("\t", " ") | replace(r/( )+/g, " ") | replace(r/(, })+/g, " }") | safe }}
{%- endmacro -%}

{%- macro parametersTypeDeclaration(parameters,print_location=true,locations=["cookie","header","path","query"]) -%}
{%- set topdeclaration = "{ " -%}
{%- for location in locations -%}
    {%- if parameters[location] and parameters[location].length > 0 -%}
        {%- if print_location -%}
            {%- set topdeclaration = topdeclaration + location + ": { " -%}
        {%- endif -%}
        {%- set declaration = "" -%}
        {%- for parameter in parameters[location] -%}
            {%- set declaration = declaration + parameter.name + (": " if parameter.required else "?: ") + formatDeclaration(parameter.schema.typeDeclaration) + ", " -%}
        {%- endfor -%}
        {%- set declaration = declaration | reverse | replace(" ,", "", 1) | reverse -%}
        {%- set topdeclaration = topdeclaration + declaration -%}
        {%- if print_location -%}
            {%- set topdeclaration = topdeclaration + " }" -%}
        {%- endif -%}
        {%- set topdeclaration = topdeclaration + ", " -%}
    {%- endif -%}
{%- endfor -%}
{%- set topdeclaration = topdeclaration + " }" -%}
{{- topdeclaration | replace(r/(,  })/g, " }") | safe -}}
{%- endmacro -%}

{%- macro parametersCodeTypeDeclaration(parameters,print_location=true,locations=["cookie","header","path","query"]) -%}
{%- set topdeclaration = "{ " -%}
{%- for location in locations -%}
    {%- if parameters[location] and parameters[location].length > 0 -%}
        {%- if print_location -%}
            {%- set topdeclaration = topdeclaration + location + ": { " -%}
        {%- endif -%}
        {%- set declaration = "" -%}
        {%- for parameter in parameters[location] -%}
            {%- set declaration = declaration + '"' + parameter.name + '"' + (": " if parameter.required else "?: ") + formatDeclaration(parameter.schema.typeDeclaration) + ", " -%}
        {%- endfor -%}
        {%- set declaration = declaration | reverse | replace(" ,", "", 1) | reverse -%}
        {%- set topdeclaration = topdeclaration + declaration -%}
        {%- if print_location -%}
            {%- set topdeclaration = topdeclaration + " }" -%}
        {%- endif -%}
        {%- set topdeclaration = topdeclaration + ", " -%}
    {%- endif -%}
{%- endfor -%}
{%- set topdeclaration = topdeclaration + " }" -%}
{{- topdeclaration | replace(r/(,  })/g, " }") | safe -}}
{%- endmacro -%}


{%- macro generateInterfaces(function) -%}
{%- if function.parameters %}
export type {{ function.name }}ParametersType = {{ parametersCodeTypeDeclaration(function.parameters, false) }}
{%- else %}
export type {{ function.name }}ParametersType = undefined
{%- endif %}
{%- if function.body.content[0].schema.typeDeclaration %}
export type {{ function.name }}BodyType = {{ formatDeclaration(function.body.content[0].schema.typeDeclaration) }} {{ "| undefined" if not function.body.required }}
{%- elif function.isProxyFunction %}
export type {{ function.name }}BodyType = any
{%- else %}
export type {{ function.name }}BodyType = undefined
{%- endif %}
{% set successResponseTypes = "" -%}
{% set errorResponseTypes = "" -%}
{% for response in function.responses -%}
{% if response.status < 400 -%}
{% set successResponseTypes = successResponseTypes  + " | " + function.name + "Response" + response.status -%}
interface {{ function.name }}Response{{ response.status }} extends SuccessResponse {
{% else -%}
{% set errorResponseTypes = errorResponseTypes  + " | " + function.name + "Response" + response.status -%}
interface {{ function.name }}Response{{ response.status }} extends ErrorResponse {
{% endif -%}
{%- if response.status.endsWith("XX") %}
    status: {{ function.genericResponseStatuses[response.status] | join(" | ") }}
{%- else %}
    status: {{ response.status }}
{%- endif %}
{%- if response.headers and response.headers.length > 0 %}
    headers{{ "?" if not response.hasRequiredHeader }}: {
        {% for header in response.headers -%}
        {% if header.schema -%}
        {{ header.name }}{{ "?" if not header.required }}: {{ formatDeclaration(header.schema.typeDeclaration) }}
        {% endif -%}
        {% endfor -%}
        [key: string]: string | undefined
    }
{%- else %}
    headers?: {
        [key: string]: string | undefined
    }
{%- endif %}
{%- if response.content and response.content[0] and response.content[0].schema %}
    body: {{ response.content[0].schema.typeDeclaration | safe }}
{%- else %}
    body?: any
{%- endif %}
}
{% endfor -%}
{%- if successResponseTypes.length > 0 -%}
export type {{ function.name }}SuccessResponseType = {{ successResponseTypes.slice(3) }}
{%- else -%}
export type {{ function.name }}SuccessResponseType = SuccessResponse
{%- endif %}
{% if errorResponseTypes.length > 0 -%}
export type {{ function.name }}ErrorResponseType = {{ errorResponseTypes.slice(3) }}
{%- else -%}
export type {{ function.name }}ErrorResponseType = ErrorResponse
{%- endif %}
{% if successResponseTypes.length > 0 and errorResponseTypes.length > 0 -%}
export type {{ function.name }}ResponseType = {{ function.name }}SuccessResponseType | {{ function.name }}ErrorResponseType
{%- elif successResponseTypes.length > 0 -%}
export type {{ function.name }}ResponseType = {{ function.name }}SuccessResponseType 
{%- elif errorResponseTypes.length > 0 -%}
export type {{ function.name }}ResponseType = {{ function.name }}ErrorResponseType
{%- else -%}
export type {{ function.name }}ResponseType = SuccessResponse | ErrorResponse
{%- endif %}
{%- endmacro -%}