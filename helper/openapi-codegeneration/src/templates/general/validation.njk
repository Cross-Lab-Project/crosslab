{%- macro generateValidation(function) -%}
export function {{ function.validateInput }}(
    {{- ("parameters: " if function.parameters else "_parameters: ") + function.name + "ParametersType, " -}}
    {{- ("body: " if function.body.content[0].schema.typeDeclaration else "_body: ") + function.name + "BodyType" -}}
): boolean {
    {%- if function.parameters %}
    if (parameters) {
        {%- for location in ["cookie","query","header","path"] %}
        {%- if function.parameters[location] and function.parameters[location].length > 0 %}
        {%- for parameter in function.parameters[location] %}
        {%- if parameter.required %}
        if (!{{ parameter.schema.validationFunction }}(parameters["{{ parameter.name }}"])) return false
        {%- else %}
        if (parameters["{{ parameter.name }}"] !== undefined) {
            if (!{{ parameter.schema.validationFunction }}(parameters["{{ parameter.name }}"])) {
                ({{ function.validateInput }} as any).errors = ({{ parameter.schema.validationFunction }} as any).errors
                return false
            }
        }
        {%- endif %}
        {%- endfor %}
        {%- endif %}
        {%- endfor %}
    }
    {% endif %}
    {% if function.body -%}
    if (body) {
        if (!{{ function.body.content[0].schema.validationFunction }}(body)) {
            ({{ function.validateInput }} as any).errors = ({{ function.body.content[0].schema.validationFunction }} as any).errors
            return false
        }
    }
    {% endif -%}
    {{ "\n\t" if function.body -}}
    return true
}

export function {{ function.validateOutput }}(response: ResponseData): response is {{ function.name + "ResponseType" }} {
    if (response.status < 100 || response.status >= 600) return false

    {% if function.responses != undefined -%}
    {% for response in function.responses -%}
    {% if not response.status.endsWith("XX") -%}
    if (response.status == {{ response.status }}) {
        {% if response.headers and response.headers.length > 0 -%}
        if (response.headers) {
            {%- for header in response.headers %}
            if (!{{ header.schema.validationFunction }}(response.headers["{{ header.name }}"])) {
                ({{ function.validateOutput }} as any).errors = ({{ header.schema.validationFunction }} as any).errors
                return false
            }
            {%- endfor %}
        }
        {% endif -%}
        {% if response.content[0].schema.validationFunction -%}
        if (!{{ response.content[0].schema.validationFunction }}(response.body)) {
            ({{ function.validateOutput }} as any).errors = ({{ response.content[0].schema.validationFunction }} as any).errors
            return false
        }
        {% endif -%}
        return true
    }
    {% endif -%}
    {% endfor -%}
    {% endif -%}
    {% for response in function.responses -%}
    {% if response.status == "1XX" -%}
    if (response.status >= 100 && response.status < 200) {
        {% if response.validationFunction -%}
        if ({{ response.validationFunction }}(response.body)) {
            return true
        } else {
            ({{ function.validateOutput }} as any).errors = ({{ response.validationFunction }} as any).errors
            return false
        }
        {% else -%}
        return true
        {% endif -%}
    }
    {% elif response.status == "2XX" -%}
    if (response.status >= 200 && response.status < 300) {
        {% if response.validationFunction -%}
        if ({{ response.validationFunction }}(response.body)) {
            return true
        } else {
            ({{ function.validateOutput }} as any).errors = ({{ response.validationFunction }} as any).errors
            return false
        }
        {% else -%}
        return true
        {% endif -%}
    }
    {% elif response.status == "3XX" -%}
    if (response.status >= 300 && response.status < 400) {
        {% if response.validationFunction -%}
        if ({{ response.validationFunction }}(response.body)) {
            return true
        } else {
            ({{ function.validateOutput }} as any).errors = ({{ response.validationFunction }} as any).errors
            return false
        }
        {% else -%}
        return true
        {% endif -%}
    }
    {% elif response.status == "4XX" -%}
    if (response.status >= 400 && response.status < 500) {
        {% if response.validationFunction -%}
        if ({{ response.validationFunction }}(response.body)) {
            return true
        } else {
            ({{ function.validateOutput }} as any).errors = ({{ response.validationFunction }} as any).errors
            return false
        }
        {% else -%}
        return true
        {% endif -%}
    }
    {% elif response.status == "5XX" -%}
    if (response.status >= 500 && response.status < 600) {
        {% if response.validationFunction -%}
        if ({{ response.validationFunction }}(response.body)) {
            return true
        } else {
            ({{ function.validateOutput }} as any).errors = ({{ response.validationFunction }} as any).errors
            return false
        }
        {% else -%}
        return true
        {% endif -%}
    }
    {% endif -%}
    {% endfor %}

    ({{ function.validateOutput }} as any).errors = `Response status ${response.status} is unexpected`

    return false
}
{% endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    ResponseData
} from "../types"
import {
    {{ validationDependencies | join(",\n\t") }}
} from "./validation"
import {
{%- for function in functions -%}
    {{- "\n\t" + function.name + "ParametersType," -}}
    {{- "\n\t" + function.name + "BodyType," -}}
    {{- "\n\t" + function.name + "ResponseType," -}}
{%- endfor -%}
{{"\n"}}} from "../signatures/{{ basePath }}"

{% for function in functions -%}
{{ generateValidation(function) }}
{% endfor -%}