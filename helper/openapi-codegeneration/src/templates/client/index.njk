{%- import "../general/utils.njk" as utils -%}

{%- macro generateFunction(function) -%}
    public async {{ function.name }}(
    {{- 
    ("parameters: " + function.name + "ParametersType" if function.parameters) + 
    (", " if function.parameters and (function.body.content[0].schema.typeDeclaration or function.isProxyFunction)) +
    ("body: " + function.name + "BodyType" if function.body.content[0].schema.typeDeclaration or function.isProxyFunction)
    -}}
    ): Promise<{{ function.name }}ResponseType> {
        return this.{{ function.basePath }}Client.{{ function.name }}(
        {{- 
        ("parameters" if function.parameters) + 
        (", " if function.parameters and (function.body.content[0].schema.typeDeclaration or function.isProxyFunction)) +
        ("body" if function.body.content[0].schema.typeDeclaration or function.isProxyFunction)
        -}}
        )
    }
{%- endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

{%- for basePath in basePaths %}
import { {{ basePath | capitalize }}Client } from "./api/{{ basePath }}"
import {
{%- for function in functions %}
    {%- if function.basePath == basePath %}
    {%- if function.parameters %}
    {{ function.name + "ParametersType," }}
    {%- endif %}
    {%- if function.body.content[0].schema.typeDeclaration or function.isProxyFunction %}
    {{ function.name + "BodyType," }}
    {%- endif %}
    {{ function.name + "ResponseType," }}
    {%- endif %}
{%- endfor %}
} from "./signatures/{{ basePath }}"
{%- endfor %}

export * as Types from "./types"
{%- for basePath in basePaths %}
{%- set basePathParts = basePath.split("_") -%}
{%- set list = [] -%}
{%- for part in basePathParts -%}
{%- set list = (list.push(part | capitalize), list) -%}
{%- endfor %}
export * as Signatures{{ list | join }} from "./signatures/{{ basePath }}"
{%- endfor %}
{%- for basePath in basePaths %}
{%- set basePathParts = basePath.split("_") -%}
{%- set list = [] -%}
{%- for part in basePathParts -%}
{%- set list = (list.push(part | capitalize), list) -%}
{%- endfor %}
export * as Validation{{ list | join }} from "./validation/{{ basePath }}"
{%- endfor %}

export class APIClient {
    protected _baseURL: string
    {{ "protected _accessToken: string | undefined = undefined" if "jwt" in security }}
    {{ "protected _username: string | undefined = undefined" if "tui" in security }}
    {{ "protected _password: string | undefined = undefined" if "tui" in security }}
    
    {%- for basePath in basePaths %}
    protected {{ basePath }}Client: {{ basePath | capitalize }}Client
    {%- endfor %}
    
    constructor(baseURL: string) {
        this._baseURL = baseURL
        {%- for basePath in basePaths %}
        this.{{ basePath }}Client = new {{ basePath | capitalize }}Client(baseURL)
        {%- endfor %}
    }

    public set baseURL(baseURL: string) {
        this._baseURL = baseURL
        {%- for basePath in basePaths %}
        this.{{ basePath }}Client.baseURL = baseURL
        {%- endfor %}
    }

    public get baseURL() {
        return this._baseURL
    }

    {% if "jwt" in security -%}
    public set accessToken(accessToken: string) {
        this._accessToken = accessToken
        {%- for basePath in basePaths %}
        {%- if "jwt" in securityBasePath[basePath] %}
        this.{{ basePath }}Client.accessToken = accessToken
        {%- endif %}
        {%- endfor %}
    } 
    {% endif -%}

    {% if "tui" in security -%}
    public set username(username: string) {
        this._username = username
        {%- for basePath in basePaths %}
        {%- if "tui" in securityBasePath[basePath] %}
        this.{{ basePath }}Client.username = username
        {%- endif %}
        {%- endfor %}
    }

    public set password(password: string) {
        this._password = password
        {%- for basePath in basePaths %}
        {%- if "tui" in securityBasePath[basePath] %}
        this.{{ basePath }}Client.password = password
        {%- endif %}
        {%- endfor %}
    }
    {% endif -%}

{%- for function in functions %}

    {{ generateFunction(function) }}
{%- endfor %}
}