/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

import {
{%- for typeguard in typeguards %}
    {{ typeguard.validation }},
{%- endfor %}
} from "./validation/validation"

export type UserType = {
    url: string,
    username: string,
    scopes: string[]
}

export type HttpMethods = "get" | "post" | "patch" | "head" | "options" | "trace" | "delete" | "put"

/**
 * This error class should be used if an error occurs during validation of a request/response.
 */
export class ValidationError extends Error {
    public errors: any

    constructor(message: string, errors: any) {
        super(message)
        this.name = "ValidationError"
        this.errors = errors
    }
}

/**
 * This error class should be used if an error occurs while fetching a request.
 */
export class FetchError extends Error {
    constructor(message: string) {
        super(message)
        this.name = "FetchError"
    }
}

export interface ResponseData {
    status: number,
    headers?: {
        [key: string]: string | undefined
    },
    body?: any
}

export interface SuccessResponse extends ResponseData {
    success?: true
}

export interface ErrorResponse extends ResponseData {
    success?: false
}

export function isSuccessResponse(response: ResponseData): response is SuccessResponse {
    return response.status < 400
}

export function isErrorResponse(response: ResponseData): response is ErrorResponse {
    return response.status >= 400
}

export async function parseResponse(response: Response): Promise<ResponseData> {
    let text = null
    try {
        text = await response.text()
        const json = JSON.parse(text)
        return { status: response.status, body: json }
    } catch {
        return { status: response.status, body: text }
    }
}

{{ pregeneratedTypes | safe }}
{% for typeguard in typeguards -%}
export function is{{ typeguard.name }}(obj: any): obj is {{ typeguard.name }} {
    return {{ typeguard.validation }}(obj)
}

{% endfor %}