/**
 * This file was automatically generated by openapi-codegeneration.
 * MOVE FILE BEFORE MODIFYING IT! OTHERWISE IT WILL BE OVERWRITTEN
 * BY SUBSEQUENT CODE-GENERATION!
 */
import {
    HttpMethods,
    ResponseData,
    FetchError
} from "./types"
import * as cross_fetch from "cross-fetch"

async function parseResponse(response: Response): Promise<ResponseData> {
    let text = null
    try {
        text = await response.text()
        const json = JSON.parse(text)
        return { status: response.status, body: json }
    } catch {
        return { status: response.status, body: text }
    }
}

export async function fetch<P,B,R extends ResponseData>(
    url: string, 
    method: HttpMethods, 
    parameters: P, 
    body: B, 
    validateInput: (parameters: P, body: B) => boolean,
    validateOutput: (response: ResponseData) => boolean
): Promise<R> {
    if (!validateInput(parameters, body)) {
        throw new FetchError("Request validation failed!")
    }
    const raw_response = await cross_fetch.fetch(url, {
        method: method,
        body: JSON.stringify(body),
        headers: body ? { 'Content-Type': 'application/json' } : undefined
    })
    const response = await parseResponse(raw_response)
    if (!validateOutput(response)) {
        throw new FetchError("Response validation failed!")
    }
    return response as R
}