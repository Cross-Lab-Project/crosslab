{%- import "../general/utils.njk" as utils -%}

{%- macro generateFunction(function) -%}
{{ "\t" }}public async {{ function.name }}(
    {{- 
    ("parameters: " + function.name + "ParametersType" if function.parameters) + 
    (", " if function.parameters and (function.body.content[0].schema.typeDeclaration or function.isProxyFunction)) +
    ("body: " + function.name + "BodyType" if function.body.content[0].schema.typeDeclaration or function.isProxyFunction)
    -}}
    ): Promise<{{ function.name }}ResponseType | FetchError> {
        {% if function.parameters.query -%}
        let query: [string,string][] = []
        {% for parameter in function.parameters.query -%}
        if (parameters.{{ parameter.name }}) query.push(["{{ parameter.name }}", "" + parameters.{{ parameter.name }}])
        {% endfor -%}
        {% endif -%}
        return fetch<
            {{- function.name }}ParametersType,
            {{- function.name }}BodyType,
            {{- function.name }}ResponseType>(
            this._baseURL + `{{ function.path | replace(r/{(.*?)}/g, "$${parameters.$1}") }}`
                {%- if function.parameters.query -%}
                + (query ? "?" + new URLSearchParams(query) : "")
                {%- endif -%},
            "{{ function.method }}", 
            {{ "parameters" if function.parameters else "undefined" }}, 
            {{ "body" if function.body.content[0].schema.typeDeclaration or function.isProxyFunction else "undefined" }}, 
            {{ function.validateInput }}, 
            {{ function.validateOutput }}
        )
    }
{%- endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import { fetch } from "../fetch"
import {
    FetchError
} from "../types"
import {
    {{ validationDependencies | join(",\n\t") }}
} from "../validation/{{ basePath }}"
import {
{%- for function in functions %}
    {{ function.name + "ParametersType," }}
    {{ function.name + "BodyType," }}
    {{ function.name + "ResponseType," }}
{%- endfor %}
} from "../signatures/{{ basePath }}"

export class {{ basePath | capitalize }}Client {
    protected _baseURL: string
    protected _accessToken: string | undefined = undefined

    constructor(baseURL: string) {
        this._baseURL = baseURL
    }

    public set baseURL(baseURL: string) {
        this._baseURL = baseURL
    }

    public get baseURL() {
        return this._baseURL
    }

    public set accessToken(accessToken: string) {
        this._accessToken = accessToken
    } 
{% for function in functions -%}
    {{ "\n" }}{{ generateFunction(function) }}
{% endfor -%}
}