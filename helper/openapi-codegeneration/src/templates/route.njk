{%- import "./utils.njk" as utils -%}

{%- macro generateRoute(function, basePath) -%}
router.{{ function.method }}("{{ function.path }}", async (req: TypedRequest<
    {%- if function.parameters.path and function.parameters.path.length > 0 -%}
    {{- utils.parametersTypeDeclaration(function.parameters,false,["path"]) | safe -}}
    {%- else -%}
    {{- "{}" -}}
    {%- endif -%},
    {%- if function.body.content[0].schema.typeDeclaration -%}
    {{- " " }}{{ utils.formatDeclaration(function.body.content[0].schema.typeDeclaration) | safe -}}
    {%- else -%}
    {{- " {}" -}}
    {%- endif -%},
    {%- if function.parameters.query and function.parameters.query.length > 0 -%}
    {{- " " + utils.parametersTypeDeclaration(function.parameters,false,["query"]) | safe -}}
    {%- else -%}
    {{- " {}" -}}
    {%- endif -%}>, res) => {
    let user: any = undefined
    try {
        user = options.JWTVerify(req.header("Authorization"), ["{{ function.scopes | join("\",\"") | safe }}"])
    } catch(err) {
        console.warn("JWT Verification Error!")
    }
    {% if function.parameters -%}
        const parameters = {
        {% if function.parameters.cookie and function.parameters.cookie.length > 0 -%}
            cookie: {
            {% for parameter in function.parameters.cookie -%}
                {{ parameter.name }}: req.cookies["{{ parameter.name }}"]
            {% endfor -%}
            }{{ "," if function.parameters.header or function.parameters.path or function.parameters.query }}
        {% endif -%}
        {% if function.parameters.header and function.parameters.header.length > 0 -%}
            header: {
            {% for parameter in function.parameters.header -%}
                {{ parameter.name }}: req.headers["{{ parameter.name }}"]
            {% endfor -%}
            }{{ "," if function.parameters.path or function.parameters.query }}
        {% endif -%}
        {% if function.parameters.path and function.parameters.path.length > 0 -%}
            path: {
            {% for parameter in function.parameters.path -%}
                {{ parameter.name }}: req.params["{{ parameter.name }}"]
            {% endfor -%}
            }{{ "," if function.parameters.query }}
        {% endif -%}
        {% if function.parameters.query and function.parameters.query.length > 0 -%}
            query: {
            {% for parameter in function.parameters.query -%}
                {{ parameter.name }}: req.query["{{ parameter.name }}"]
            {% endfor -%}
            }
        {% endif -%}
        }
    {% endif -%}
    {% if function.body -%}
    const body = req.body
    {% endif -%}
    if (!{{ function.validateInput }}({{ "parameters" if function.parameters }}{{ ", " if function.parameters and function.body }}{{ "body" if function.body }})) {
        return res.status(400).send()
    }
    try {
        const result = await {{ basePath }}.{{ function.name }}({{ "parameters, " if function.parameters }}{{ "body, " if function.body }}user)
        if (!{{ function.validateOutput }}(result)) {
            return res.status(400).send()
        }
        return res.status(result.status || 200).send(result.body)
    } catch(err) {
        return res.status(500).send({
            status: 500,
            error: "Server Error"
        })
    }
})
{% endmacro -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import express from "express"
import * as {{ basePath }} from "../../operations/{{ basePath }}"
import {
    initServiceOptions,
    TypedRequest,
    {{ typeDependencies | join(",\n\t") }}
} from "../types"
import {
    {{ validationDependencies | join(",\n\t") }}
} from "../validation/{{ basePath }}"

export default function {{ basePath }}Routes(options: initServiceOptions): express.Router {
    const router = express.Router()
    {% for function in functions %}
    {{ generateRoute(function, basePath) | indent -}}
    {% endfor %}
    return router
}