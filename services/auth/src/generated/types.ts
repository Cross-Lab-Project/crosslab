// @ts-nocheck
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import { Application, Request, ErrorRequestHandler } from "express"

import {
    validateUserType,
	validateUser,
	validateUserTypeRequest,
	validateUserTypeResponse,
	validateUserRequest,
	validateUserResponse
} from "./basicValidation.cjs"
export type TypedRequest<P,B,Q> = Request<P, {}, B, Q, {}>

export type initServiceOptions = {
    preHandlers?: ((app: Application) => void)[]
    postHandlers?: ((app: Application) => void)[]
    errorHandler?: ErrorRequestHandler
}

export interface ResponseData {
    status: number,
    headers?: {
        [key: string]: string | undefined
    },
    body?: any
}

export interface SuccessResponse extends ResponseData {
    success?: true
}

export interface ErrorResponse extends ResponseData {
    success?: false
}

export function isSuccessResponse(response: ResponseData): response is SuccessResponse {
    return response.status < 400
}

export function isErrorResponse(response: ResponseData): response is ErrorResponse {
    return response.status >= 400
}

export abstract class ErrorWithStatus extends Error {
    public status: number | undefined

    constructor(message: string, status?: number) {
        super(message)
        this.status = status
        this.name = "ErrorWithStatus"
    }
}

export class ValidationError extends ErrorWithStatus {
    public errors: any

    constructor(message: string, errors?: any, status?: number) {
        super(message, status)
        this.name = "ValidationError"
        this.errors = errors
    }
}

/**
 * This type allows to pick the required properties of another type.
 */
export type Require<Type, Key extends keyof Type> = Partial<Type> & {
    [Property in Key]-?: Type[Property]
}

export type SizedTuple<
    T,
    MIN extends number | undefined = undefined,
    MAX extends number | undefined = undefined
> = MIN extends number
    ? MAX extends number
        ? _SizedTuple<T, NumericRangeTuple<MIN, MAX>>
        : TupleObject<T, NumericRangeTuple<0, MIN>> & T[]
    : MAX extends number
    ? _SizedTuple<T, NumericRangeTuple<0, MAX>, true>
    : T[];

type _SizedTuple<
    T,
    ARR extends number[],
    Z extends boolean = false
> = ARR extends [infer HEAD extends number, ...infer TAIL extends number[]]
    ? Tuple<T, HEAD, Z> | _SizedTuple<T, TAIL, Z>
    : never;

type Tuple<T, N extends number, Z extends boolean = false> = _Tuple<
    T,
    NumericRangeTuple<Z extends true ? 0 : 1, N>
>;

type _Tuple<T, N extends number[]> = N extends [
    infer HEAD,
    ...infer TAIL extends number[]
]
    ? HEAD extends 0
        ? [] | _Tuple<T, TAIL>
        : [T, ..._Tuple<T, TAIL>]
    : [];

type TupleObject<T, N extends number[]> = N extends [
    infer HEAD extends number,
    ...infer TAIL extends number[]
]
    ? TAIL extends []
        ? {}
        : { [P in HEAD]: T } & TupleObject<T, TAIL>
    : {};

export type NumericRange<
    START extends number,
    END extends number,
    ARR extends unknown[] = [],
    ACC extends number = never
> = ARR['length'] extends END
    ? ACC | START | END
    : NumericRange<
          START,
          END,
          [...ARR, 1],
          ARR[START] extends undefined ? ACC : ACC | ARR['length']
      >;

type NumericRangeTuple<
    START extends number,
    END extends number,
    ARR extends unknown[] = [],
    ACC extends number[] = []
> = ARR['length'] extends END
    ? [START, ...ACC, END]
    : NumericRangeTuple<
          START,
          END,
          [...ARR, 1],
          ARR[START] extends undefined ? ACC : [...ACC, ARR['length']]
      >;


                export type UserType<T extends "request"|"response"|"all" = "all"> = T extends "all" 
                    ? {
	url: string
	username: string
	scopes: (string)[]
	[k: string]: unknown
}
                    : T extends "request" 
                    ? {
	url: string
	username: string
	scopes: (string)[]
	[k: string]: unknown
}
                    : T extends "response"
                    ? {
	url: string
	username: string
	scopes: (string)[]
	[k: string]: unknown
}
                    : never
                


                export type Credentials<T extends "request"|"response"|"all" = "all"> = T extends "all" 
                    ? {
	/**
	 * Username of the user.
	 */
	username: string
	/**
	 * Password of the user.
	 */
	password: string
	[k: string]: unknown
}
                    : T extends "request" 
                    ? {
	/**
	 * Username of the user.
	 */
	username: string
	/**
	 * Password of the user.
	 */
	password: string
	[k: string]: unknown
}
                    : T extends "response"
                    ? {
	/**
	 * Username of the user.
	 */
	username: string
	/**
	 * Password of the user.
	 */
	password: string
	[k: string]: unknown
}
                    : never
                


                /**
 * Authentication method.
 */
export type AuthMethod<T extends "request"|"response"|"all" = "all"> = T extends "all" 
                    ? "tui" | "local"
                    : T extends "request" 
                    ? "tui" | "local"
                    : T extends "response"
                    ? "tui" | "local"
                    : never
                


                export type User<T extends "request"|"response"|"all" = "all"> = T extends "all" 
                    ? {
	url?: string
	id?: string
	username?: string
	password?: string
	admin?: boolean
	[k: string]: unknown
}
                    : T extends "request" 
                    ? {
	username?: string
	password?: string
	admin?: boolean
	[k: string]: unknown
}
                    : T extends "response"
                    ? {
	url?: string
	id?: string
	username?: string
	admin?: boolean
	[k: string]: unknown
}
                    : never
                

export function isUserType<T extends "request"|"response"|"all" = "all">(obj: unknown, type: "request" | "response" | "all" | T = "all"): obj is UserType<T> {
    switch (type) {
        case "request":
            return validateUserTypeRequest(obj)
        case "response":
            return validateUserTypeResponse(obj)
        default:
            return validateUserType(obj)
    }
}

export function isUser<T extends "request"|"response"|"all" = "all">(obj: unknown, type: "request" | "response" | "all" | T = "all"): obj is User<T> {
    switch (type) {
        case "request":
            return validateUserRequest(obj)
        case "response":
            return validateUserResponse(obj)
        default:
            return validateUser(obj)
    }
}