// @ts-nocheck
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    ResponseData
} from "./types.js"

import {
    getAuthParametersType,
	getAuthResponseType,
	postLoginRequestBodyType,
	postLoginResponseType,
	postLogoutRequestBodyType,
	postLogoutResponseType,
	getUsersParametersType,
	getUsersResponseType,
	postUsersRequestBodyType,
	postUsersResponseType,
	getUsersByUserIdParametersType,
	getUsersByUserIdResponseType,
	patchUsersByUserIdParametersType,
	patchUsersByUserIdRequestBodyType,
	patchUsersByUserIdResponseType,
	deleteUsersByUserIdParametersType,
	deleteUsersByUserIdResponseType,
	getIdentityResponseType,
	patchIdentityRequestBodyType,
	patchIdentityResponseType,
	postTokenRequestBodyType,
	postTokenResponseType
} from "./signatures.js"

import * as basicValidation from "./basicValidation.cjs"

/**
 * This function validates the inputs of a GET request on /auth
 */
export function validateGetAuthInput(parameters: getAuthParametersType) {
    if (parameters) {
        if (
            !basicValidation.validateAuthorizationRequest(parameters["Authorization"])
			&& parameters['Authorization'] !== undefined
        ) {
            (validateGetAuthInput as any).errors = (basicValidation.validateAuthorizationRequest as any).errors
            return false
        }
        if (
            !basicValidation.validateXRealIPRequest(parameters["X-Real-IP"])
			&& parameters['X-Real-IP'] !== undefined
        ) {
            (validateGetAuthInput as any).errors = (basicValidation.validateXRealIPRequest as any).errors
            return false
        }
        if (
            !basicValidation.validateXForwardedProtoRequest(parameters["X-Forwarded-Proto"])
			&& parameters['X-Forwarded-Proto'] !== undefined
        ) {
            (validateGetAuthInput as any).errors = (basicValidation.validateXForwardedProtoRequest as any).errors
            return false
        }
    } else {
        if (parameters !== undefined) {
            return false
        }
    }

    return true
}

/**
 * This function validates the outputs to a GET request on /auth
 */
export function validateGetAuthOutput(response: ResponseData): response is getAuthResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (response.headers) {
            if (
                !basicValidation.validateGetAuthHeaderXRequestAuthenticationResponse(response.headers["XRequestAuthentication"])
                
				&& response.headers['XRequestAuthentication'] !== undefined ) {
                (validateGetAuthOutput as any).errors = (basicValidation.validateGetAuthHeaderXRequestAuthenticationResponse as any).errors
                return false
            }
        } else {
            if (response.headers !== undefined) {
                return false
            }
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetAuthOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a POST request on /login
 */
export function validatePostLoginInput(body: postLoginRequestBodyType) {
    if (!basicValidation.validatePostLoginRequestBodyRequest(body)) {
        (validatePostLoginInput as any).errors = (basicValidation.validatePostLoginRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a POST request on /login
 */
export function validatePostLoginOutput(response: ResponseData): response is postLoginResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 201) {
        if (!basicValidation.validatePostLoginResponse201Response(response.body)) {
            (validatePostLoginOutput as any).errors = (basicValidation.validatePostLoginResponse201Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validatePostLoginOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a POST request on /logout
 */
export function validatePostLogoutInput(body: postLogoutRequestBodyType) {
    if (!basicValidation.validatePostLogoutRequestBodyRequest(body)) {
        (validatePostLogoutInput as any).errors = (basicValidation.validatePostLogoutRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a POST request on /logout
 */
export function validatePostLogoutOutput(response: ResponseData): response is postLogoutResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 204) {
        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validatePostLogoutOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a GET request on /users
 */
export function validateGetUsersInput(parameters: getUsersParametersType) {
    if (parameters) {
        if (
            !basicValidation.validateUsernameRequest(parameters["username"])
			&& parameters['username'] !== undefined
        ) {
            (validateGetUsersInput as any).errors = (basicValidation.validateUsernameRequest as any).errors
            return false
        }
    } else {
        if (parameters !== undefined) {
            return false
        }
    }

    return true
}

/**
 * This function validates the outputs to a GET request on /users
 */
export function validateGetUsersOutput(response: ResponseData): response is getUsersResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!basicValidation.validateGetUsersResponse200Response(response.body)) {
            (validateGetUsersOutput as any).errors = (basicValidation.validateGetUsersResponse200Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetUsersOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a POST request on /users
 */
export function validatePostUsersInput(body: postUsersRequestBodyType) {
    if (!basicValidation.validatePostUsersRequestBodyRequest(body)) {
        (validatePostUsersInput as any).errors = (basicValidation.validatePostUsersRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a POST request on /users
 */
export function validatePostUsersOutput(response: ResponseData): response is postUsersResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 201) {
        if (!basicValidation.validatePostUsersResponse201Response(response.body)) {
            (validatePostUsersOutput as any).errors = (basicValidation.validatePostUsersResponse201Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validatePostUsersOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a GET request on /users/{user_id}
 */
export function validateGetUsersByUserIdInput(parameters: getUsersByUserIdParametersType) {
    if (parameters) {
        if (
            !basicValidation.validateUserIdRequest(parameters["user_id"])
        ) {
            (validateGetUsersByUserIdInput as any).errors = (basicValidation.validateUserIdRequest as any).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs to a GET request on /users/{user_id}
 */
export function validateGetUsersByUserIdOutput(response: ResponseData): response is getUsersByUserIdResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!basicValidation.validateGetUsersByUserIdResponse200Response(response.body)) {
            (validateGetUsersByUserIdOutput as any).errors = (basicValidation.validateGetUsersByUserIdResponse200Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetUsersByUserIdOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a PATCH request on /users/{user_id}
 */
export function validatePatchUsersByUserIdInput(parameters: patchUsersByUserIdParametersType, body: patchUsersByUserIdRequestBodyType) {
    if (parameters) {
        if (
            !basicValidation.validateUserIdRequest(parameters["user_id"])
        ) {
            (validatePatchUsersByUserIdInput as any).errors = (basicValidation.validateUserIdRequest as any).errors
            return false
        }
    } else {
        return false
    }

    if (!basicValidation.validatePatchUsersByUserIdRequestBodyRequest(body)) {
        (validatePatchUsersByUserIdInput as any).errors = (basicValidation.validatePatchUsersByUserIdRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a PATCH request on /users/{user_id}
 */
export function validatePatchUsersByUserIdOutput(response: ResponseData): response is patchUsersByUserIdResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!basicValidation.validatePatchUsersByUserIdResponse200Response(response.body)) {
            (validatePatchUsersByUserIdOutput as any).errors = (basicValidation.validatePatchUsersByUserIdResponse200Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validatePatchUsersByUserIdOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a DELETE request on /users/{user_id}
 */
export function validateDeleteUsersByUserIdInput(parameters: deleteUsersByUserIdParametersType) {
    if (parameters) {
        if (
            !basicValidation.validateUserIdRequest(parameters["user_id"])
        ) {
            (validateDeleteUsersByUserIdInput as any).errors = (basicValidation.validateUserIdRequest as any).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs to a DELETE request on /users/{user_id}
 */
export function validateDeleteUsersByUserIdOutput(response: ResponseData): response is deleteUsersByUserIdResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 204) {
        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateDeleteUsersByUserIdOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a GET request on /identity
 */
export function validateGetIdentityInput() {
    return true
}

/**
 * This function validates the outputs to a GET request on /identity
 */
export function validateGetIdentityOutput(response: ResponseData): response is getIdentityResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!basicValidation.validateGetIdentityResponse200Response(response.body)) {
            (validateGetIdentityOutput as any).errors = (basicValidation.validateGetIdentityResponse200Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetIdentityOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a PATCH request on /identity
 */
export function validatePatchIdentityInput(body: patchIdentityRequestBodyType) {
    if (body === undefined) {
        return true
    }

    if (!basicValidation.validatePatchIdentityRequestBodyRequest(body)) {
        (validatePatchIdentityInput as any).errors = (basicValidation.validatePatchIdentityRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a PATCH request on /identity
 */
export function validatePatchIdentityOutput(response: ResponseData): response is patchIdentityResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!basicValidation.validatePatchIdentityResponse200Response(response.body)) {
            (validatePatchIdentityOutput as any).errors = (basicValidation.validatePatchIdentityResponse200Response as any).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validatePatchIdentityOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs of a POST request on /token
 */
export function validatePostTokenInput(body: postTokenRequestBodyType) {
    if (!basicValidation.validatePostTokenRequestBodyRequest(body)) {
        (validatePostTokenInput as any).errors = (basicValidation.validatePostTokenRequestBodyRequest as any).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs to a POST request on /token
 */
export function validatePostTokenOutput(response: ResponseData): response is postTokenResponseType {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 201) {
        if (!basicValidation.validatePostTokenResponse201Response(response.body)) {
            (validatePostTokenOutput as any).errors = (basicValidation.validatePostTokenResponse201Response as any).errors
            return false
        }

        return true
    }

    (validatePostTokenOutput as any).errors = `Response status ${response.status} is unexpected`

    return false
}