{%- set operations = (api | resolveOperations) -%}
{%- set schemas = (api | resolveSchemas) -%}
{%- set typeDependencies = [] -%}

{%- macro generateParameterType(operation, type) -%}
    {% set comma = joiner() %}
    export type {{ operation.name }}{{ type | capitalize }}ParametersType = {
        {% for parameter in operation.parameters -%}
            {% if parameter.in == type %}
                {{ comma() }}"{{parameter.name}}"
                {%- if parameter.required %}: {% else %}?: {% endif -%}
                {{ parameter.schema | typeDeclaration(schemas, { "schemaType": "request" }) }}
            {% endif %}
        {%- endfor -%}
    }
{%- endmacro -%}

{%- macro generateBodyType(operation) -%}
    {% if operation.isProxyRequest %}
        export type {{ operation.name }}RequestBodyType = any
    {% elif operation.requestBody %}
        {% set type = operation.requestBody.schema | typeDeclaration(schemas, { "schemaType": "request" }) %}
        {% set typeDependencies = (typeDependencies.push(operation.requestBody.schema | typeDependencies(schemas)), typeDependencies) %}
        export type {{ operation.name }}RequestBodyType = 
            {{- " " + type }}
            {{- " | undefined" if not operation.requestBody.required }}
    {% else %}
        export type {{ operation.name }}RequestBodyType = never
    {% endif %}
{%- endmacro -%}

{%- macro generateResponseBodyType(operation) -%}
    export type {{ operation.name }}ResponseBodyType = never
    {%- for response in operation.responses %}
        {%- if response.schema -%}
            | {{ response.schema | typeDeclaration(schemas, { "schemaType": "response" }) }}
        {%- endif %}
    {%- endfor %}
{%- endmacro -%}


{%- macro generateTypes() -%}
    {%- for operation in operations %}

        /**
        * Typings for the a {{ operation.method | upper }} request on {{ operation.path }}
        */
        export const {{ operation.name }}Path = '{{ operation.path | formatExpressPath }}';
        {{ generateParameterType(operation, 'path') | prettier | replace("{}", "never") }}
        {{ generateParameterType(operation, 'query') | prettier | replace("{}", "never") }}
        {{ generateBodyType(operation) }}
        {{ generateResponseBodyType(operation) }}
    {%- endfor %}
{%- endmacro -%}

{%- set parameterTypes = generateTypes() -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    {{- "\n\tSizedTuple," if parameterTypes | includes("SizedTuple<") }}
    {{- "\n\tRequire," if parameterTypes | includes("Require<") }}
    {{- "\n\tNumericRange," if parameterTypes | includes("NumericRange<") }}
    {{ typeDependencies | flatten | unique | join(",\n\t") }}
} from "./types"

{{ parameterTypes }}