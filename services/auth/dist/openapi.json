{
  "openapi": "3.1.0",
  "info": {
    "title": "CrossLab Simple Authentication Service (internal)",
    "description": "This is the OpenAPI description for a simple authentification server, supporting LDAP and Token based authentication.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.goldi-labs.de"
    },
    {
      "url": "http://localhost"
    }
  ],
  "components": {
    "securitySchemes": {
      "TuiAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic authentication using the TUI username and password."
      },
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "As this is the API description of the internal Authentication API, the only supported security schema is the JWT bearer token.\nThis token will be populated by the API Gateway.\nTo learn about the general Authentification scheme, please refer to the [Authentication section](https://cross-lab-project.github.io/crosslab/backend.html#authentification) in the CrossLab architecture description."
      }
    },
    "parameters": {
      "authorization": {
        "in": "header",
        "name": "Authorization",
        "schema": {
          "type": "string"
        }
      },
      "x_real_ip": {
        "in": "header",
        "name": "X-Real-IP",
        "schema": {
          "type": "string",
          "format": "ipv4",
          "description": "The IP address of the client."
        }
      },
      "x_forwarded_proto": {
        "in": "header",
        "name": "X-Forwarded-Proto",
        "schema": {
          "type": "string",
          "description": "The protocol of the client."
        }
      },
      "device_url": {
        "in": "query",
        "name": "device_url",
        "description": "Url of the device",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "username": {
        "in": "path",
        "name": "username",
        "description": "Username of the user",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "role_name": {
        "in": "path",
        "name": "role_name",
        "description": "Name of the role",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "credentials": {
        "title": "Credentials",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "auth_method": {
        "title": "AuthMethod",
        "type": "string",
        "enum": [
          "tui",
          "local"
        ]
      },
      "role": {
        "title": "Role",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "user": {
        "title": "User",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/role"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth": {
      "get": {
        "x-internal": true,
        "tags": [
          "authentication"
        ],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "operationId": "auth",
        "summary": "Authenticate user",
        "description": "This endpoint will authenticate a user and return a JWT for the internal use of the microservice architecture.\nThe return code will always be 200, but the JWT will be empty if the authentication failed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization"
          },
          {
            "$ref": "#/components/parameters/x_real_ip"
          },
          {
            "$ref": "#/components/parameters/x_forwarded_proto"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the JWT which represents the authenticated user.",
            "headers": {
              "Authorization": {
                "required": false,
                "schema": {
                  "type": "string",
                  "format": "jwt",
                  "description": "The JWT which represents the authenticated user."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "operationId": "login",
        "summary": "Login user",
        "description": "This endpoint will login a user and return an access token for the use of the microservice architecture.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/credentials"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "method": {
                        "$ref": "#/components/schemas/auth_method"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return the access token.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the access token",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "security": [
          {
            "JWT": [
              "logout"
            ]
          }
        ],
        "operationId": "logout",
        "summary": "Logout user",
        "description": "This endpoint will logout a user and remove the corresponding access token for the use of the microservice architecture.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token to be invalidated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged out the user."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/device_token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "security": [
          {
            "JWT": [
              "device_token",
              "device_token:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_url"
          }
        ],
        "operationId": "device_token",
        "summary": "Authenticate user",
        "description": "This endpoint will generate a new device token linked to the requesting user.",
        "responses": {
          "200": {
            "description": "Return the token which represents the device.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON representation of the users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "post": {
        "summary": "Create new user",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:create"
            ]
          }
        ],
        "requestBody": {
          "description": "User to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The JSON representation of the created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "summary": "Get user by username",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:list"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON respresentation of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "summary": "Update user by username",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "requestBody": {
          "description": "Updated user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "delete": {
        "summary": "Delete user by username",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/users/{username}/roles/{role_name}": {
      "put": {
        "summary": "Add new role to user",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/role_name"
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON representation of the updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "delete": {
        "summary": "Delete role from user",
        "tags": [
          "user"
        ],
        "security": [
          {
            "JWT": [
              "users",
              "users:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/role_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Role deleted successfully from user"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/identity": {
      "get": {
        "summary": "Get identity of yourself",
        "tags": [
          "identity"
        ],
        "security": [
          {
            "JWT": [
              "identity",
              "identity:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON representation of the corresponding user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "summary": "Update identity of yourself",
        "tags": [
          "identity"
        ],
        "security": [
          {
            "JWT": [
              "identity",
              "identity:edit"
            ]
          }
        ],
        "requestBody": {
          "description": "Updated identity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    }
  }
}