{
  "openapi": "3.1.0",
  "info": {
    "title": "CrossLab Simple Authentication Service (internal)",
    "description": "This is the OpenAPI description for a simple authentification server, supporting LDAP and Token based authentication.",
    "version": "0.0.1",
    "x-service-name": "Authentication Service"
  },
  "paths": {
    "/auth": {
      "get": {
        "operationId": "auth",
        "x-internal": true,
        "tags": ["authentication"],
        "security": [],
        "summary": "Authenticate user",
        "description": "This endpoint will authenticate a user and return a JWT for the internal use of the microservice architecture.\nThe return code will always be 200, but the JWT will be empty if the authentication failed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization"
          },
          {
            "$ref": "#/components/parameters/x_real_ip"
          },
          {
            "$ref": "#/components/parameters/x_forwarded_proto"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the JWT which represents the authenticated user.",
            "headers": {
              "X-Request-Authentication": {
                "required": false,
                "schema": {
                  "type": "string",
                  "format": "jwt",
                  "description": "The JWT which represents the authenticated user."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/login": {
      "post": {
        "operationId": "login",
        "tags": ["authentication"],
        "security": [],
        "summary": "Login user",
        "description": "This endpoint will login a user and return an access token for the use of the microservice architecture.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/credentials"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "method": {
                        "$ref": "#/components/schemas/auth_method"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return the access token.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The access token.",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-destructure-input": true
      }
    },
    "/logout": {
      "post": {
        "operationId": "logout",
        "tags": ["authentication"],
        "security": [
          {
            "JWT": ["logout"]
          }
        ],
        "summary": "Logout user",
        "description": "This endpoint will logout a user and remove the corresponding access token for the use of the microservice architecture.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token to be invalidated."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully logged out the user."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "list_users",
        "summary": "Get all users",
        "tags": ["user"],
        "security": [
          {
            "JWT": ["users", "users:read"]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON representation of the users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-optional-url": true
      },
      "post": {
        "operationId": "create_user",
        "summary": "Create a user",
        "tags": ["user"],
        "security": [
          {
            "JWT": ["users", "users:create"]
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The JSON representation of the created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-optional-url": true
      }
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "get_user",
        "summary": "Get a user",
        "tags": ["user"],
        "security": [
          {
            "JWT": ["users", "users:read"]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON respresentation of the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "operationId": "update_user",
        "summary": "Update a user",
        "tags": ["user"],
        "security": [
          {
            "JWT": ["users", "users:write"]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "requestBody": {
          "description": "Updated user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the updated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "delete": {
        "operationId": "delete_user",
        "summary": "Delete a user",
        "tags": ["user"],
        "security": [
          {
            "JWT": ["users", "users:delete"]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/identity": {
      "get": {
        "operationId": "get_identity",
        "summary": "Get identity",
        "tags": ["identity"],
        "security": [
          {
            "JWT": ["identity", "identity:read"]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON representation of the corresponding user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "operationId": "update_identity",
        "summary": "Update identity",
        "tags": ["identity"],
        "security": [
          {
            "JWT": ["identity", "identity:write"]
          }
        ],
        "requestBody": {
          "description": "Updated identity.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the updated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/token": {
      "post": {
        "operationId": "createToken",
        "security": [],
        "summary": "Create a new token",
        "description": "This endpoint will create a new token for the use of the microservice architecture.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user."
                  },
                  "claims": {
                    "type": "object",
                    "description": "The claims that will be added to the token. If left empty, the token will have the full scope of the user.\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The token was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "As this is the API description of the internal Authentication API, the only supported security schema is the JWT bearer token.\nThis token will be populated by the API Gateway.\nTo learn about the general Authentification scheme, please refer to the [Authentication section](https://cross-lab-project.github.io/crosslab/backend.html#authentification) in the CrossLab architecture description."
      }
    },
    "parameters": {
      "authorization": {
        "in": "header",
        "name": "Authorization",
        "schema": {
          "type": "string"
        }
      },
      "x_real_ip": {
        "in": "header",
        "name": "X-Real-IP",
        "schema": {
          "type": "string",
          "format": "ipv4",
          "description": "The IP address of the client."
        }
      },
      "x_forwarded_proto": {
        "in": "header",
        "name": "X-Forwarded-Proto",
        "schema": {
          "type": "string",
          "description": "The protocol of the client."
        }
      },
      "user_id": {
        "in": "path",
        "name": "user_id",
        "description": "ID of a user.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "credentials": {
        "title": "Credentials",
        "type": "object",
        "properties": {
          "username": {
            "description": "Username of the user.",
            "type": "string"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          }
        },
        "required": ["username", "password"]
      },
      "auth_method": {
        "title": "AuthMethod",
        "type": "string",
        "description": "Authentication method.",
        "enum": ["tui", "local"]
      },
      "user": {
        "title": "User",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": ["url", "id", "username", "password"]
      },
      "user_update": {
        "title": "User Update",
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": ["password"]
      }
    }
  }
}
