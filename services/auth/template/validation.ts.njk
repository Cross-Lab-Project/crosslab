/* eslint-disable @typescript-eslint/no-explicit-any */
{%- set operations = (api | resolveOperations) -%}
{%- set typeDependencies = [] -%}
{%- set validationDependencies = [] -%}

{%- for operation in operations -%}
    {%- if operation.parameters -%}
        {%- for parameter in operation.parameters -%}
            {%- set validationDependencies = (validationDependencies.push("validate" + (parameter.name | formatName)), validationDependencies) -%}
        {%- endfor -%}
    {%- endif -%}
    {%- if operation.requestBody -%}
        {%- set validationDependencies = (validationDependencies.push("validate" + (operation.name | cap) + "RequestBody"), validationDependencies) -%}
    {%- endif -%}
    {%- if operation.responses -%}
        {%- for response in operation.responses -%}
            {%- if response.schema -%}
                {%- set validationDependencies = (validationDependencies.push("validate" + (operation.name | cap) + "Response" + response.status), validationDependencies) -%}
            {%- endif -%}
            {%- for header in response.headers -%}
                {%- set validationDependencies = (validationDependencies.push("validate" + (operation.name | cap) + "Header" + (header.name)), validationDependencies) -%}
            {%- endfor -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}

/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

import { ValidationError } from '@crosslab/service-common';
import { Request, Response, RequestHandler } from 'express';
import {
    {{ typeDependencies | unique | join(",\n\t") }}
} from "./types"

import * as type_validation from "./type_validation"
import * as operations from './operations'

{%- for operation in operations %}

/**
 * This function validates the {{ operation.method | upper }} request on {{ operation.path }}
 */
export function validate{{ operation.name | cap }}(
    handler: RequestHandler<
        operations.{{ operation.name }}PathParametersType,
        operations.{{ operation.name }}ResponseBodyType,
        operations.{{ operation.name }}RequestBodyType>
) {
    return async (req: Request, res: Response, next: any) => {
        try{
            {% if operation.parameters -%}
                const parameters = {
                    {%- set parameterDefinitions = [] -%}
                    {%- for parameter in operation.parameters %}
                    {%- set parameterDefinitions = (
                        parameterDefinitions.push(
                            '"' + parameter.name + '": '
                            + ('req.params["' + parameter.name + '"]' if parameter.in == "path")
                            + ('req.query["' + parameter.name + '"]' + (' === "true"' if parameter.schema.type == "boolean") if parameter.in == "query")
                            + ('req.get("' + parameter.name + '")' if parameter.in == "header")
                            + ('req.cookies["' + parameter.name + '"' if parameter.in == "cookie")
                        ), parameterDefinitions) -%}
                    {%- endfor %}
                    {{ parameterDefinitions | join(",\n\t\t\t") }}
                }
                {% for parameter in operation.parameters %}
                    {%- if not parameter.required %}
                        if(parameters["{{ parameter.name }}"] !== undefined) {
                    {%- endif -%}

                    if (!type_validation.validate{{ parameter.name | formatName -}}Request(parameters["{{ parameter.name }}"])) {
                        const errors = (type_validation.validate{{ parameter.name | formatName }}Request as any).errors
                        throw new ValidationError('Validation Error', errors, 400);
                    }

                    {%- if not parameter.required %}
                        }
                    {%- endif %}
                {%- endfor %}
            {% endif -%}

            {% if operation.requestBody -%}
                {% if not operation.requestBody.required -%}
                    if (req.body !== undefined) {
                {% endif -%}

                if (!type_validation.validate{{ operation.name | cap }}RequestBodyRequest(req.body)) {
                    const errors = (type_validation.validate{{ operation.name | cap }}RequestBodyRequest as any).errors
                    throw new ValidationError('Validation Error', errors, 400);
                }

                {%- if not operation.requestBody.required%}
                    }
                {%- endif %}
            {% endif -%}

            return await handler(req as any, res, next);
        } catch (err) {
            next(err);
        }
    }
}

{%- endfor %}