// tslint:disable
// @ts-nocheck
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import express from "express"
import { checkJWT } from "../../security"
import * as institutions from "../../services/institutions"
import { Institution, initServiceOptions } from "../types"
import {
    validateInputPostInstitutions,
    validateInputGetInstitutionsByInstitutionId,
    validateInputPatchInstitutionsByInstitutionId,
    validateInputDeleteInstitutionsByInstitutionId,
} from "../validation/institutions"

export default function institutionRoutes(options: initServiceOptions ){
    const router = express.Router()
    router.get("/", async (req, res) => {
        let user: any=undefined
        try{
            user=options.JWTVerify("jwt", ["scope1", "scope2"])
        }catch(err){
            console.warn("JWT Verification Error?")
        }
        const parameters = {}
        const body = {}
        try {
            const result = await institutions.getInstitutions(
                parameters,
                body,
                user
                )
                return res.status(result.status || 200).send(result.data)
            } catch (err) {
                return res.status(500).send({
                    status: 500,
                    error: "Server Error",
                })
            }
    })

    router.post("/", async (req, res) => {
        if (!checkJWT(req)) {
            return res.status(401).send()
        }
        const parameters = {}
        const body: Institution = req.body
        if (!validateInputPostInstitutions(body)) {
        return res.status(400).send()
    }
    try {
        const user = { username: "testUser" }
        const result = await institutions.postInstitutions(
            parameters,
            body,
            user
            )
            return res.status(result.status || 200).send(result.data)
        } catch (err) {
            return res.status(500).send({
                status: 500,
                error: "Server Error",
            })
        }
})

router.get("/:institution_id", async (req, res) => {
    if (!checkJWT(req)) {
        return res.status(401).send()
    }
    const parameters: {
        institution_id: string
    } = {
        institution_id: req.params["institution_id"],
    }
    const body = {}
    if (!validateInputGetInstitutionsByInstitutionId(parameters)) {
        return res.status(400).send()
    }
    try {
        const user = { username: "testUser" }
        const result = await institutions.getInstitutionsByInstitutionId(
            parameters,
            body,
            user
        )
        return res.status(result.status || 200).send(result.data)
    } catch (err) {
        return res.status(500).send({
            status: 500,
            error: "Server Error",
        })
    }
})

router.patch("/:institution_id", async (req, res) => {
    if (!checkJWT(req)) {
        return res.status(401).send()
    }
    const parameters: {
        institution_id: string
    } = {
        institution_id: req.params["institution_id"],
    }
    const body: Institution = req.body
    if (!validateInputPatchInstitutionsByInstitutionId(parameters, body)) {
        return res.status(400).send()
    }
    try {
        const user = { username: "testUser" }
        const result = await institutions.patchInstitutionsByInstitutionId(
            parameters,
            body,
            user
            )
            return res.status(result.status || 200).send(result.data)
        } catch (err) {
            return res.status(500).send({
                status: 500,
                error: "Server Error",
            })
        }
    })
    
    router.delete("/:institution_id", async (req, res) => {
        if (!checkJWT(req)) {
            return res.status(401).send()
        }
        const parameters: {
            institution_id: string
        } = {
            institution_id: req.params["institution_id"],
        }
        const body = {}
    if (!validateInputDeleteInstitutionsByInstitutionId(parameters)) {
        return res.status(400).send()
    }
    try {
        const user = { username: "testUser" }
        const result = await institutions.deleteInstitutionsByInstitutionId(
            parameters,
            body,
            user
            )
            return res.status(result.status || 200).send(result.data)
        } catch (err) {
            return res.status(500).send({
                status: 500,
                error: "Server Error",
            })
        }
    })
    return router
}