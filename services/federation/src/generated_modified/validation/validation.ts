// tslint:disable
// @ts-nocheck
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
"use strict";
export const validateSchemaInstitution = validate21;
const schema6 = {
    title: "Institution",
    type: "object",
    properties: {
        name: { type: "string" },
        homepage: { type: "string", format: "uri" },
        api: { type: "string", format: "uri" },
        federatedApi: { type: "string", format: "uri" },
        apiToken: { type: "string", writeOnly: true },
    },
};
const formats0 = require("ajv-formats/dist/formats").fullFormats.uri;
function validate21(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.name !== undefined) {
                const _errs1 = errors;
                if (typeof data.name !== "string") {
                    validate21.errors = [
                        {
                            instancePath: instancePath + "/name",
                            schemaPath: "#/properties/name/type",
                            keyword: "type",
                            params: { type: "string" },
                            message: "must be string",
                        },
                    ];
                    return false;
                }
                var valid0 = _errs1 === errors;
            } else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.homepage !== undefined) {
                    let data1 = data.homepage;
                    const _errs3 = errors;
                    if (errors === _errs3) {
                        if (errors === _errs3) {
                            if (typeof data1 === "string") {
                                if (!formats0(data1)) {
                                    validate21.errors = [
                                        {
                                            instancePath:
                                                instancePath + "/homepage",
                                            schemaPath:
                                                "#/properties/homepage/format",
                                            keyword: "format",
                                            params: { format: "uri" },
                                            message:
                                                'must match format "' +
                                                "uri" +
                                                '"',
                                        },
                                    ];
                                    return false;
                                }
                            } else {
                                validate21.errors = [
                                    {
                                        instancePath:
                                            instancePath + "/homepage",
                                        schemaPath:
                                            "#/properties/homepage/type",
                                        keyword: "type",
                                        params: { type: "string" },
                                        message: "must be string",
                                    },
                                ];
                                return false;
                            }
                        }
                    }
                    var valid0 = _errs3 === errors;
                } else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.api !== undefined) {
                        let data2 = data.api;
                        const _errs5 = errors;
                        if (errors === _errs5) {
                            if (errors === _errs5) {
                                if (typeof data2 === "string") {
                                    if (!formats0(data2)) {
                                        validate21.errors = [
                                            {
                                                instancePath:
                                                    instancePath + "/api",
                                                schemaPath:
                                                    "#/properties/api/format",
                                                keyword: "format",
                                                params: { format: "uri" },
                                                message:
                                                    'must match format "' +
                                                    "uri" +
                                                    '"',
                                            },
                                        ];
                                        return false;
                                    }
                                } else {
                                    validate21.errors = [
                                        {
                                            instancePath: instancePath + "/api",
                                            schemaPath: "#/properties/api/type",
                                            keyword: "type",
                                            params: { type: "string" },
                                            message: "must be string",
                                        },
                                    ];
                                    return false;
                                }
                            }
                        }
                        var valid0 = _errs5 === errors;
                    } else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.federatedApi !== undefined) {
                            let data3 = data.federatedApi;
                            const _errs7 = errors;
                            if (errors === _errs7) {
                                if (errors === _errs7) {
                                    if (typeof data3 === "string") {
                                        if (!formats0(data3)) {
                                            validate21.errors = [
                                                {
                                                    instancePath:
                                                        instancePath +
                                                        "/federatedApi",
                                                    schemaPath:
                                                        "#/properties/federatedApi/format",
                                                    keyword: "format",
                                                    params: { format: "uri" },
                                                    message:
                                                        'must match format "' +
                                                        "uri" +
                                                        '"',
                                                },
                                            ];
                                            return false;
                                        }
                                    } else {
                                        validate21.errors = [
                                            {
                                                instancePath:
                                                    instancePath +
                                                    "/federatedApi",
                                                schemaPath:
                                                    "#/properties/federatedApi/type",
                                                keyword: "type",
                                                params: { type: "string" },
                                                message: "must be string",
                                            },
                                        ];
                                        return false;
                                    }
                                }
                            }
                            var valid0 = _errs7 === errors;
                        } else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.apiToken !== undefined) {
                                const _errs9 = errors;
                                if (typeof data.apiToken !== "string") {
                                    validate21.errors = [
                                        {
                                            instancePath:
                                                instancePath + "/apiToken",
                                            schemaPath:
                                                "#/properties/apiToken/type",
                                            keyword: "type",
                                            params: { type: "string" },
                                            message: "must be string",
                                        },
                                    ];
                                    return false;
                                }
                                var valid0 = _errs9 === errors;
                            } else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        } else {
            validate21.errors = [
                {
                    instancePath,
                    schemaPath: "#/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object",
                },
            ];
            return false;
        }
    }
    validate21.errors = vErrors;
    return errors === 0;
}
export const validateParameterSchemaInstitutionId = validate22;
const schema7 = { type: "string", format: "uuid" };
const formats6 = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
function validate22(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
        if (errors === 0) {
            if (typeof data === "string") {
                if (!formats6.test(data)) {
                    validate22.errors = [
                        {
                            instancePath,
                            schemaPath: "#/format",
                            keyword: "format",
                            params: { format: "uuid" },
                            message: 'must match format "' + "uuid" + '"',
                        },
                    ];
                    return false;
                }
            } else {
                validate22.errors = [
                    {
                        instancePath,
                        schemaPath: "#/type",
                        keyword: "type",
                        params: { type: "string" },
                        message: "must be string",
                    },
                ];
                return false;
            }
        }
    }
    validate22.errors = vErrors;
    return errors === 0;
}
export const validateParameterSchemaURL = validate23;
const schema8 = { type: "string", format: "uri" };
function validate23(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
        if (errors === 0) {
            if (typeof data === "string") {
                if (!formats0(data)) {
                    validate23.errors = [
                        {
                            instancePath,
                            schemaPath: "#/format",
                            keyword: "format",
                            params: { format: "uri" },
                            message: 'must match format "' + "uri" + '"',
                        },
                    ];
                    return false;
                }
            } else {
                validate23.errors = [
                    {
                        instancePath,
                        schemaPath: "#/type",
                        keyword: "type",
                        params: { type: "string" },
                        message: "must be string",
                    },
                ];
                return false;
            }
        }
    }
    validate23.errors = vErrors;
    return errors === 0;
}
export const validateResponseSchemaGetInstitutions = validate24;
const schema9 = {
    type: "array",
    items: { $ref: "#/components/schemas/institution" },
};
function validate24(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
        if (Array.isArray(data)) {
            var valid0 = true;
            const len0 = data.length;
            for (let i0 = 0; i0 < len0; i0++) {
                const _errs1 = errors;
                if (
                    !validate21(data[i0], {
                        instancePath: instancePath + "/" + i0,
                        parentData: data,
                        parentDataProperty: i0,
                        rootData,
                    })
                ) {
                    vErrors =
                        vErrors === null
                            ? validate21.errors
                            : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
                var valid0 = _errs1 === errors;
                if (!valid0) {
                    break;
                }
            }
        } else {
            validate24.errors = [
                {
                    instancePath,
                    schemaPath: "#/type",
                    keyword: "type",
                    params: { type: "array" },
                    message: "must be array",
                },
            ];
            return false;
        }
    }
    validate24.errors = vErrors;
    return errors === 0;
}
export const validateResponseSchemaPostInstitutions = validate26;
const schema10 = { $ref: "#/components/schemas/institution" };
function validate26(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (
        !validate21(data, {
            instancePath,
            parentData,
            parentDataProperty,
            rootData,
        })
    ) {
        vErrors =
            vErrors === null
                ? validate21.errors
                : vErrors.concat(validate21.errors);
        errors = vErrors.length;
    }
    validate26.errors = vErrors;
    return errors === 0;
}
export const validateBodySchemaPostInstitutions = validate28;
const schema11 = { $ref: "#/components/schemas/institution" };
function validate28(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (
        !validate21(data, {
            instancePath,
            parentData,
            parentDataProperty,
            rootData,
        })
    ) {
        vErrors =
            vErrors === null
                ? validate21.errors
                : vErrors.concat(validate21.errors);
        errors = vErrors.length;
    }
    validate28.errors = vErrors;
    return errors === 0;
}
export const validateResponseSchemaGetInstitutionsByInstitutionId = validate30;
const schema12 = { $ref: "#/components/schemas/institution" };
function validate30(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (
        !validate21(data, {
            instancePath,
            parentData,
            parentDataProperty,
            rootData,
        })
    ) {
        vErrors =
            vErrors === null
                ? validate21.errors
                : vErrors.concat(validate21.errors);
        errors = vErrors.length;
    }
    validate30.errors = vErrors;
    return errors === 0;
}
export const validateResponseSchemaPatchInstitutionsByInstitutionId =
    validate32;
const schema13 = { $ref: "#/components/schemas/institution" };
function validate32(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (
        !validate21(data, {
            instancePath,
            parentData,
            parentDataProperty,
            rootData,
        })
    ) {
        vErrors =
            vErrors === null
                ? validate21.errors
                : vErrors.concat(validate21.errors);
        errors = vErrors.length;
    }
    validate32.errors = vErrors;
    return errors === 0;
}
export const validateBodySchemaPatchInstitutionsByInstitutionId = validate34;
const schema14 = { $ref: "#/components/schemas/institution" };
function validate34(
    data,
    { instancePath = "", parentData, parentDataProperty, rootData = data } = {}
) {
    let vErrors = null;
    let errors = 0;
    if (
        !validate21(data, {
            instancePath,
            parentData,
            parentDataProperty,
            rootData,
        })
    ) {
        vErrors =
            vErrors === null
                ? validate21.errors
                : vErrors.concat(validate21.errors);
        errors = vErrors.length;
    }
    validate34.errors = vErrors;
    return errors === 0;
}
