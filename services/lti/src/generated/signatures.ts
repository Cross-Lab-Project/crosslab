/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import {
    SuccessResponse,
	ErrorResponse,
	Platform,
	Session,
	Resource,
	Student
} from "./types.js"
import express from "express"



/**
 * Function signature for handling a GET request on /lti/platform
 */
export type getLtiPlatformSignature = (
        req: express.Request,) => Promise<getLtiPlatformResponseType> | getLtiPlatformResponseType

/**
 * Typing for all possible responses to a GET request on /lti/platform
 */
export type getLtiPlatformResponseType = getLtiPlatformSuccessResponseType | getLtiPlatformErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/platform
 */
export type getLtiPlatformSuccessResponseType = getLtiPlatform200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/platform
 */
export type getLtiPlatformErrorResponseType = getLtiPlatform401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/platform
 */
export interface getLtiPlatform200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: (Platform<"response">)[]
}

/**
 * Typing for a response with status 401 to a GET request on /lti/platform
 */
export interface getLtiPlatform401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a POST request on /lti/platform
 */
export type postLtiPlatformSignature = (
        req: express.Request,) => Promise<postLtiPlatformResponseType> | postLtiPlatformResponseType

/**
 * Typing for all possible responses to a POST request on /lti/platform
 */
export type postLtiPlatformResponseType = postLtiPlatformSuccessResponseType | postLtiPlatformErrorResponseType

/**
 * Typing for all successful responses to a POST request on /lti/platform
 */
export type postLtiPlatformSuccessResponseType = postLtiPlatform201ResponseType

/**
 * Typing for all error responses to a POST request on /lti/platform
 */
export type postLtiPlatformErrorResponseType = postLtiPlatform401ResponseType

/**
 * Typing for a response with status 201 to a POST request on /lti/platform
 */
export interface postLtiPlatform201ResponseType extends SuccessResponse {
    status: 201
    headers: {
        "Location"?: string,
        [k: string]: string | undefined
    }
    body: Platform<"response">
}

/**
 * Typing for a response with status 401 to a POST request on /lti/platform
 */
export interface postLtiPlatform401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a GET request on /lti/platform/{platform_id}
 */
export type getLtiPlatformByPlatformIdSignature = (
        req: express.Request,parameters: getLtiPlatformByPlatformIdParametersType) => Promise<getLtiPlatformByPlatformIdResponseType> | getLtiPlatformByPlatformIdResponseType

/**
 * Typing for the parameters of a GET request on /lti/platform/{platform_id}
 */
export type getLtiPlatformByPlatformIdParametersType = {
    "platform_id": string,
}

/**
 * Typing for all possible responses to a GET request on /lti/platform/{platform_id}
 */
export type getLtiPlatformByPlatformIdResponseType = getLtiPlatformByPlatformIdSuccessResponseType | getLtiPlatformByPlatformIdErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/platform/{platform_id}
 */
export type getLtiPlatformByPlatformIdSuccessResponseType = getLtiPlatformByPlatformId200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/platform/{platform_id}
 */
export type getLtiPlatformByPlatformIdErrorResponseType = getLtiPlatformByPlatformId401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/platform/{platform_id}
 */
export interface getLtiPlatformByPlatformId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Platform<"response">
}

/**
 * Typing for a response with status 401 to a GET request on /lti/platform/{platform_id}
 */
export interface getLtiPlatformByPlatformId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a PATCH request on /lti/platform/{platform_id}
 */
export type patchLtiPlatformByPlatformIdSignature = (
        req: express.Request,parameters: patchLtiPlatformByPlatformIdParametersType) => Promise<patchLtiPlatformByPlatformIdResponseType> | patchLtiPlatformByPlatformIdResponseType

/**
 * Typing for the parameters of a PATCH request on /lti/platform/{platform_id}
 */
export type patchLtiPlatformByPlatformIdParametersType = {
    "platform_id": string,
}

/**
 * Typing for all possible responses to a PATCH request on /lti/platform/{platform_id}
 */
export type patchLtiPlatformByPlatformIdResponseType = patchLtiPlatformByPlatformIdSuccessResponseType | patchLtiPlatformByPlatformIdErrorResponseType

/**
 * Typing for all successful responses to a PATCH request on /lti/platform/{platform_id}
 */
export type patchLtiPlatformByPlatformIdSuccessResponseType = patchLtiPlatformByPlatformId200ResponseType

/**
 * Typing for all error responses to a PATCH request on /lti/platform/{platform_id}
 */
export type patchLtiPlatformByPlatformIdErrorResponseType = patchLtiPlatformByPlatformId400ResponseType | patchLtiPlatformByPlatformId401ResponseType

/**
 * Typing for a response with status 200 to a PATCH request on /lti/platform/{platform_id}
 */
export interface patchLtiPlatformByPlatformId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Platform<"response">
}

/**
 * Typing for a response with status 400 to a PATCH request on /lti/platform/{platform_id}
 */
export interface patchLtiPlatformByPlatformId400ResponseType extends ErrorResponse {
    status: 400
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Typing for a response with status 401 to a PATCH request on /lti/platform/{platform_id}
 */
export interface patchLtiPlatformByPlatformId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a DELETE request on /lti/platform/{platform_id}
 */
export type deleteLtiPlatformByPlatformIdSignature = (
        req: express.Request,parameters: deleteLtiPlatformByPlatformIdParametersType) => Promise<deleteLtiPlatformByPlatformIdResponseType> | deleteLtiPlatformByPlatformIdResponseType

/**
 * Typing for the parameters of a DELETE request on /lti/platform/{platform_id}
 */
export type deleteLtiPlatformByPlatformIdParametersType = {
    "platform_id": string,
}

/**
 * Typing for all possible responses to a DELETE request on /lti/platform/{platform_id}
 */
export type deleteLtiPlatformByPlatformIdResponseType = deleteLtiPlatformByPlatformIdSuccessResponseType | deleteLtiPlatformByPlatformIdErrorResponseType

/**
 * Typing for all successful responses to a DELETE request on /lti/platform/{platform_id}
 */
export type deleteLtiPlatformByPlatformIdSuccessResponseType = deleteLtiPlatformByPlatformId204ResponseType

/**
 * Typing for all error responses to a DELETE request on /lti/platform/{platform_id}
 */
export type deleteLtiPlatformByPlatformIdErrorResponseType = deleteLtiPlatformByPlatformId401ResponseType

/**
 * Typing for a response with status 204 to a DELETE request on /lti/platform/{platform_id}
 */
export interface deleteLtiPlatformByPlatformId204ResponseType extends SuccessResponse {
    status: 204
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Typing for a response with status 401 to a DELETE request on /lti/platform/{platform_id}
 */
export interface deleteLtiPlatformByPlatformId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a POST request on /lti/platform/{platform_id}/login
 */
export type postLtiPlatformByPlatformIdLoginSignature = (
        req: express.Request,parameters: postLtiPlatformByPlatformIdLoginParametersType, body: postLtiPlatformByPlatformIdLoginRequestBodyType) => Promise<postLtiPlatformByPlatformIdLoginResponseType> | postLtiPlatformByPlatformIdLoginResponseType

/**
 * Typing for the parameters of a POST request on /lti/platform/{platform_id}/login
 */
export type postLtiPlatformByPlatformIdLoginParametersType = {
    "platform_id": string,
}

/**
 * Typing for the request body of a POST request on /lti/platform/{platform_id}/login
 */
export type postLtiPlatformByPlatformIdLoginRequestBodyType = {
	/**
	 * The issuer of the LTI message.
	 */
	iss: string
	/**
	 * The client ID of the LTI message.
	 */
	client_id: string
	/**
	 * The deployment ID of the LTI message.
	 */
	lti_deployment_id?: string
	/**
	 * The target link URI of the LTI message.
	 */
	target_link_uri: string
	/**
	 * The login hint of the LTI message.
	 */
	login_hint: string
	/**
	 * The LTI message hint of the LTI message.
	 */
	lti_message_hint: string
}

/**
 * Typing for all possible responses to a POST request on /lti/platform/{platform_id}/login
 */
export type postLtiPlatformByPlatformIdLoginResponseType = postLtiPlatformByPlatformIdLoginSuccessResponseType

/**
 * Typing for all successful responses to a POST request on /lti/platform/{platform_id}/login
 */
export type postLtiPlatformByPlatformIdLoginSuccessResponseType = postLtiPlatformByPlatformIdLogin200ResponseType

/**
 * Typing for a response with status 200 to a POST request on /lti/platform/{platform_id}/login
 */
export interface postLtiPlatformByPlatformIdLogin200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: {
    	/**
    	 * The authentication request URL. The Frontend should send a 302 redirect of this URL to the user agent.
    	 */
    	authentication_request_url: string
    }
}

/**
 * Function signature for handling a POST request on /lti/platform/{platform_id}/launch
 */
export type postLtiPlatformByPlatformIdLaunchSignature = (
        req: express.Request,parameters: postLtiPlatformByPlatformIdLaunchParametersType, body: postLtiPlatformByPlatformIdLaunchRequestBodyType) => Promise<postLtiPlatformByPlatformIdLaunchResponseType> | postLtiPlatformByPlatformIdLaunchResponseType

/**
 * Typing for the parameters of a POST request on /lti/platform/{platform_id}/launch
 */
export type postLtiPlatformByPlatformIdLaunchParametersType = {
    "platform_id": string,
}

/**
 * Typing for the request body of a POST request on /lti/platform/{platform_id}/launch
 */
export type postLtiPlatformByPlatformIdLaunchRequestBodyType = {
	/**
	 * The state of the LTI message.
	 */
	state: string
	/**
	 * The ID token of the LTI message.
	 */
	id_token: string
}

/**
 * Typing for all possible responses to a POST request on /lti/platform/{platform_id}/launch
 */
export type postLtiPlatformByPlatformIdLaunchResponseType = postLtiPlatformByPlatformIdLaunchSuccessResponseType

/**
 * Typing for all successful responses to a POST request on /lti/platform/{platform_id}/launch
 */
export type postLtiPlatformByPlatformIdLaunchSuccessResponseType = postLtiPlatformByPlatformIdLaunch200ResponseType

/**
 * Typing for a response with status 200 to a POST request on /lti/platform/{platform_id}/launch
 */
export interface postLtiPlatformByPlatformIdLaunch200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: {
    	/**
    	 * The access token to authenticate subsequent requests.
    	 */
    	access_token: string
    	session: Session<"response">
    	[k: string]: unknown
    }
}

/**
 * Function signature for handling a GET request on /lti/platform/{platform_id}/jwks
 */
export type getLtiPlatformByPlatformIdJwksSignature = (
        req: express.Request,parameters: getLtiPlatformByPlatformIdJwksParametersType) => Promise<getLtiPlatformByPlatformIdJwksResponseType> | getLtiPlatformByPlatformIdJwksResponseType

/**
 * Typing for the parameters of a GET request on /lti/platform/{platform_id}/jwks
 */
export type getLtiPlatformByPlatformIdJwksParametersType = {
    "platform_id": string,
}

/**
 * Typing for all possible responses to a GET request on /lti/platform/{platform_id}/jwks
 */
export type getLtiPlatformByPlatformIdJwksResponseType = getLtiPlatformByPlatformIdJwksSuccessResponseType

/**
 * Typing for all successful responses to a GET request on /lti/platform/{platform_id}/jwks
 */
export type getLtiPlatformByPlatformIdJwksSuccessResponseType = getLtiPlatformByPlatformIdJwks200ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/platform/{platform_id}/jwks
 */
export interface getLtiPlatformByPlatformIdJwks200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: {
    	[k: string]: unknown
    }
}

/**
 * Function signature for handling a GET request on /lti/resource
 */
export type getLtiResourceSignature = (
        req: express.Request,) => Promise<getLtiResourceResponseType> | getLtiResourceResponseType

/**
 * Typing for all possible responses to a GET request on /lti/resource
 */
export type getLtiResourceResponseType = getLtiResourceSuccessResponseType | getLtiResourceErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/resource
 */
export type getLtiResourceSuccessResponseType = getLtiResource200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/resource
 */
export type getLtiResourceErrorResponseType = getLtiResource401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/resource
 */
export interface getLtiResource200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: (Resource<"response">)[]
}

/**
 * Typing for a response with status 401 to a GET request on /lti/resource
 */
export interface getLtiResource401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a GET request on /lti/resource/{resource_id}
 */
export type getLtiResourceByResourceIdSignature = (
        req: express.Request,parameters: getLtiResourceByResourceIdParametersType) => Promise<getLtiResourceByResourceIdResponseType> | getLtiResourceByResourceIdResponseType

/**
 * Typing for the parameters of a GET request on /lti/resource/{resource_id}
 */
export type getLtiResourceByResourceIdParametersType = {
    "resource_id": string,
}

/**
 * Typing for all possible responses to a GET request on /lti/resource/{resource_id}
 */
export type getLtiResourceByResourceIdResponseType = getLtiResourceByResourceIdSuccessResponseType | getLtiResourceByResourceIdErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/resource/{resource_id}
 */
export type getLtiResourceByResourceIdSuccessResponseType = getLtiResourceByResourceId200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/resource/{resource_id}
 */
export type getLtiResourceByResourceIdErrorResponseType = getLtiResourceByResourceId401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/resource/{resource_id}
 */
export interface getLtiResourceByResourceId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Resource<"response">
}

/**
 * Typing for a response with status 401 to a GET request on /lti/resource/{resource_id}
 */
export interface getLtiResourceByResourceId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdSignature = (
        req: express.Request,parameters: patchLtiResourceByResourceIdParametersType, body: patchLtiResourceByResourceIdRequestBodyType) => Promise<patchLtiResourceByResourceIdResponseType> | patchLtiResourceByResourceIdResponseType

/**
 * Typing for the parameters of a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdParametersType = {
    "resource_id": string,
}

/**
 * Typing for the request body of a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdRequestBodyType = {
	uri?: string
	/**
	 * The URI of the experiment template.
	 */
	experiment_template_uri?: string
	/**
	 * The URI of the students.
	 */
	students_uri?: string
}

/**
 * Typing for all possible responses to a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdResponseType = patchLtiResourceByResourceIdSuccessResponseType | patchLtiResourceByResourceIdErrorResponseType

/**
 * Typing for all successful responses to a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdSuccessResponseType = patchLtiResourceByResourceId200ResponseType

/**
 * Typing for all error responses to a PATCH request on /lti/resource/{resource_id}
 */
export type patchLtiResourceByResourceIdErrorResponseType = patchLtiResourceByResourceId400ResponseType | patchLtiResourceByResourceId401ResponseType

/**
 * Typing for a response with status 200 to a PATCH request on /lti/resource/{resource_id}
 */
export interface patchLtiResourceByResourceId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Resource<"response">
}

/**
 * Typing for a response with status 400 to a PATCH request on /lti/resource/{resource_id}
 */
export interface patchLtiResourceByResourceId400ResponseType extends ErrorResponse {
    status: 400
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Typing for a response with status 401 to a PATCH request on /lti/resource/{resource_id}
 */
export interface patchLtiResourceByResourceId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a DELETE request on /lti/resource/{resource_id}
 */
export type deleteLtiResourceByResourceIdSignature = (
        req: express.Request,parameters: deleteLtiResourceByResourceIdParametersType) => Promise<deleteLtiResourceByResourceIdResponseType> | deleteLtiResourceByResourceIdResponseType

/**
 * Typing for the parameters of a DELETE request on /lti/resource/{resource_id}
 */
export type deleteLtiResourceByResourceIdParametersType = {
    "resource_id": string,
}

/**
 * Typing for all possible responses to a DELETE request on /lti/resource/{resource_id}
 */
export type deleteLtiResourceByResourceIdResponseType = deleteLtiResourceByResourceIdSuccessResponseType | deleteLtiResourceByResourceIdErrorResponseType

/**
 * Typing for all successful responses to a DELETE request on /lti/resource/{resource_id}
 */
export type deleteLtiResourceByResourceIdSuccessResponseType = deleteLtiResourceByResourceId204ResponseType

/**
 * Typing for all error responses to a DELETE request on /lti/resource/{resource_id}
 */
export type deleteLtiResourceByResourceIdErrorResponseType = deleteLtiResourceByResourceId401ResponseType

/**
 * Typing for a response with status 204 to a DELETE request on /lti/resource/{resource_id}
 */
export interface deleteLtiResourceByResourceId204ResponseType extends SuccessResponse {
    status: 204
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Typing for a response with status 401 to a DELETE request on /lti/resource/{resource_id}
 */
export interface deleteLtiResourceByResourceId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a GET request on /lti/resource/{resource_id}/students
 */
export type getLtiResourceByResourceIdStudentsSignature = (
        req: express.Request,parameters: getLtiResourceByResourceIdStudentsParametersType) => Promise<getLtiResourceByResourceIdStudentsResponseType> | getLtiResourceByResourceIdStudentsResponseType

/**
 * Typing for the parameters of a GET request on /lti/resource/{resource_id}/students
 */
export type getLtiResourceByResourceIdStudentsParametersType = {
    "resource_id": string,
}

/**
 * Typing for all possible responses to a GET request on /lti/resource/{resource_id}/students
 */
export type getLtiResourceByResourceIdStudentsResponseType = getLtiResourceByResourceIdStudentsSuccessResponseType | getLtiResourceByResourceIdStudentsErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/resource/{resource_id}/students
 */
export type getLtiResourceByResourceIdStudentsSuccessResponseType = getLtiResourceByResourceIdStudents200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/resource/{resource_id}/students
 */
export type getLtiResourceByResourceIdStudentsErrorResponseType = getLtiResourceByResourceIdStudents401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/resource/{resource_id}/students
 */
export interface getLtiResourceByResourceIdStudents200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: (Student<"response">)[]
}

/**
 * Typing for a response with status 401 to a GET request on /lti/resource/{resource_id}/students
 */
export interface getLtiResourceByResourceIdStudents401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsSignature = (
        req: express.Request,parameters: patchLtiResourceByResourceIdStudentsParametersType, body: patchLtiResourceByResourceIdStudentsRequestBodyType) => Promise<patchLtiResourceByResourceIdStudentsResponseType> | patchLtiResourceByResourceIdStudentsResponseType

/**
 * Typing for the parameters of a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsParametersType = {
    "resource_id": string,
}

/**
 * Typing for the request body of a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsRequestBodyType = ({
	uri: string
	data: Student<"request">
	[k: string]: unknown
})[]

/**
 * Typing for all possible responses to a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsResponseType = patchLtiResourceByResourceIdStudentsSuccessResponseType | patchLtiResourceByResourceIdStudentsErrorResponseType

/**
 * Typing for all successful responses to a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsSuccessResponseType = patchLtiResourceByResourceIdStudents200ResponseType

/**
 * Typing for all error responses to a PATCH request on /lti/resource/{resource_id}/students
 */
export type patchLtiResourceByResourceIdStudentsErrorResponseType = patchLtiResourceByResourceIdStudents401ResponseType

/**
 * Typing for a response with status 200 to a PATCH request on /lti/resource/{resource_id}/students
 */
export interface patchLtiResourceByResourceIdStudents200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: (Student<"response">)[]
}

/**
 * Typing for a response with status 401 to a PATCH request on /lti/resource/{resource_id}/students
 */
export interface patchLtiResourceByResourceIdStudents401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export type getLtiResourceByResourceIdStudentsByStudentIdSignature = (
        req: express.Request,parameters: getLtiResourceByResourceIdStudentsByStudentIdParametersType) => Promise<getLtiResourceByResourceIdStudentsByStudentIdResponseType> | getLtiResourceByResourceIdStudentsByStudentIdResponseType

/**
 * Typing for the parameters of a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export type getLtiResourceByResourceIdStudentsByStudentIdParametersType = {
    "resource_id": string,
	"student_id": string,
}

/**
 * Typing for all possible responses to a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export type getLtiResourceByResourceIdStudentsByStudentIdResponseType = getLtiResourceByResourceIdStudentsByStudentIdSuccessResponseType | getLtiResourceByResourceIdStudentsByStudentIdErrorResponseType

/**
 * Typing for all successful responses to a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export type getLtiResourceByResourceIdStudentsByStudentIdSuccessResponseType = getLtiResourceByResourceIdStudentsByStudentId200ResponseType

/**
 * Typing for all error responses to a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export type getLtiResourceByResourceIdStudentsByStudentIdErrorResponseType = getLtiResourceByResourceIdStudentsByStudentId401ResponseType

/**
 * Typing for a response with status 200 to a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export interface getLtiResourceByResourceIdStudentsByStudentId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Student<"response">
}

/**
 * Typing for a response with status 401 to a GET request on /lti/resource/{resource_id}/students/{student_id}
 */
export interface getLtiResourceByResourceIdStudentsByStudentId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}

/**
 * Function signature for handling a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdSignature = (
        req: express.Request,parameters: patchLtiResourceByResourceIdStudentsByStudentIdParametersType, body: patchLtiResourceByResourceIdStudentsByStudentIdRequestBodyType) => Promise<patchLtiResourceByResourceIdStudentsByStudentIdResponseType> | patchLtiResourceByResourceIdStudentsByStudentIdResponseType

/**
 * Typing for the parameters of a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdParametersType = {
    "resource_id": string,
	"student_id": string,
}

/**
 * Typing for the request body of a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdRequestBodyType = Student<"request">

/**
 * Typing for all possible responses to a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdResponseType = patchLtiResourceByResourceIdStudentsByStudentIdSuccessResponseType | patchLtiResourceByResourceIdStudentsByStudentIdErrorResponseType

/**
 * Typing for all successful responses to a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdSuccessResponseType = patchLtiResourceByResourceIdStudentsByStudentId200ResponseType

/**
 * Typing for all error responses to a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export type patchLtiResourceByResourceIdStudentsByStudentIdErrorResponseType = patchLtiResourceByResourceIdStudentsByStudentId401ResponseType

/**
 * Typing for a response with status 200 to a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export interface patchLtiResourceByResourceIdStudentsByStudentId200ResponseType extends SuccessResponse {
    status: 200
    headers?: {
        [k: string]: string | undefined
    }
    body: Student<"response">
}

/**
 * Typing for a response with status 401 to a PATCH request on /lti/resource/{resource_id}/students/{student_id}
 */
export interface patchLtiResourceByResourceIdStudentsByStudentId401ResponseType extends ErrorResponse {
    status: 401
    headers?: {
        [k: string]: string | undefined
    }
    body?: undefined
}