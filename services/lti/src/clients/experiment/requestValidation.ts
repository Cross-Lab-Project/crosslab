/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import { FunctionWithErrors, ResponseData } from "./types.js"

import * as Signatures from "./signatures.js"

import * as BasicValidation from "./basicValidation.cjs"
/**
 * This function validates the inputs to listExperiments()
 */
export function validateListExperimentsInput() {
    return true
}

/**
 * This function validates the outputs of listExperiments()
 */
export function validateListExperimentsOutput(response: ResponseData): response is Signatures.ListExperimentsResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateListExperimentsResponse200Response(response.body)) {
            (validateListExperimentsOutput as FunctionWithErrors).errors = (BasicValidation.validateListExperimentsResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateListExperimentsOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to createExperiment()
 */
export function validateCreateExperimentInput(parameters: Signatures.CreateExperimentParameters, body: Signatures.CreateExperimentBody) {
    if (parameters) {
        if (
            !BasicValidation.validateChangedURLRequest(parameters["changedURL"])
			&& parameters['changedURL'] !== undefined
        ) {
            (validateCreateExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateChangedURLRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        if (parameters !== undefined) {
            return false
        }
    }

    if (!BasicValidation.validateCreateExperimentBodyRequest(body)) {
        (validateCreateExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateCreateExperimentBodyRequest as FunctionWithErrors).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs of createExperiment()
 */
export function validateCreateExperimentOutput(response: ResponseData): response is Signatures.CreateExperimentResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 201) {
        if (!BasicValidation.validateCreateExperimentResponse201Response(response.body)) {
            (validateCreateExperimentOutput as FunctionWithErrors).errors = (BasicValidation.validateCreateExperimentResponse201Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 202) {
        if (!BasicValidation.validateCreateExperimentResponse202Response(response.body)) {
            (validateCreateExperimentOutput as FunctionWithErrors).errors = (BasicValidation.validateCreateExperimentResponse202Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateCreateExperimentOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to getExperiment()
 */
export function validateGetExperimentInput(parameters: Signatures.GetExperimentParameters) {
    if (parameters) {
        if (
            !BasicValidation.validateExperimentIdRequest(parameters["experiment_id"])
        ) {
            (validateGetExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateExperimentIdRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs of getExperiment()
 */
export function validateGetExperimentOutput(response: ResponseData): response is Signatures.GetExperimentResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateGetExperimentResponse200Response(response.body)) {
            (validateGetExperimentOutput as FunctionWithErrors).errors = (BasicValidation.validateGetExperimentResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetExperimentOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to updateExperiment()
 */
export function validateUpdateExperimentInput(parameters: Signatures.UpdateExperimentParameters, body: Signatures.UpdateExperimentBody) {
    if (parameters) {
        if (
            !BasicValidation.validateExperimentIdRequest(parameters["experiment_id"])
        ) {
            (validateUpdateExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateExperimentIdRequest as FunctionWithErrors).errors
            return false
        }
        if (
            !BasicValidation.validateChangedURLRequest(parameters["changedURL"])
			&& parameters['changedURL'] !== undefined
        ) {
            (validateUpdateExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateChangedURLRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    if (body === undefined) {
        return true
    }

    if (!BasicValidation.validateUpdateExperimentBodyRequest(body)) {
        (validateUpdateExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateUpdateExperimentBodyRequest as FunctionWithErrors).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs of updateExperiment()
 */
export function validateUpdateExperimentOutput(response: ResponseData): response is Signatures.UpdateExperimentResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateUpdateExperimentResponse200Response(response.body)) {
            (validateUpdateExperimentOutput as FunctionWithErrors).errors = (BasicValidation.validateUpdateExperimentResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 202) {
        if (!BasicValidation.validateUpdateExperimentResponse202Response(response.body)) {
            (validateUpdateExperimentOutput as FunctionWithErrors).errors = (BasicValidation.validateUpdateExperimentResponse202Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateUpdateExperimentOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to deleteExperiment()
 */
export function validateDeleteExperimentInput(parameters: Signatures.DeleteExperimentParameters) {
    if (parameters) {
        if (
            !BasicValidation.validateExperimentIdRequest(parameters["experiment_id"])
        ) {
            (validateDeleteExperimentInput as FunctionWithErrors).errors = (BasicValidation.validateExperimentIdRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs of deleteExperiment()
 */
export function validateDeleteExperimentOutput(response: ResponseData): response is Signatures.DeleteExperimentResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 204) {
        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateDeleteExperimentOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to listTemplate()
 */
export function validateListTemplateInput() {
    return true
}

/**
 * This function validates the outputs of listTemplate()
 */
export function validateListTemplateOutput(response: ResponseData): response is Signatures.ListTemplateResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateListTemplateResponse200Response(response.body)) {
            (validateListTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateListTemplateResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateListTemplateOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to createTemplate()
 */
export function validateCreateTemplateInput(body: Signatures.CreateTemplateBody) {
    if (!BasicValidation.validateCreateTemplateBodyRequest(body)) {
        (validateCreateTemplateInput as FunctionWithErrors).errors = (BasicValidation.validateCreateTemplateBodyRequest as FunctionWithErrors).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs of createTemplate()
 */
export function validateCreateTemplateOutput(response: ResponseData): response is Signatures.CreateTemplateResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 201) {
        if (!BasicValidation.validateCreateTemplateResponse201Response(response.body)) {
            (validateCreateTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateCreateTemplateResponse201Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 202) {
        if (!BasicValidation.validateCreateTemplateResponse202Response(response.body)) {
            (validateCreateTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateCreateTemplateResponse202Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateCreateTemplateOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to getTemplate()
 */
export function validateGetTemplateInput(parameters: Signatures.GetTemplateParameters) {
    if (parameters) {
        if (
            !BasicValidation.validateTemplateIdRequest(parameters["template_id"])
        ) {
            (validateGetTemplateInput as FunctionWithErrors).errors = (BasicValidation.validateTemplateIdRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs of getTemplate()
 */
export function validateGetTemplateOutput(response: ResponseData): response is Signatures.GetTemplateResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateGetTemplateResponse200Response(response.body)) {
            (validateGetTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateGetTemplateResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateGetTemplateOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to updateTemplate()
 */
export function validateUpdateTemplateInput(parameters: Signatures.UpdateTemplateParameters, body: Signatures.UpdateTemplateBody) {
    if (parameters) {
        if (
            !BasicValidation.validateTemplateIdRequest(parameters["template_id"])
        ) {
            (validateUpdateTemplateInput as FunctionWithErrors).errors = (BasicValidation.validateTemplateIdRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    if (!BasicValidation.validateUpdateTemplateBodyRequest(body)) {
        (validateUpdateTemplateInput as FunctionWithErrors).errors = (BasicValidation.validateUpdateTemplateBodyRequest as FunctionWithErrors).errors
        return false
    }

    return true
}

/**
 * This function validates the outputs of updateTemplate()
 */
export function validateUpdateTemplateOutput(response: ResponseData): response is Signatures.UpdateTemplateResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 200) {
        if (!BasicValidation.validateUpdateTemplateResponse200Response(response.body)) {
            (validateUpdateTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateUpdateTemplateResponse200Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 202) {
        if (!BasicValidation.validateUpdateTemplateResponse202Response(response.body)) {
            (validateUpdateTemplateOutput as FunctionWithErrors).errors = (BasicValidation.validateUpdateTemplateResponse202Response as FunctionWithErrors).errors
            return false
        }

        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateUpdateTemplateOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}

/**
 * This function validates the inputs to deleteTemplate()
 */
export function validateDeleteTemplateInput(parameters: Signatures.DeleteTemplateParameters) {
    if (parameters) {
        if (
            !BasicValidation.validateTemplateIdRequest(parameters["template_id"])
        ) {
            (validateDeleteTemplateInput as FunctionWithErrors).errors = (BasicValidation.validateTemplateIdRequest as FunctionWithErrors).errors
            return false
        }
    } else {
        return false
    }

    return true
}

/**
 * This function validates the outputs of deleteTemplate()
 */
export function validateDeleteTemplateOutput(response: ResponseData): response is Signatures.DeleteTemplateResponse {
    if (response.status < 100 || response.status >= 600) return false

    
    if (response.status === 204) {
        return true
    }

    
    if (response.status === 400) {
        return true
    }

    
    if (response.status === 401) {
        return true
    }

    
    if (response.status === 403) {
        return true
    }

    
    if (response.status === 404) {
        return true
    }

    
    if (response.status === 500) {
        return true
    }

    (validateDeleteTemplateOutput as FunctionWithErrors).errors = `Response status ${response.status} is unexpected`

    return false
}
