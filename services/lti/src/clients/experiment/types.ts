/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';

/**
 * @internal
 */
export interface FunctionWithErrors {
  (...args: unknown[]): unknown;
  errors?: unknown;
}

/**
 * @internal
 */
export interface RequestInfo {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'OPTIONS' | 'PATCH' | 'HEAD';
  body?: string;
  headers?: [string, string][];
}

/**
 * @internal
 */
export type FetchFunction = (
  url: string,
  info?: RequestInfo,
) => Promise<ResponseData> | ResponseData;

export interface ResponseData {
  status: number;
  headers?: {
    [key: string]: string | undefined;
  };
  body?: unknown;
}

export interface SuccessResponse extends ResponseData {
  success?: true;
}

export interface ErrorResponse extends ResponseData {
  success?: false;
}

/**
 * @internal
 */
export function isSuccessResponse(response: ResponseData): response is SuccessResponse {
  return response.status < 400;
}

/**
 * @internal
 */
export function isErrorResponse(response: ResponseData): response is ErrorResponse {
  return response.status >= 400;
}

/**
 * This type allows to pick the required properties of another type.
 */
export type Require<Type, Key extends keyof Type> = Partial<Type> & {
  [Property in Key]-?: Type[Property];
};

export type SizedTuple<
  T,
  MIN extends number | undefined = undefined,
  MAX extends number | undefined = undefined,
> = MIN extends number
  ? MAX extends number
    ? _SizedTuple<T, NumericRangeTuple<MIN, MAX>>
    : TupleObject<T, NumericRangeTuple<0, MIN>> & T[]
  : MAX extends number
  ? _SizedTuple<T, NumericRangeTuple<0, MAX>, true>
  : T[];

type _SizedTuple<T, ARR extends number[], Z extends boolean = false> = ARR extends [
  infer HEAD extends number,
  ...infer TAIL extends number[],
]
  ? Tuple<T, HEAD, Z> | _SizedTuple<T, TAIL, Z>
  : never;

type Tuple<T, N extends number, Z extends boolean = false> = _Tuple<
  T,
  NumericRangeTuple<Z extends true ? 0 : 1, N>
>;

type _Tuple<T, N extends number[]> = N extends [
  infer HEAD,
  ...infer TAIL extends number[],
]
  ? HEAD extends 0
    ? [] | _Tuple<T, TAIL>
    : [T, ..._Tuple<T, TAIL>]
  : [];

type TupleObject<T, N extends number[]> = N extends [
  infer HEAD extends number,
  ...infer TAIL extends number[],
]
  ? TAIL extends []
    ? Record<string, never>
    : { [P in HEAD]: T } & TupleObject<T, TAIL>
  : Record<string, never>;

export type NumericRange<
  START extends number,
  END extends number,
  ARR extends unknown[] = [],
  ACC extends number = never,
> = ARR['length'] extends END
  ? ACC | START | END
  : NumericRange<
      START,
      END,
      [...ARR, 1],
      ARR[START] extends undefined ? ACC : ACC | ARR['length']
    >;

type NumericRangeTuple<
  START extends number,
  END extends number,
  ARR extends unknown[] = [],
  ACC extends number[] = [],
> = ARR['length'] extends END
  ? [START, ...ACC, END]
  : NumericRangeTuple<
      START,
      END,
      [...ARR, 1],
      ARR[START] extends undefined ? ACC : [...ACC, ARR['length']]
    >;

export type ExperimentOverview<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        /**
         * URL of the experiment
         */
        url: string;
        status:
          | 'created'
          | 'booked'
          | 'setup'
          | 'running'
          | 'finished'
          | 'created'
          | 'booked'
          | 'running'
          | 'finished';
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        status: 'created' | 'booked' | 'running' | 'finished';
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        /**
         * URL of the experiment
         */
        url: string;
        status: 'created' | 'booked' | 'setup' | 'running' | 'finished';
        [k: string]: unknown;
      }
    : never;

export type Device<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * URL to the [device](https://cross-lab-project.github.io/crosslab/api/device.html#get-/devices/-device_id-).
       */
      device: string;
      /**
       * The name of the device's role.
       */
      role: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * URL to the [device](https://cross-lab-project.github.io/crosslab/api/device.html#get-/devices/-device_id-).
       */
      device: string;
      /**
       * The name of the device's role.
       */
      role: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * URL to the [device](https://cross-lab-project.github.io/crosslab/api/device.html#get-/devices/-device_id-).
       */
      device: string;
      /**
       * The name of the device's role.
       */
      role: string;
      [k: string]: unknown;
    }
  : never;

export type Role<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * Name for an experiment role.
       */
      name: string;
      description?: string;
      /**
       * Configuration for all devices with this role.
       */
      configuration?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * Name for an experiment role.
       */
      name: string;
      description?: string;
      /**
       * Configuration for all devices with this role.
       */
      configuration?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * Name for an experiment role.
       */
      name: string;
      description?: string;
      /**
       * Configuration for all devices with this role.
       */
      configuration?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : never;

export type Participant<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        /**
         * The name of the participant's role.
         */
        role?: string;
        serviceId?: string;
        /**
         * Service configuration of the participant.
         *
         * This configuration object will be merged with the service configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        config?: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        /**
         * The name of the participant's role.
         */
        role?: string;
        serviceId?: string;
        /**
         * Service configuration of the participant.
         *
         * This configuration object will be merged with the service configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        config?: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        /**
         * The name of the participant's role.
         */
        role?: string;
        serviceId?: string;
        /**
         * Service configuration of the participant.
         *
         * This configuration object will be merged with the service configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        config?: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : never;

export type ServiceConfiguration<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        /**
         * Type of the service
         */
        serviceType?: string;
        /**
         * Configuration of the service
         *
         * This configuration object will be merged with the participant configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        configuration?: {
          [k: string]: unknown;
        };
        /**
         * List of participants for the service
         */
        participants?: Participant[];
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        /**
         * Type of the service
         */
        serviceType?: string;
        /**
         * Configuration of the service
         *
         * This configuration object will be merged with the participant configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        configuration?: {
          [k: string]: unknown;
        };
        /**
         * List of participants for the service
         */
        participants?: Participant<'request'>[];
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        /**
         * Type of the service
         */
        serviceType?: string;
        /**
         * Configuration of the service
         *
         * This configuration object will be merged with the participant configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).
         *
         */
        configuration?: {
          [k: string]: unknown;
        };
        /**
         * List of participants for the service
         */
        participants?: Participant<'response'>[];
        [k: string]: unknown;
      }
    : never;

export type Experiment<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * URL of the experiment
       */
      url: string;
      status:
        | 'created'
        | 'booked'
        | 'setup'
        | 'running'
        | 'finished'
        | 'created'
        | 'booked'
        | 'running'
        | 'finished';
      [k: string]: unknown;
    } & {
      bookingTime?: {
        startTime?: string;
        endTime?: string;
        [k: string]: unknown;
      };
      /**
       * Devices associated with the experiment
       */
      devices: Device[];
      /**
       * Roles that are used in this experiment
       */
      roles: Role[];
      /**
       * Connections associated with the experiment
       */
      connections: string[];
      /**
       * Services associated with the experiment
       */
      serviceConfigurations: ServiceConfiguration[];
      /**
       * Instantiated devices that need to be started by the user.
       */
      instantiatedDevices: {
        codeUrl: string;
        url: string;
        token: string;
        instanceOf: string;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      status: 'created' | 'booked' | 'running' | 'finished';
      [k: string]: unknown;
    } & {
      bookingTime?: {
        startTime?: string;
        endTime?: string;
        [k: string]: unknown;
      };
      /**
       * Devices associated with the experiment
       */
      devices: Device<'request'>[];
      /**
       * Roles that are used in this experiment
       */
      roles: Role<'request'>[];
      /**
       * Services associated with the experiment
       */
      serviceConfigurations: ServiceConfiguration<'request'>[];
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * URL of the experiment
       */
      url: string;
      status: 'created' | 'booked' | 'setup' | 'running' | 'finished';
      [k: string]: unknown;
    } & {
      bookingTime?: {
        startTime?: string;
        endTime?: string;
        [k: string]: unknown;
      };
      /**
       * Devices associated with the experiment
       */
      devices: Device<'response'>[];
      /**
       * Roles that are used in this experiment
       */
      roles: Role<'response'>[];
      /**
       * Connections associated with the experiment
       */
      connections: string[];
      /**
       * Services associated with the experiment
       */
      serviceConfigurations: ServiceConfiguration<'response'>[];
      /**
       * Instantiated devices that need to be started by the user.
       */
      instantiatedDevices: {
        codeUrl: string;
        url: string;
        token: string;
        instanceOf: string;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    }
  : never;

export type Callback<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      callbackType: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      callbackType: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      callbackType: string;
      [k: string]: unknown;
    }
  : never;

export type EventCallback<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        callbackType: string;
        [k: string]: unknown;
      } & {
        callbackType: 'event';
        eventType: string;
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        callbackType: string;
        [k: string]: unknown;
      } & {
        callbackType: 'event';
        eventType: string;
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        callbackType: string;
        [k: string]: unknown;
      } & {
        callbackType: 'event';
        eventType: string;
        [k: string]: unknown;
      }
    : never;

export type ExperimentChangedEventCallback<
  T extends 'request' | 'response' | 'all' = 'all',
> = T extends 'all'
  ? {
      callbackType: string;
      [k: string]: unknown;
    } & {
      callbackType: 'event';
      eventType: string;
      [k: string]: unknown;
    } & {
      eventType: 'experiment-changed';
      experiment: {
        /**
         * URL of the experiment
         */
        url: string;
        status:
          | 'created'
          | 'booked'
          | 'setup'
          | 'running'
          | 'finished'
          | 'created'
          | 'booked'
          | 'running'
          | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices: Device[];
        /**
         * Roles that are used in this experiment
         */
        roles: Role[];
        /**
         * Connections associated with the experiment
         */
        connections: string[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations: ServiceConfiguration[];
        /**
         * Instantiated devices that need to be started by the user.
         */
        instantiatedDevices: {
          codeUrl: string;
          url: string;
          token: string;
          instanceOf: string;
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      callbackType: string;
      [k: string]: unknown;
    } & {
      callbackType: 'event';
      eventType: string;
      [k: string]: unknown;
    } & {
      eventType: 'experiment-changed';
      experiment: {
        status: 'created' | 'booked' | 'running' | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices: Device<'request'>[];
        /**
         * Roles that are used in this experiment
         */
        roles: Role<'request'>[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations: ServiceConfiguration<'request'>[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      callbackType: string;
      [k: string]: unknown;
    } & {
      callbackType: 'event';
      eventType: string;
      [k: string]: unknown;
    } & {
      eventType: 'experiment-changed';
      experiment: {
        /**
         * URL of the experiment
         */
        url: string;
        status: 'created' | 'booked' | 'setup' | 'running' | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices: Device<'response'>[];
        /**
         * Roles that are used in this experiment
         */
        roles: Role<'response'>[];
        /**
         * Connections associated with the experiment
         */
        connections: string[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations: ServiceConfiguration<'response'>[];
        /**
         * Instantiated devices that need to be started by the user.
         */
        instantiatedDevices: {
          codeUrl: string;
          url: string;
          token: string;
          instanceOf: string;
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : never;

export type ExperimentOverviewUpdate<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        status?:
          | 'created'
          | 'booked'
          | 'setup'
          | 'running'
          | 'finished'
          | 'created'
          | 'booked'
          | 'running'
          | 'finished';
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        status?: 'created' | 'booked' | 'running' | 'finished';
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        status?: 'created' | 'booked' | 'setup' | 'running' | 'finished';
        [k: string]: unknown;
      }
    : never;

export type ExperimentUpdate<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        status?:
          | 'created'
          | 'booked'
          | 'setup'
          | 'running'
          | 'finished'
          | 'created'
          | 'booked'
          | 'running'
          | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices?: Device[];
        /**
         * Roles that are used in this experiment
         */
        roles?: Role[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations?: ServiceConfiguration[];
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        status?: 'created' | 'booked' | 'running' | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices?: Device<'request'>[];
        /**
         * Roles that are used in this experiment
         */
        roles?: Role<'request'>[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations?: ServiceConfiguration<'request'>[];
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        status?: 'created' | 'booked' | 'setup' | 'running' | 'finished';
        [k: string]: unknown;
      } & {
        bookingTime?: {
          startTime?: string;
          endTime?: string;
          [k: string]: unknown;
        };
        /**
         * Devices associated with the experiment
         */
        devices?: Device<'response'>[];
        /**
         * Roles that are used in this experiment
         */
        roles?: Role<'response'>[];
        /**
         * Services associated with the experiment
         */
        serviceConfigurations?: ServiceConfiguration<'response'>[];
        [k: string]: unknown;
      }
    : never;

export type TemplateOverview<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        /**
         * URL of the template
         */
        url: string;
        /**
         * Name of the template
         */
        name: string;
        /**
         * Description of the template
         */
        description?: string;
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        /**
         * Name of the template
         */
        name: string;
        /**
         * Description of the template
         */
        description?: string;
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        /**
         * URL of the template
         */
        url: string;
        /**
         * Name of the template
         */
        name: string;
        /**
         * Description of the template
         */
        description?: string;
        [k: string]: unknown;
      }
    : never;

export type Template<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * URL of the template
       */
      url: string;
      /**
       * Name of the template
       */
      name: string;
      /**
       * Description of the template
       */
      description?: string;
      [k: string]: unknown;
    } & {
      /**
       * Configuration of the templated experiment
       */
      configuration: {
        /**
         * Devices associated with the templated experiment
         */
        devices: Device[];
        /**
         * Roles that are used in this templated experiment
         */
        roles: Role[];
        /**
         * Services associated with the templated experiment
         */
        serviceConfigurations: ServiceConfiguration[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * Name of the template
       */
      name: string;
      /**
       * Description of the template
       */
      description?: string;
      [k: string]: unknown;
    } & {
      /**
       * Configuration of the templated experiment
       */
      configuration: {
        /**
         * Devices associated with the templated experiment
         */
        devices: Device<'request'>[];
        /**
         * Roles that are used in this templated experiment
         */
        roles: Role<'request'>[];
        /**
         * Services associated with the templated experiment
         */
        serviceConfigurations: ServiceConfiguration<'request'>[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * URL of the template
       */
      url: string;
      /**
       * Name of the template
       */
      name: string;
      /**
       * Description of the template
       */
      description?: string;
      [k: string]: unknown;
    } & {
      /**
       * Configuration of the templated experiment
       */
      configuration: {
        /**
         * Devices associated with the templated experiment
         */
        devices: Device<'response'>[];
        /**
         * Roles that are used in this templated experiment
         */
        roles: Role<'response'>[];
        /**
         * Services associated with the templated experiment
         */
        serviceConfigurations: ServiceConfiguration<'response'>[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  : never;

export type TemplateUpdate<T extends 'request' | 'response' | 'all' = 'all'> =
  T extends 'all'
    ? {
        /**
         * Name of the template
         */
        name?: string;
        /**
         * Description of the template
         */
        description?: string;
        /**
         * Configuration of the templated experiment
         */
        configuration?: {
          /**
           * Devices associated with the templated experiment
           */
          devices?: Device[];
          /**
           * Roles that are used in this templated experiment
           */
          roles?: Role[];
          /**
           * Services associated with the templated experiment
           */
          serviceConfigurations?: ServiceConfiguration[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : T extends 'request'
    ? {
        /**
         * Name of the template
         */
        name?: string;
        /**
         * Description of the template
         */
        description?: string;
        /**
         * Configuration of the templated experiment
         */
        configuration?: {
          /**
           * Devices associated with the templated experiment
           */
          devices?: Device<'request'>[];
          /**
           * Roles that are used in this templated experiment
           */
          roles?: Role<'request'>[];
          /**
           * Services associated with the templated experiment
           */
          serviceConfigurations?: ServiceConfiguration<'request'>[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : T extends 'response'
    ? {
        /**
         * Name of the template
         */
        name?: string;
        /**
         * Description of the template
         */
        description?: string;
        /**
         * Configuration of the templated experiment
         */
        configuration?: {
          /**
           * Devices associated with the templated experiment
           */
          devices?: Device<'response'>[];
          /**
           * Roles that are used in this templated experiment
           */
          roles?: Role<'response'>[];
          /**
           * Services associated with the templated experiment
           */
          serviceConfigurations?: ServiceConfiguration<'response'>[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }
    : never;

export function isCallback<T extends 'request' | 'response' | 'all' = 'all'>(
  obj: unknown,
  type: 'request' | 'response' | 'all' | T = 'all',
): obj is Callback<T> {
  switch (type) {
    case 'request':
      return BasicValidation.validateCallbackRequest(obj);
    case 'response':
      return BasicValidation.validateCallbackResponse(obj);
    default:
      return BasicValidation.validateCallback(obj);
  }
}

export function isEventCallback<T extends 'request' | 'response' | 'all' = 'all'>(
  obj: unknown,
  type: 'request' | 'response' | 'all' | T = 'all',
): obj is EventCallback<T> {
  switch (type) {
    case 'request':
      return BasicValidation.validateEventCallbackRequest(obj);
    case 'response':
      return BasicValidation.validateEventCallbackResponse(obj);
    default:
      return BasicValidation.validateEventCallback(obj);
  }
}

export function isExperimentChangedEventCallback<
  T extends 'request' | 'response' | 'all' = 'all',
>(
  obj: unknown,
  type: 'request' | 'response' | 'all' | T = 'all',
): obj is ExperimentChangedEventCallback<T> {
  switch (type) {
    case 'request':
      return BasicValidation.validateExperimentChangedEventCallbackRequest(obj);
    case 'response':
      return BasicValidation.validateExperimentChangedEventCallbackResponse(obj);
    default:
      return BasicValidation.validateExperimentChangedEventCallback(obj);
  }
}
