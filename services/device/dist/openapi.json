{
  "openapi": "3.1.0",
  "info": {
    "title": "CrossLab Device Service REST API (internal)",
    "description": "This is the OpenAPI description of the internal CrossLab Device Service REST API.",
    "version": "0.0.1"
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "As this is the API description of the internal Device API, the only supported security schema is the JWT bearer token.\nThis token will be populated by the API Gateway.\nTo learn about the general Authentification scheme, please refer to the [Authentication section](https://cross-lab-project.github.io/crosslab/backend.html#authentification) in the CrossLab architecture description."
      }
    },
    "schemas": {
      "authentication_message": {
        "title": "Authentication Message",
        "allOf": [
          {
            "$ref": "#/components/schemas/message"
          },
          {
            "type": "object",
            "properties": {
              "messageType": {
                "const": "authenticate"
              },
              "deviceUrl": {
                "type": "string",
                "format": "uri"
              },
              "token": {
                "type": "string"
              },
              "authenticated": {
                "type": "boolean"
              }
            },
            "required": [
              "messageType",
              "deviceUrl"
            ]
          }
        ],
        "x-typeguard": true
      },
      "device_overview": {
        "title": "Device Overview",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the device",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the device"
          },
          "description": {
            "type": "string",
            "description": "Extended description of the device, features, etc."
          },
          "type": {
            "type": "string",
            "description": "Type of the device",
            "enum": [
              "device",
              "group",
              "virtual"
            ]
          },
          "owner": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "time_slot": {
        "title": "Time Slot",
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "availability": {
        "title": "Availability",
        "description": "A list of time slots that the maintainer of the device announced it is available\n",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/time_slot"
        }
      },
      "device_concrete": {
        "title": "Concrete Device",
        "allOf": [
          {
            "$ref": "#/components/schemas/device_overview"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "device"
              },
              "connected": {
                "description": "If true, the device is connected to the service and can be used.\n",
                "type": "boolean"
              },
              "announcedAvailability": {
                "$ref": "#/components/schemas/availability"
              },
              "experiment": {
                "type": "string",
                "format": "uri"
              },
              "services": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ]
      },
      "availability_rule": {
        "title": "Availability Rule",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/time_slot"
          },
          {
            "properties": {
              "available": {
                "type": "boolean"
              },
              "repeat": {
                "description": "If specified the time slot is repeated in a fixed offset specified by the frequency",
                "type": "object",
                "properties": {
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "HOURLY",
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "YEARLY"
                    ]
                  },
                  "until": {
                    "description": "Up to this date-time the time slot will be repeated.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "count": {
                    "description": "How often the time slot will be repeated",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "device_group": {
        "title": "Device Group",
        "allOf": [
          {
            "$ref": "#/components/schemas/device_overview"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "group"
              },
              "devices": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL of the device",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "device_virtual": {
        "title": "Virtual Device",
        "allOf": [
          {
            "$ref": "#/components/schemas/device_overview"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "virtual"
              }
            }
          }
        ]
      },
      "message": {
        "title": "Message",
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string"
          }
        },
        "required": [
          "messageType"
        ],
        "additionalProperties": true,
        "x-typeguard": true
      },
      "command_message": {
        "title": "Command Message",
        "allOf": [
          {
            "$ref": "#/components/schemas/message"
          },
          {
            "type": "object",
            "properties": {
              "messageType": {
                "const": "command"
              },
              "command": {
                "type": "string"
              }
            },
            "required": [
              "messageType",
              "command"
            ]
          }
        ],
        "x-typeguard": true
      },
      "service_config": {
        "title": "Service Config",
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "format": "uri"
          },
          "serviceId": {
            "type": "string"
          },
          "remoteServiceId": {
            "type": "string"
          }
        },
        "additionalProperties": true
      },
      "create_peerconnection_message": {
        "title": "Create Peerconnection Message",
        "allOf": [
          {
            "$ref": "#/components/schemas/command_message"
          },
          {
            "type": "object",
            "properties": {
              "command": {
                "const": "createPeerconnection"
              },
              "connectionType": {
                "type": "string",
                "enum": [
                  "webrtc",
                  "websocket"
                ]
              },
              "connectionUrl": {
                "type": "string",
                "format": "uri"
              },
              "services": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/service_config"
                }
              },
              "tiebreaker": {
                "type": "boolean"
              }
            },
            "required": [
              "command",
              "connectionType",
              "connectionUrl",
              "services",
              "tiebreaker"
            ]
          }
        ],
        "x-typeguard": true
      },
      "close_peerconnection_message": {
        "title": "Close Peerconnection Message",
        "allOf": [
          {
            "$ref": "#/components/schemas/command_message"
          },
          {
            "type": "object",
            "properties": {
              "command": {
                "const": "closePeerconnection"
              },
              "connectionUrl": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "command",
              "connectionUrl"
            ]
          }
        ],
        "x-typeguard": true
      },
      "signaling_message": {
        "title": "Signaling Message",
        "allOf": [
          {
            "$ref": "#/components/schemas/message"
          },
          {
            "type": "object",
            "properties": {
              "messageType": {
                "const": "signaling"
              },
              "signalingType": {
                "type": "string",
                "enum": [
                  "offer",
                  "answer",
                  "candidate"
                ]
              },
              "connectionUrl": {
                "type": "string",
                "format": "uri"
              },
              "content": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "required": [
              "messageType",
              "signalingType",
              "connectionUrl",
              "content"
            ]
          }
        ],
        "x-typeguard": true
      },
      "device_reference": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the device",
            "format": "uri"
          }
        }
      },
      "peerconnection_overview": {
        "title": "Peerconnection Overview",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the peerconnection",
            "format": "uri",
            "readOnly": true
          },
          "devices": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "$ref": "#/components/schemas/device_reference"
            }
          }
        }
      },
      "configured_device_reference": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the device",
            "format": "uri"
          },
          "config": {
            "type": "object",
            "properties": {
              "services": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/service_config"
                }
              }
            }
          }
        }
      },
      "peerconnection": {
        "title": "Peerconnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/peerconnection_overview"
          },
          {
            "type": "object",
            "properties": {
              "devices": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "$ref": "#/components/schemas/configured_device_reference"
                }
              }
            }
          }
        ],
        "x-typeguard": true
      }
    },
    "parameters": {
      "device_changed_url": {
        "name": "changedUrl",
        "in": "query",
        "required": false,
        "description": "**An URL that will be called once the device changes.**\n\nOnce the device was given a changedUrl parameter the contained URL will be called every time a device is changed\nas long as every callback resolves with a successful status code.\n\nIf the callback fails the url MIGHT not be called in the future.\n\nThere can be multiple callbacks registered with the same device.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "device_id": {
        "in": "path",
        "name": "device_id",
        "description": "UUID of the device",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": [
          "908fec03-ee1e-4996-b11a-0ef8fc7d0909"
        ]
      },
      "flat_group": {
        "in": "query",
        "name": "flat_group",
        "description": "If true the returned device group will only contain concrete devices. I.e. any subgroups will be flattend.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "peerconnection_url": {
        "in": "query",
        "name": "peerconnection_url",
        "description": "URL of the peerconnection",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uri"
        },
        "example": [
          "f4c69c42-6e1c-44c3-8e44-f74bd22c3713"
        ]
      },
      "closed_url": {
        "name": "closedUrl",
        "in": "query",
        "required": false,
        "description": "An URL that will be called once the peer connection is closed.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "peerconnection_id": {
        "in": "path",
        "name": "peerconnection_id",
        "description": "UUID of the peerconnection",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": [
          "f4c69c42-6e1c-44c3-8e44-f74bd22c3713"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "device",
      "description": "This tag describes the device resource."
    },
    {
      "name": "peerconnection",
      "description": "This tag describes the peer connection resource."
    }
  ],
  "paths": {
    "/devices": {
      "get": {
        "summary": "List devices",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/device_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "post": {
        "summary": "Create a new device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_changed_url"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/device_concrete"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "announcedAvailability": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/availability_rule"
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/device_group"
                  },
                  {
                    "$ref": "#/components/schemas/device_virtual"
                  }
                ]
              },
              "examples": {
                "microcontroller": {
                  "value": {
                    "name": "ATmega328P",
                    "description": "8-bit AVR Microcontroller with 32K Bytes In-System Programmable Flash",
                    "owner": "https://api.example.com/groups/goldi",
                    "type": "device",
                    "services": [
                      {
                        "serviceType": "https://api.example.com/services/electrical",
                        "serviceId": "pins",
                        "serviceDirection": "prosumer",
                        "interfaces": [
                          {
                            "interfaceType": "gpio",
                            "availableSignals": {
                              "gpio": [
                                "PB0",
                                "PB1",
                                "PB2",
                                "PB3",
                                "PB4",
                                "PB5",
                                "PB6",
                                "PB7",
                                "PC0",
                                "PC1",
                                "PC2",
                                "PC3",
                                "PC4",
                                "PC5",
                                "PC6",
                                "PD0",
                                "PD1",
                                "PD2",
                                "PD3",
                                "PD4",
                                "PD5",
                                "PD6",
                                "PD7"
                              ]
                            }
                          },
                          {
                            "interfaceType": "i2c",
                            "availableSignals": {
                              "sda": [
                                "PC4"
                              ],
                              "scl": [
                                "PC5"
                              ]
                            }
                          },
                          {
                            "interfaceType": "spi",
                            "roles": [
                              "master",
                              "slave"
                            ],
                            "availableSignals": {
                              "miso": [
                                "PB4"
                              ],
                              "mosi": [
                                "PB3"
                              ],
                              "sck": [
                                "PB5"
                              ],
                              "ss-slave": [
                                "PB2"
                              ],
                              "ss-master": [
                                "PB0",
                                "PB1",
                                "PB2",
                                "PB6",
                                "PB7",
                                "PC0",
                                "PC1",
                                "PC2",
                                "PC3",
                                "PC4",
                                "PC5",
                                "PC6",
                                "PD0",
                                "PD1",
                                "PD2",
                                "PD3",
                                "PD4",
                                "PD5",
                                "PD6",
                                "PD7"
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The device was created. A JSON representation of the new device is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/device_concrete"
                    },
                    {
                      "$ref": "#/components/schemas/device_group"
                    },
                    {
                      "$ref": "#/components/schemas/device_virtual"
                    }
                  ]
                },
                "examples": {
                  "microcontroller": {
                    "value": {
                      "name": "ATmega328P",
                      "description": "8-bit AVR Microcontroller with 32K Bytes In-System Programmable Flash",
                      "owner": "https://api.example.com/groups/goldi",
                      "type": "device",
                      "services": [
                        {
                          "serviceType": "https://api.example.com/services/electrical",
                          "serviceId": "pins",
                          "serviceDirection": "prosumer",
                          "interfaces": [
                            {
                              "interfaceType": "gpio",
                              "availableSignals": {
                                "gpio": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB3",
                                  "PB4",
                                  "PB5",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            },
                            {
                              "interfaceType": "i2c",
                              "availableSignals": {
                                "sda": [
                                  "PC4"
                                ],
                                "scl": [
                                  "PC5"
                                ]
                              }
                            },
                            {
                              "interfaceType": "spi",
                              "roles": [
                                "master",
                                "slave"
                              ],
                              "availableSignals": {
                                "miso": [
                                  "PB4"
                                ],
                                "mosi": [
                                  "PB3"
                                ],
                                "sck": [
                                  "PB5"
                                ],
                                "ss-slave": [
                                  "PB2"
                                ],
                                "ss-master": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": [
                              "event"
                            ]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": [
                              "device-changed"
                            ]
                          },
                          "device": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/device_concrete"
                              },
                              {
                                "$ref": "#/components/schemas/device_group"
                              },
                              {
                                "$ref": "#/components/schemas/device_virtual"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted device. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{device_id}": {
      "get": {
        "summary": "View a registered device",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/flat_group"
          }
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON Representation of the device",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/device_concrete"
                    },
                    {
                      "$ref": "#/components/schemas/device_group"
                    },
                    {
                      "$ref": "#/components/schemas/device_virtual"
                    }
                  ]
                },
                "examples": {
                  "microcontroller": {
                    "value": {
                      "name": "ATmega328P",
                      "description": "8-bit AVR Microcontroller with 32K Bytes In-System Programmable Flash",
                      "owner": "https://api.example.com/groups/goldi",
                      "type": "device",
                      "services": [
                        {
                          "serviceType": "https://api.example.com/services/electrical",
                          "serviceId": "pins",
                          "serviceDirection": "prosumer",
                          "interfaces": [
                            {
                              "interfaceType": "gpio",
                              "availableSignals": {
                                "gpio": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB3",
                                  "PB4",
                                  "PB5",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            },
                            {
                              "interfaceType": "i2c",
                              "availableSignals": {
                                "sda": [
                                  "PC4"
                                ],
                                "scl": [
                                  "PC5"
                                ]
                              }
                            },
                            {
                              "interfaceType": "spi",
                              "roles": [
                                "master",
                                "slave"
                              ],
                              "availableSignals": {
                                "miso": [
                                  "PB4"
                                ],
                                "mosi": [
                                  "PB3"
                                ],
                                "sck": [
                                  "PB5"
                                ],
                                "ss-slave": [
                                  "PB2"
                                ],
                                "ss-master": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "summary": "Update an existing device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/device_changed_url"
          }
        ],
        "requestBody": {
          "description": "Update the device",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/device_concrete"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "announcedAvailability": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/availability_rule"
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/device_group"
                  },
                  {
                    "$ref": "#/components/schemas/device_virtual"
                  }
                ]
              },
              "examples": {
                "microcontroller": {
                  "value": {
                    "name": "ATmega328P",
                    "description": "8-bit AVR Microcontroller with 32K Bytes In-System Programmable Flash",
                    "owner": "https://api.example.com/groups/goldi",
                    "type": "device",
                    "services": [
                      {
                        "serviceType": "https://api.example.com/services/electrical",
                        "serviceId": "pins",
                        "serviceDirection": "prosumer",
                        "interfaces": [
                          {
                            "interfaceType": "gpio",
                            "availableSignals": {
                              "gpio": [
                                "PB0",
                                "PB1",
                                "PB2",
                                "PB3",
                                "PB4",
                                "PB5",
                                "PB6",
                                "PB7",
                                "PC0",
                                "PC1",
                                "PC2",
                                "PC3",
                                "PC4",
                                "PC5",
                                "PC6",
                                "PD0",
                                "PD1",
                                "PD2",
                                "PD3",
                                "PD4",
                                "PD5",
                                "PD6",
                                "PD7"
                              ]
                            }
                          },
                          {
                            "interfaceType": "i2c",
                            "availableSignals": {
                              "sda": [
                                "PC4"
                              ],
                              "scl": [
                                "PC5"
                              ]
                            }
                          },
                          {
                            "interfaceType": "spi",
                            "roles": [
                              "master",
                              "slave"
                            ],
                            "availableSignals": {
                              "miso": [
                                "PB4"
                              ],
                              "mosi": [
                                "PB3"
                              ],
                              "sck": [
                                "PB5"
                              ],
                              "ss-slave": [
                                "PB2"
                              ],
                              "ss-master": [
                                "PB0",
                                "PB1",
                                "PB2",
                                "PB6",
                                "PB7",
                                "PC0",
                                "PC1",
                                "PC2",
                                "PC3",
                                "PC4",
                                "PC5",
                                "PC6",
                                "PD0",
                                "PD1",
                                "PD2",
                                "PD3",
                                "PD4",
                                "PD5",
                                "PD6",
                                "PD7"
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON Representation of the changed device",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/device_concrete"
                    },
                    {
                      "$ref": "#/components/schemas/device_group"
                    },
                    {
                      "$ref": "#/components/schemas/device_virtual"
                    }
                  ]
                },
                "examples": {
                  "microcontroller": {
                    "value": {
                      "name": "ATmega328P",
                      "description": "8-bit AVR Microcontroller with 32K Bytes In-System Programmable Flash",
                      "owner": "https://api.example.com/groups/goldi",
                      "type": "device",
                      "services": [
                        {
                          "serviceType": "https://api.example.com/services/electrical",
                          "serviceId": "pins",
                          "serviceDirection": "prosumer",
                          "interfaces": [
                            {
                              "interfaceType": "gpio",
                              "availableSignals": {
                                "gpio": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB3",
                                  "PB4",
                                  "PB5",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            },
                            {
                              "interfaceType": "i2c",
                              "availableSignals": {
                                "sda": [
                                  "PC4"
                                ],
                                "scl": [
                                  "PC5"
                                ]
                              }
                            },
                            {
                              "interfaceType": "spi",
                              "roles": [
                                "master",
                                "slave"
                              ],
                              "availableSignals": {
                                "miso": [
                                  "PB4"
                                ],
                                "mosi": [
                                  "PB3"
                                ],
                                "sck": [
                                  "PB5"
                                ],
                                "ss-slave": [
                                  "PB2"
                                ],
                                "ss-master": [
                                  "PB0",
                                  "PB1",
                                  "PB2",
                                  "PB6",
                                  "PB7",
                                  "PC0",
                                  "PC1",
                                  "PC2",
                                  "PC3",
                                  "PC4",
                                  "PC5",
                                  "PC6",
                                  "PD0",
                                  "PD1",
                                  "PD2",
                                  "PD3",
                                  "PD4",
                                  "PD5",
                                  "PD6",
                                  "PD7"
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": [
                              "event"
                            ]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": [
                              "device-changed"
                            ]
                          },
                          "device": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/device_concrete"
                              },
                              {
                                "$ref": "#/components/schemas/device_group"
                              },
                              {
                                "$ref": "#/components/schemas/device_virtual"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted device. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a registered device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The device was deleted"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "post": {
        "summary": "Create an instance of a virtual device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/device_changed_url"
          }
        ],
        "responses": {
          "201": {
            "description": "The JSON Representation of the created instance of the virtual device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device_concrete"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": [
                              "event"
                            ]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": [
                              "device-changed"
                            ]
                          },
                          "device": {
                            "$ref": "#/components/schemas/device_concrete"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted device. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{device_id}/availability": {
      "post": {
        "summary": "Update the device availability",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/availability_rule"
                }
              },
              "examples": {
                "Make the device always unavailable": {
                  "value": [
                    {
                      "available": false
                    }
                  ]
                },
                "Make the device always available": {
                  "value": [
                    {
                      "available": true
                    }
                  ]
                },
                "Make the device only available from monday 9:00 through friday 17:00": {
                  "value": [
                    {
                      "available": true,
                      "start": "2022-05-15T09:00:00Z",
                      "end": "2022-05-20T17:00:00Z",
                      "repeat": {
                        "frequency": "WEEKLY"
                      }
                    },
                    {
                      "available": false,
                      "start": "2022-05-20T17:00:00Z",
                      "end": "2022-05-23T09:00:00Z",
                      "repeat": {
                        "frequency": "WEEKLY"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON Representation of the changed availability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availability"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/devices/{device_id}/token": {
      "post": {
        "summary": "Create new token for device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:connect"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly generated token for the device",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/devices/{device_id}/signaling": {
      "post": {
        "summary": "Send signaling message to device",
        "tags": [
          "device"
        ],
        "security": [
          {
            "JWT": [
              "device",
              "device:signal"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/peerconnection_url"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/create_peerconnection_message"
                  },
                  {
                    "$ref": "#/components/schemas/close_peerconnection_message"
                  },
                  {
                    "$ref": "#/components/schemas/signaling_message"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The signaling message was delivered successfully"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/peerconnections": {
      "get": {
        "summary": "List Peer Connection",
        "tags": [
          "peerconnection"
        ],
        "security": [
          {
            "JWT": [
              "peerconnection",
              "peerconnection:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all peerconnection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/peerconnection_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "post": {
        "summary": "Create a new Peer Connection",
        "tags": [
          "peerconnection"
        ],
        "security": [
          {
            "JWT": [
              "peerconnection",
              "peerconnection:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/closed_url"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/peerconnection"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The peer connection was created. A JSON representation of the new peer connection is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/peerconnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "closed": {
            "{$request.query.closedUrl}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": [
                              "event"
                            ]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": [
                              "peerconnection-closed"
                            ]
                          },
                          "peerconnection": {
                            "$ref": "#/components/schemas/peerconnection"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peerconnections/{peerconnection_id}": {
      "get": {
        "summary": "View a peer connection",
        "tags": [
          "peerconnection"
        ],
        "security": [
          {
            "JWT": [
              "peerconnection",
              "peerconnection:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON Representation of the device peer connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/peerconnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/peerconnection_id"
          }
        ]
      },
      "delete": {
        "summary": "Delete a peer connection",
        "tags": [
          "peerconnection"
        ],
        "security": [
          {
            "JWT": [
              "peerconnection",
              "peerconnection:create"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "The peer connection was deleted successfully"
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/peerconnection_id"
          }
        ]
      }
    }
  }
}