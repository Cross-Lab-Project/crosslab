/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/ban-ts-comment */
import * as Types from './types.js';
// @ts-ignore
import { type Require } from './types.js';

/**
 * Typing for the parameters of the request made by auth()
 * @category auth()
 */
export type AuthParameters = {
  Authorization?: string;
  'X-Real-IP'?: string;
  'X-Forwarded-Proto'?: string;
};

/**
 * Typing for all possible responses to the request made by auth()
 * @category auth()
 */
export type AuthResponse = AuthSuccessResponse | AuthErrorResponse;

/**
 * Typing for all successful responses to the request made by auth()
 * @category auth()
 */
export type AuthSuccessResponse = AuthResponse200;

/**
 * Typing for all error responses to the request made by auth()
 * @category auth()
 */
export type AuthErrorResponse =
  | AuthResponse400
  | AuthResponse401
  | AuthResponse403
  | AuthResponse404
  | AuthResponse500;

/**
 * Typing for a response with status 200 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse200 extends Types.SuccessResponse {
  status: 200;
  headers: {
    XRequestAuthentication?: string;
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by auth()
 * @category auth()
 */
export interface AuthResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by login()
 * @category login()
 */
export type LoginBody = Types.Credentials<'request'> & {
  /**
   * Authentication method.
   */
  method?: Types.AuthMethod<'request'>;
  [k: string]: unknown;
};

/**
 * Typing for all possible responses to the request made by login()
 * @category login()
 */
export type LoginResponse = LoginSuccessResponse | LoginErrorResponse;

/**
 * Typing for all successful responses to the request made by login()
 * @category login()
 */
export type LoginSuccessResponse = LoginResponse201;

/**
 * Typing for all error responses to the request made by login()
 * @category login()
 */
export type LoginErrorResponse =
  | LoginResponse400
  | LoginResponse401
  | LoginResponse403
  | LoginResponse404
  | LoginResponse500;

/**
 * Typing for a response with status 201 to the request made by login()
 * @category login()
 */
export interface LoginResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 400 to the request made by login()
 * @category login()
 */
export interface LoginResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by login()
 * @category login()
 */
export interface LoginResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by login()
 * @category login()
 */
export interface LoginResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by login()
 * @category login()
 */
export interface LoginResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by login()
 * @category login()
 */
export interface LoginResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by logout()
 * @category logout()
 */
export type LogoutBody = {
  /**
   * The token to be invalidated.
   */
  token?: string;
  [k: string]: unknown;
};

/**
 * Typing for all possible responses to the request made by logout()
 * @category logout()
 */
export type LogoutResponse = LogoutSuccessResponse | LogoutErrorResponse;

/**
 * Typing for all successful responses to the request made by logout()
 * @category logout()
 */
export type LogoutSuccessResponse = LogoutResponse204;

/**
 * Typing for all error responses to the request made by logout()
 * @category logout()
 */
export type LogoutErrorResponse =
  | LogoutResponse400
  | LogoutResponse401
  | LogoutResponse403
  | LogoutResponse404
  | LogoutResponse500;

/**
 * Typing for a response with status 204 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse204 extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by logout()
 * @category logout()
 */
export interface LogoutResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by listUsers()
 * @category listUsers()
 */
export type ListUsersParameters = {
  username?: string;
};

/**
 * Typing for all possible responses to the request made by listUsers()
 * @category listUsers()
 */
export type ListUsersResponse = ListUsersSuccessResponse | ListUsersErrorResponse;

/**
 * Typing for all successful responses to the request made by listUsers()
 * @category listUsers()
 */
export type ListUsersSuccessResponse = ListUsersResponse200;

/**
 * Typing for all error responses to the request made by listUsers()
 * @category listUsers()
 */
export type ListUsersErrorResponse =
  | ListUsersResponse400
  | ListUsersResponse401
  | ListUsersResponse403
  | ListUsersResponse404
  | ListUsersResponse500;

/**
 * Typing for a response with status 200 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>[];
}

/**
 * Typing for a response with status 400 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by listUsers()
 * @category listUsers()
 */
export interface ListUsersResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by createUser()
 * @category createUser()
 */
export type CreateUserBody = Types.User<'request'>;

/**
 * Typing for all possible responses to the request made by createUser()
 * @category createUser()
 */
export type CreateUserResponse = CreateUserSuccessResponse | CreateUserErrorResponse;

/**
 * Typing for all successful responses to the request made by createUser()
 * @category createUser()
 */
export type CreateUserSuccessResponse = CreateUserResponse201;

/**
 * Typing for all error responses to the request made by createUser()
 * @category createUser()
 */
export type CreateUserErrorResponse =
  | CreateUserResponse400
  | CreateUserResponse401
  | CreateUserResponse403
  | CreateUserResponse404
  | CreateUserResponse500;

/**
 * Typing for a response with status 201 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by createUser()
 * @category createUser()
 */
export interface CreateUserResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by getUser()
 * @category getUser()
 */
export type GetUserParameters = {
  user_id: string;
};

/**
 * Typing for all possible responses to the request made by getUser()
 * @category getUser()
 */
export type GetUserResponse = GetUserSuccessResponse | GetUserErrorResponse;

/**
 * Typing for all successful responses to the request made by getUser()
 * @category getUser()
 */
export type GetUserSuccessResponse = GetUserResponse200;

/**
 * Typing for all error responses to the request made by getUser()
 * @category getUser()
 */
export type GetUserErrorResponse =
  | GetUserResponse400
  | GetUserResponse401
  | GetUserResponse403
  | GetUserResponse404
  | GetUserResponse500;

/**
 * Typing for a response with status 200 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getUser()
 * @category getUser()
 */
export interface GetUserResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by updateUser()
 * @category updateUser()
 */
export type UpdateUserParameters = {
  user_id: string;
};

/**
 * Typing for the body of the request made by updateUser()
 * @category updateUser()
 */
export type UpdateUserBody = Types.UserUpdate<'request'>;

/**
 * Typing for all possible responses to the request made by updateUser()
 * @category updateUser()
 */
export type UpdateUserResponse = UpdateUserSuccessResponse | UpdateUserErrorResponse;

/**
 * Typing for all successful responses to the request made by updateUser()
 * @category updateUser()
 */
export type UpdateUserSuccessResponse = UpdateUserResponse200;

/**
 * Typing for all error responses to the request made by updateUser()
 * @category updateUser()
 */
export type UpdateUserErrorResponse =
  | UpdateUserResponse400
  | UpdateUserResponse401
  | UpdateUserResponse403
  | UpdateUserResponse404
  | UpdateUserResponse500;

/**
 * Typing for a response with status 200 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by updateUser()
 * @category updateUser()
 */
export interface UpdateUserResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by deleteUser()
 * @category deleteUser()
 */
export type DeleteUserParameters = {
  user_id: string;
};

/**
 * Typing for all possible responses to the request made by deleteUser()
 * @category deleteUser()
 */
export type DeleteUserResponse = DeleteUserSuccessResponse | DeleteUserErrorResponse;

/**
 * Typing for all successful responses to the request made by deleteUser()
 * @category deleteUser()
 */
export type DeleteUserSuccessResponse = DeleteUserResponse204;

/**
 * Typing for all error responses to the request made by deleteUser()
 * @category deleteUser()
 */
export type DeleteUserErrorResponse =
  | DeleteUserResponse400
  | DeleteUserResponse401
  | DeleteUserResponse403
  | DeleteUserResponse404
  | DeleteUserResponse500;

/**
 * Typing for a response with status 204 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse204 extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by deleteUser()
 * @category deleteUser()
 */
export interface DeleteUserResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for all possible responses to the request made by getIdentity()
 * @category getIdentity()
 */
export type GetIdentityResponse = GetIdentitySuccessResponse | GetIdentityErrorResponse;

/**
 * Typing for all successful responses to the request made by getIdentity()
 * @category getIdentity()
 */
export type GetIdentitySuccessResponse = GetIdentityResponse200;

/**
 * Typing for all error responses to the request made by getIdentity()
 * @category getIdentity()
 */
export type GetIdentityErrorResponse =
  | GetIdentityResponse400
  | GetIdentityResponse401
  | GetIdentityResponse403
  | GetIdentityResponse404
  | GetIdentityResponse500;

/**
 * Typing for a response with status 200 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getIdentity()
 * @category getIdentity()
 */
export interface GetIdentityResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by updateIdentity()
 * @category updateIdentity()
 */
export type UpdateIdentityBody = Types.UserUpdate<'request'> | undefined;

/**
 * Typing for all possible responses to the request made by updateIdentity()
 * @category updateIdentity()
 */
export type UpdateIdentityResponse =
  | UpdateIdentitySuccessResponse
  | UpdateIdentityErrorResponse;

/**
 * Typing for all successful responses to the request made by updateIdentity()
 * @category updateIdentity()
 */
export type UpdateIdentitySuccessResponse = UpdateIdentityResponse200;

/**
 * Typing for all error responses to the request made by updateIdentity()
 * @category updateIdentity()
 */
export type UpdateIdentityErrorResponse =
  | UpdateIdentityResponse400
  | UpdateIdentityResponse401
  | UpdateIdentityResponse403
  | UpdateIdentityResponse404
  | UpdateIdentityResponse500;

/**
 * Typing for a response with status 200 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.User<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by updateIdentity()
 * @category updateIdentity()
 */
export interface UpdateIdentityResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by createToken()
 * @category createToken()
 */
export type CreateTokenBody =
  | {
      /**
       * Url or uuid of the user that will be used to create the token.
       */
      user: string;
      /**
       * The claims that will be added to the token. If left empty, the token will have the full scope of the user.
       *
       */
      claims?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Url or uuid of the user that will be used to create the token.
       */
      username: string;
      /**
       * The claims that will be added to the token. If left empty, the token will have the full scope of the user.
       *
       */
      claims?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

/**
 * Typing for all possible responses to the request made by createToken()
 * @category createToken()
 */
export type CreateTokenResponse = CreateTokenSuccessResponse;

/**
 * Typing for all successful responses to the request made by createToken()
 * @category createToken()
 */
export type CreateTokenSuccessResponse = CreateTokenResponse201;

/**
 * Typing for a response with status 201 to the request made by createToken()
 * @category createToken()
 */
export interface CreateTokenResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}
