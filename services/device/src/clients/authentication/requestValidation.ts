/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to auth()
 */
export function validateAuthInput(parameters: Signatures.AuthParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateAuthorizationRequest(parameters['Authorization']) &&
      parameters['Authorization'] !== undefined
    ) {
      (validateAuthInput as FunctionWithErrors).errors = (
        BasicValidation.validateAuthorizationRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateXRealIPRequest(parameters['X-Real-IP']) &&
      parameters['X-Real-IP'] !== undefined
    ) {
      (validateAuthInput as FunctionWithErrors).errors = (
        BasicValidation.validateXRealIPRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateXForwardedProtoRequest(parameters['X-Forwarded-Proto']) &&
      parameters['X-Forwarded-Proto'] !== undefined
    ) {
      (validateAuthInput as FunctionWithErrors).errors = (
        BasicValidation.validateXForwardedProtoRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of auth()
 */
export function validateAuthOutput(
  response: ResponseData,
): response is Signatures.AuthResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (response.headers) {
      if (
        !BasicValidation.validateAuthXRequestAuthenticationResponse(
          response.headers['XRequestAuthentication'],
        ) &&
        response.headers['XRequestAuthentication'] !== undefined
      ) {
        (validateAuthOutput as FunctionWithErrors).errors = (
          BasicValidation.validateAuthXRequestAuthenticationResponse as FunctionWithErrors
        ).errors;
        return false;
      }
    } else {
      if (response.headers !== undefined) {
        return false;
      }
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateAuthOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to login()
 */
export function validateLoginInput(body: Signatures.LoginBody) {
  if (!BasicValidation.validateLoginBodyRequest(body)) {
    (validateLoginInput as FunctionWithErrors).errors = (
      BasicValidation.validateLoginBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of login()
 */
export function validateLoginOutput(
  response: ResponseData,
): response is Signatures.LoginResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateLoginResponse201Response(response.body)) {
      (validateLoginOutput as FunctionWithErrors).errors = (
        BasicValidation.validateLoginResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateLoginOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to logout()
 */
export function validateLogoutInput(body: Signatures.LogoutBody) {
  if (!BasicValidation.validateLogoutBodyRequest(body)) {
    (validateLogoutInput as FunctionWithErrors).errors = (
      BasicValidation.validateLogoutBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of logout()
 */
export function validateLogoutOutput(
  response: ResponseData,
): response is Signatures.LogoutResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateLogoutOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to listUsers()
 */
export function validateListUsersInput() {
  return true;
}

/**
 * This function validates the outputs of listUsers()
 */
export function validateListUsersOutput(
  response: ResponseData,
): response is Signatures.ListUsersResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateListUsersResponse200Response(response.body)) {
      (validateListUsersOutput as FunctionWithErrors).errors = (
        BasicValidation.validateListUsersResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateListUsersOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createUser()
 */
export function validateCreateUserInput(body: Signatures.CreateUserBody) {
  if (!BasicValidation.validateCreateUserBodyRequest(body)) {
    (validateCreateUserInput as FunctionWithErrors).errors = (
      BasicValidation.validateCreateUserBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createUser()
 */
export function validateCreateUserOutput(
  response: ResponseData,
): response is Signatures.CreateUserResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateCreateUserResponse201Response(response.body)) {
      (validateCreateUserOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreateUserResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateCreateUserOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getUser()
 */
export function validateGetUserInput(parameters: Signatures.GetUserParameters) {
  if (parameters) {
    if (!BasicValidation.validateUserIdRequest(parameters['user_id'])) {
      (validateGetUserInput as FunctionWithErrors).errors = (
        BasicValidation.validateUserIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getUser()
 */
export function validateGetUserOutput(
  response: ResponseData,
): response is Signatures.GetUserResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetUserResponse200Response(response.body)) {
      (validateGetUserOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetUserResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateGetUserOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to updateUser()
 */
export function validateUpdateUserInput(
  parameters: Signatures.UpdateUserParameters,
  body: Signatures.UpdateUserBody,
) {
  if (parameters) {
    if (!BasicValidation.validateUserIdRequest(parameters['user_id'])) {
      (validateUpdateUserInput as FunctionWithErrors).errors = (
        BasicValidation.validateUserIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (!BasicValidation.validateUpdateUserBodyRequest(body)) {
    (validateUpdateUserInput as FunctionWithErrors).errors = (
      BasicValidation.validateUpdateUserBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of updateUser()
 */
export function validateUpdateUserOutput(
  response: ResponseData,
): response is Signatures.UpdateUserResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateUpdateUserResponse200Response(response.body)) {
      (validateUpdateUserOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateUserResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateUpdateUserOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deleteUser()
 */
export function validateDeleteUserInput(parameters: Signatures.DeleteUserParameters) {
  if (parameters) {
    if (!BasicValidation.validateUserIdRequest(parameters['user_id'])) {
      (validateDeleteUserInput as FunctionWithErrors).errors = (
        BasicValidation.validateUserIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deleteUser()
 */
export function validateDeleteUserOutput(
  response: ResponseData,
): response is Signatures.DeleteUserResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateDeleteUserOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getIdentity()
 */
export function validateGetIdentityInput() {
  return true;
}

/**
 * This function validates the outputs of getIdentity()
 */
export function validateGetIdentityOutput(
  response: ResponseData,
): response is Signatures.GetIdentityResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetIdentityResponse200Response(response.body)) {
      (validateGetIdentityOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetIdentityResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateGetIdentityOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to updateIdentity()
 */
export function validateUpdateIdentityInput(body: Signatures.UpdateIdentityBody) {
  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateUpdateIdentityBodyRequest(body)) {
    (validateUpdateIdentityInput as FunctionWithErrors).errors = (
      BasicValidation.validateUpdateIdentityBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of updateIdentity()
 */
export function validateUpdateIdentityOutput(
  response: ResponseData,
): response is Signatures.UpdateIdentityResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateUpdateIdentityResponse200Response(response.body)) {
      (validateUpdateIdentityOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateIdentityResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateUpdateIdentityOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createToken()
 */
export function validateCreateTokenInput(body: Signatures.CreateTokenBody) {
  if (!BasicValidation.validateCreateTokenBodyRequest(body)) {
    (validateCreateTokenInput as FunctionWithErrors).errors = (
      BasicValidation.validateCreateTokenBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createToken()
 */
export function validateCreateTokenOutput(
  response: ResponseData,
): response is Signatures.CreateTokenResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateCreateTokenResponse201Response(response.body)) {
      (validateCreateTokenOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreateTokenResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  (
    validateCreateTokenOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}
