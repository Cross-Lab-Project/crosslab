/* eslint-disable */
//@ts-nocheck
/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
'use strict';
exports.validateInstitution = validate21;
const schema6 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': true,
  'x-name': 'Institution',
  'x-location': '#/components/schemas/institution',
  'x-schema-type': 'all',
};
const formats0 = require('ajv-formats/dist/formats').fullFormats.uri;
function validate21(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate21.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema6.required,
            parentSchema: schema6,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate21.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema6.properties.url.type,
                parentSchema: schema6.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate21.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema6.properties.name.type,
                  parentSchema: schema6.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate21.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema6.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate21.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema6.properties.homepage.type,
                        parentSchema: schema6.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate21.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema6.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate21.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema6.properties.api.type,
                          parentSchema: schema6.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate21.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema6.properties.apiToken.type,
                        parentSchema: schema6.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate21.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema6.type,
          parentSchema: schema6,
          data,
        },
      ];
      return false;
    }
  }
  validate21.errors = vErrors;
  return errors === 0;
}
exports.validateInstitutionId = validate22;
const schema7 = {
  type: 'string',
  format: 'uuid',
  'x-standalone': false,
  'x-name': 'InstitutionId',
  'x-location': '#/components/parameters/institution_id/schema',
  'x-schema-type': 'all',
};
const formats4 = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
function validate22(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats4.test(data)) {
          validate22.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uuid' },
              message: 'must match format "' + 'uuid' + '"',
              schema: 'uuid',
              parentSchema: schema7,
              data,
            },
          ];
          return false;
        }
      } else {
        validate22.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema7.type,
            parentSchema: schema7,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate22.errors = vErrors;
  return errors === 0;
}
exports.validateURL = validate23;
const schema8 = {
  type: 'string',
  format: 'uri',
  'x-standalone': false,
  'x-name': 'URL',
  'x-location': '#/components/parameters/url/schema',
  'x-schema-type': 'all',
};
function validate23(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats0(data)) {
          validate23.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uri' },
              message: 'must match format "' + 'uri' + '"',
              schema: 'uri',
              parentSchema: schema8,
              data,
            },
          ];
          return false;
        }
      } else {
        validate23.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema8.type,
            parentSchema: schema8,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate23.errors = vErrors;
  return errors === 0;
}
exports.validateListInstitutionsResponse200 = validate24;
const schema9 = {
  type: 'array',
  items: {
    title: 'Institution',
    type: 'object',
    properties: {
      url: { type: 'string', readOnly: true },
      name: { type: 'string' },
      homepage: { type: 'string', format: 'uri' },
      api: { type: 'string', format: 'uri' },
      apiToken: { type: 'string', writeOnly: true },
    },
    required: ['url'],
  },
  'x-standalone': false,
  'x-name': 'listInstitutionsResponse200',
  'x-location': '#/paths//institutions/get/responses/200/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate24(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (Array.isArray(data)) {
      var valid0 = true;
      const len0 = data.length;
      for (let i0 = 0; i0 < len0; i0++) {
        let data0 = data[i0];
        const _errs1 = errors;
        if (errors === _errs1) {
          if (data0 && typeof data0 == 'object' && !Array.isArray(data0)) {
            let missing0;
            if (data0.url === undefined && (missing0 = 'url')) {
              validate24.errors = [
                {
                  instancePath: instancePath + '/' + i0,
                  schemaPath: '#/items/required',
                  keyword: 'required',
                  params: { missingProperty: missing0 },
                  message: "must have required property '" + missing0 + "'",
                  schema: schema9.items.required,
                  parentSchema: schema9.items,
                  data: data0,
                },
              ];
              return false;
            } else {
              if (data0.url !== undefined) {
                let data1 = data0.url;
                const _errs3 = errors;
                if (typeof data1 !== 'string') {
                  validate24.errors = [
                    {
                      instancePath: instancePath + '/' + i0 + '/url',
                      schemaPath: '#/items/properties/url/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema9.items.properties.url.type,
                      parentSchema: schema9.items.properties.url,
                      data: data1,
                    },
                  ];
                  return false;
                }
                var valid1 = _errs3 === errors;
              } else {
                var valid1 = true;
              }
              if (valid1) {
                if (data0.name !== undefined) {
                  let data2 = data0.name;
                  const _errs5 = errors;
                  if (typeof data2 !== 'string') {
                    validate24.errors = [
                      {
                        instancePath: instancePath + '/' + i0 + '/name',
                        schemaPath: '#/items/properties/name/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema9.items.properties.name.type,
                        parentSchema: schema9.items.properties.name,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                  var valid1 = _errs5 === errors;
                } else {
                  var valid1 = true;
                }
                if (valid1) {
                  if (data0.homepage !== undefined) {
                    let data3 = data0.homepage;
                    const _errs7 = errors;
                    if (errors === _errs7) {
                      if (errors === _errs7) {
                        if (typeof data3 === 'string') {
                          if (!formats0(data3)) {
                            validate24.errors = [
                              {
                                instancePath: instancePath + '/' + i0 + '/homepage',
                                schemaPath: '#/items/properties/homepage/format',
                                keyword: 'format',
                                params: { format: 'uri' },
                                message: 'must match format "' + 'uri' + '"',
                                schema: 'uri',
                                parentSchema: schema9.items.properties.homepage,
                                data: data3,
                              },
                            ];
                            return false;
                          }
                        } else {
                          validate24.errors = [
                            {
                              instancePath: instancePath + '/' + i0 + '/homepage',
                              schemaPath: '#/items/properties/homepage/type',
                              keyword: 'type',
                              params: { type: 'string' },
                              message: 'must be string',
                              schema: schema9.items.properties.homepage.type,
                              parentSchema: schema9.items.properties.homepage,
                              data: data3,
                            },
                          ];
                          return false;
                        }
                      }
                    }
                    var valid1 = _errs7 === errors;
                  } else {
                    var valid1 = true;
                  }
                  if (valid1) {
                    if (data0.api !== undefined) {
                      let data4 = data0.api;
                      const _errs9 = errors;
                      if (errors === _errs9) {
                        if (errors === _errs9) {
                          if (typeof data4 === 'string') {
                            if (!formats0(data4)) {
                              validate24.errors = [
                                {
                                  instancePath: instancePath + '/' + i0 + '/api',
                                  schemaPath: '#/items/properties/api/format',
                                  keyword: 'format',
                                  params: { format: 'uri' },
                                  message: 'must match format "' + 'uri' + '"',
                                  schema: 'uri',
                                  parentSchema: schema9.items.properties.api,
                                  data: data4,
                                },
                              ];
                              return false;
                            }
                          } else {
                            validate24.errors = [
                              {
                                instancePath: instancePath + '/' + i0 + '/api',
                                schemaPath: '#/items/properties/api/type',
                                keyword: 'type',
                                params: { type: 'string' },
                                message: 'must be string',
                                schema: schema9.items.properties.api.type,
                                parentSchema: schema9.items.properties.api,
                                data: data4,
                              },
                            ];
                            return false;
                          }
                        }
                      }
                      var valid1 = _errs9 === errors;
                    } else {
                      var valid1 = true;
                    }
                    if (valid1) {
                      if (data0.apiToken !== undefined) {
                        let data5 = data0.apiToken;
                        const _errs11 = errors;
                        if (typeof data5 !== 'string') {
                          validate24.errors = [
                            {
                              instancePath: instancePath + '/' + i0 + '/apiToken',
                              schemaPath: '#/items/properties/apiToken/type',
                              keyword: 'type',
                              params: { type: 'string' },
                              message: 'must be string',
                              schema: schema9.items.properties.apiToken.type,
                              parentSchema: schema9.items.properties.apiToken,
                              data: data5,
                            },
                          ];
                          return false;
                        }
                        var valid1 = _errs11 === errors;
                      } else {
                        var valid1 = true;
                      }
                    }
                  }
                }
              }
            }
          } else {
            validate24.errors = [
              {
                instancePath: instancePath + '/' + i0,
                schemaPath: '#/items/type',
                keyword: 'type',
                params: { type: 'object' },
                message: 'must be object',
                schema: schema9.items.type,
                parentSchema: schema9.items,
                data: data0,
              },
            ];
            return false;
          }
        }
        var valid0 = _errs1 === errors;
        if (!valid0) {
          break;
        }
      }
    } else {
      validate24.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'array' },
          message: 'must be array',
          schema: schema9.type,
          parentSchema: schema9,
          data,
        },
      ];
      return false;
    }
  }
  validate24.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionBody = validate25;
const schema10 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'createInstitutionBody',
  'x-location': '#/paths//institutions/post/requestBody/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate25(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate25.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema10.required,
            parentSchema: schema10,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate25.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema10.properties.url.type,
                parentSchema: schema10.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate25.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema10.properties.name.type,
                  parentSchema: schema10.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate25.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema10.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate25.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema10.properties.homepage.type,
                        parentSchema: schema10.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate25.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema10.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate25.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema10.properties.api.type,
                          parentSchema: schema10.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate25.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema10.properties.apiToken.type,
                        parentSchema: schema10.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate25.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema10.type,
          parentSchema: schema10,
          data,
        },
      ];
      return false;
    }
  }
  validate25.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionResponse201 = validate26;
const schema11 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'createInstitutionResponse201',
  'x-location':
    '#/paths//institutions/post/responses/201/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate26(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate26.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema11.required,
            parentSchema: schema11,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate26.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema11.properties.url.type,
                parentSchema: schema11.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate26.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema11.properties.name.type,
                  parentSchema: schema11.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate26.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema11.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate26.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema11.properties.homepage.type,
                        parentSchema: schema11.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate26.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema11.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate26.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema11.properties.api.type,
                          parentSchema: schema11.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate26.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema11.properties.apiToken.type,
                        parentSchema: schema11.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate26.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema11.type,
          parentSchema: schema11,
          data,
        },
      ];
      return false;
    }
  }
  validate26.errors = vErrors;
  return errors === 0;
}
exports.validateGetInstitutionResponse200 = validate27;
const schema12 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'getInstitutionResponse200',
  'x-location':
    '#/paths//institutions/{institution_id}/get/responses/200/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate27(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate27.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema12.required,
            parentSchema: schema12,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate27.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema12.properties.url.type,
                parentSchema: schema12.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate27.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema12.properties.name.type,
                  parentSchema: schema12.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate27.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema12.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate27.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema12.properties.homepage.type,
                        parentSchema: schema12.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate27.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema12.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate27.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema12.properties.api.type,
                          parentSchema: schema12.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate27.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema12.properties.apiToken.type,
                        parentSchema: schema12.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate27.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema12.type,
          parentSchema: schema12,
          data,
        },
      ];
      return false;
    }
  }
  validate27.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionBody = validate28;
const schema13 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'updateInstitutionBody',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/requestBody/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate28(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate28.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema13.required,
            parentSchema: schema13,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate28.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema13.properties.url.type,
                parentSchema: schema13.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate28.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema13.properties.name.type,
                  parentSchema: schema13.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate28.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema13.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate28.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema13.properties.homepage.type,
                        parentSchema: schema13.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate28.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema13.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate28.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema13.properties.api.type,
                          parentSchema: schema13.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate28.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema13.properties.apiToken.type,
                        parentSchema: schema13.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate28.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema13.type,
          parentSchema: schema13,
          data,
        },
      ];
      return false;
    }
  }
  validate28.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionResponse200 = validate29;
const schema14 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'updateInstitutionResponse200',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/responses/200/content/application/json/schema',
  'x-schema-type': 'all',
};
function validate29(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate29.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema14.required,
            parentSchema: schema14,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate29.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema14.properties.url.type,
                parentSchema: schema14.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate29.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema14.properties.name.type,
                  parentSchema: schema14.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate29.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema14.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate29.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema14.properties.homepage.type,
                        parentSchema: schema14.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate29.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema14.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate29.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema14.properties.api.type,
                          parentSchema: schema14.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.apiToken !== undefined) {
                  let data4 = data.apiToken;
                  const _errs9 = errors;
                  if (typeof data4 !== 'string') {
                    validate29.errors = [
                      {
                        instancePath: instancePath + '/apiToken',
                        schemaPath: '#/properties/apiToken/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema14.properties.apiToken.type,
                        parentSchema: schema14.properties.apiToken,
                        data: data4,
                      },
                    ];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
              }
            }
          }
        }
      }
    } else {
      validate29.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema14.type,
          parentSchema: schema14,
          data,
        },
      ];
      return false;
    }
  }
  validate29.errors = vErrors;
  return errors === 0;
}
exports.validateInstitutionRequest = validate30;
const schema15 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': true,
  'x-name': 'InstitutionRequest',
  'x-location': '#/components/schemas/institution_request',
  'x-schema-type': 'request',
};
function validate30(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate30.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema15.properties.name.type,
              parentSchema: schema15.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate30.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema15.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate30.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema15.properties.homepage.type,
                    parentSchema: schema15.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate30.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema15.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate30.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema15.properties.api.type,
                      parentSchema: schema15.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate30.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema15.properties.apiToken.type,
                    parentSchema: schema15.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate30.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema15.type,
          parentSchema: schema15,
          data,
        },
      ];
      return false;
    }
  }
  validate30.errors = vErrors;
  return errors === 0;
}
exports.validateInstitutionResponse = validate31;
const schema16 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': true,
  'x-name': 'InstitutionResponse',
  'x-location': '#/components/schemas/institution_response',
  'x-schema-type': 'response',
};
function validate31(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate31.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema16.required,
            parentSchema: schema16,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate31.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema16.properties.url.type,
                parentSchema: schema16.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate31.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema16.properties.name.type,
                  parentSchema: schema16.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate31.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema16.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate31.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema16.properties.homepage.type,
                        parentSchema: schema16.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate31.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema16.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate31.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema16.properties.api.type,
                          parentSchema: schema16.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate31.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema16.type,
          parentSchema: schema16,
          data,
        },
      ];
      return false;
    }
  }
  validate31.errors = vErrors;
  return errors === 0;
}
exports.validateInstitutionIdRequest = validate32;
const schema17 = {
  type: 'string',
  format: 'uuid',
  'x-standalone': false,
  'x-name': 'InstitutionIdRequest',
  'x-location': '#/components/parameters/institution_id/schema_request',
  'x-schema-type': 'request',
};
function validate32(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats4.test(data)) {
          validate32.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uuid' },
              message: 'must match format "' + 'uuid' + '"',
              schema: 'uuid',
              parentSchema: schema17,
              data,
            },
          ];
          return false;
        }
      } else {
        validate32.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema17.type,
            parentSchema: schema17,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate32.errors = vErrors;
  return errors === 0;
}
exports.validateInstitutionIdResponse = validate33;
const schema18 = {
  type: 'string',
  format: 'uuid',
  'x-standalone': false,
  'x-name': 'InstitutionIdResponse',
  'x-location': '#/components/parameters/institution_id/schema_response',
  'x-schema-type': 'response',
};
function validate33(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats4.test(data)) {
          validate33.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uuid' },
              message: 'must match format "' + 'uuid' + '"',
              schema: 'uuid',
              parentSchema: schema18,
              data,
            },
          ];
          return false;
        }
      } else {
        validate33.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema18.type,
            parentSchema: schema18,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate33.errors = vErrors;
  return errors === 0;
}
exports.validateURLRequest = validate34;
const schema19 = {
  type: 'string',
  format: 'uri',
  'x-standalone': false,
  'x-name': 'URLRequest',
  'x-location': '#/components/parameters/url/schema_request',
  'x-schema-type': 'request',
};
function validate34(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats0(data)) {
          validate34.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uri' },
              message: 'must match format "' + 'uri' + '"',
              schema: 'uri',
              parentSchema: schema19,
              data,
            },
          ];
          return false;
        }
      } else {
        validate34.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema19.type,
            parentSchema: schema19,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate34.errors = vErrors;
  return errors === 0;
}
exports.validateURLResponse = validate35;
const schema20 = {
  type: 'string',
  format: 'uri',
  'x-standalone': false,
  'x-name': 'URLResponse',
  'x-location': '#/components/parameters/url/schema_response',
  'x-schema-type': 'response',
};
function validate35(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (errors === 0) {
      if (typeof data === 'string') {
        if (!formats0(data)) {
          validate35.errors = [
            {
              instancePath,
              schemaPath: '#/format',
              keyword: 'format',
              params: { format: 'uri' },
              message: 'must match format "' + 'uri' + '"',
              schema: 'uri',
              parentSchema: schema20,
              data,
            },
          ];
          return false;
        }
      } else {
        validate35.errors = [
          {
            instancePath,
            schemaPath: '#/type',
            keyword: 'type',
            params: { type: 'string' },
            message: 'must be string',
            schema: schema20.type,
            parentSchema: schema20,
            data,
          },
        ];
        return false;
      }
    }
  }
  validate35.errors = vErrors;
  return errors === 0;
}
exports.validateListInstitutionsResponse200Request = validate36;
const schema21 = {
  type: 'array',
  items: {
    title: 'Institution',
    type: 'object',
    properties: {
      name: { type: 'string' },
      homepage: { type: 'string', format: 'uri' },
      api: { type: 'string', format: 'uri' },
      apiToken: { type: 'string', writeOnly: true },
    },
    required: [],
  },
  'x-standalone': false,
  'x-name': 'listInstitutionsResponse200Request',
  'x-location':
    '#/paths//institutions/get/responses/200/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate36(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (Array.isArray(data)) {
      var valid0 = true;
      const len0 = data.length;
      for (let i0 = 0; i0 < len0; i0++) {
        let data0 = data[i0];
        const _errs1 = errors;
        if (errors === _errs1) {
          if (data0 && typeof data0 == 'object' && !Array.isArray(data0)) {
            if (data0.name !== undefined) {
              let data1 = data0.name;
              const _errs3 = errors;
              if (typeof data1 !== 'string') {
                validate36.errors = [
                  {
                    instancePath: instancePath + '/' + i0 + '/name',
                    schemaPath: '#/items/properties/name/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema21.items.properties.name.type,
                    parentSchema: schema21.items.properties.name,
                    data: data1,
                  },
                ];
                return false;
              }
              var valid1 = _errs3 === errors;
            } else {
              var valid1 = true;
            }
            if (valid1) {
              if (data0.homepage !== undefined) {
                let data2 = data0.homepage;
                const _errs5 = errors;
                if (errors === _errs5) {
                  if (errors === _errs5) {
                    if (typeof data2 === 'string') {
                      if (!formats0(data2)) {
                        validate36.errors = [
                          {
                            instancePath: instancePath + '/' + i0 + '/homepage',
                            schemaPath: '#/items/properties/homepage/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema21.items.properties.homepage,
                            data: data2,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate36.errors = [
                        {
                          instancePath: instancePath + '/' + i0 + '/homepage',
                          schemaPath: '#/items/properties/homepage/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema21.items.properties.homepage.type,
                          parentSchema: schema21.items.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid1 = _errs5 === errors;
              } else {
                var valid1 = true;
              }
              if (valid1) {
                if (data0.api !== undefined) {
                  let data3 = data0.api;
                  const _errs7 = errors;
                  if (errors === _errs7) {
                    if (errors === _errs7) {
                      if (typeof data3 === 'string') {
                        if (!formats0(data3)) {
                          validate36.errors = [
                            {
                              instancePath: instancePath + '/' + i0 + '/api',
                              schemaPath: '#/items/properties/api/format',
                              keyword: 'format',
                              params: { format: 'uri' },
                              message: 'must match format "' + 'uri' + '"',
                              schema: 'uri',
                              parentSchema: schema21.items.properties.api,
                              data: data3,
                            },
                          ];
                          return false;
                        }
                      } else {
                        validate36.errors = [
                          {
                            instancePath: instancePath + '/' + i0 + '/api',
                            schemaPath: '#/items/properties/api/type',
                            keyword: 'type',
                            params: { type: 'string' },
                            message: 'must be string',
                            schema: schema21.items.properties.api.type,
                            parentSchema: schema21.items.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    }
                  }
                  var valid1 = _errs7 === errors;
                } else {
                  var valid1 = true;
                }
                if (valid1) {
                  if (data0.apiToken !== undefined) {
                    let data4 = data0.apiToken;
                    const _errs9 = errors;
                    if (typeof data4 !== 'string') {
                      validate36.errors = [
                        {
                          instancePath: instancePath + '/' + i0 + '/apiToken',
                          schemaPath: '#/items/properties/apiToken/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema21.items.properties.apiToken.type,
                          parentSchema: schema21.items.properties.apiToken,
                          data: data4,
                        },
                      ];
                      return false;
                    }
                    var valid1 = _errs9 === errors;
                  } else {
                    var valid1 = true;
                  }
                }
              }
            }
          } else {
            validate36.errors = [
              {
                instancePath: instancePath + '/' + i0,
                schemaPath: '#/items/type',
                keyword: 'type',
                params: { type: 'object' },
                message: 'must be object',
                schema: schema21.items.type,
                parentSchema: schema21.items,
                data: data0,
              },
            ];
            return false;
          }
        }
        var valid0 = _errs1 === errors;
        if (!valid0) {
          break;
        }
      }
    } else {
      validate36.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'array' },
          message: 'must be array',
          schema: schema21.type,
          parentSchema: schema21,
          data,
        },
      ];
      return false;
    }
  }
  validate36.errors = vErrors;
  return errors === 0;
}
exports.validateListInstitutionsResponse200Response = validate37;
const schema22 = {
  type: 'array',
  items: {
    title: 'Institution',
    type: 'object',
    properties: {
      url: { type: 'string', readOnly: true },
      name: { type: 'string' },
      homepage: { type: 'string', format: 'uri' },
      api: { type: 'string', format: 'uri' },
    },
    required: ['url'],
  },
  'x-standalone': false,
  'x-name': 'listInstitutionsResponse200Response',
  'x-location':
    '#/paths//institutions/get/responses/200/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate37(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (Array.isArray(data)) {
      var valid0 = true;
      const len0 = data.length;
      for (let i0 = 0; i0 < len0; i0++) {
        let data0 = data[i0];
        const _errs1 = errors;
        if (errors === _errs1) {
          if (data0 && typeof data0 == 'object' && !Array.isArray(data0)) {
            let missing0;
            if (data0.url === undefined && (missing0 = 'url')) {
              validate37.errors = [
                {
                  instancePath: instancePath + '/' + i0,
                  schemaPath: '#/items/required',
                  keyword: 'required',
                  params: { missingProperty: missing0 },
                  message: "must have required property '" + missing0 + "'",
                  schema: schema22.items.required,
                  parentSchema: schema22.items,
                  data: data0,
                },
              ];
              return false;
            } else {
              if (data0.url !== undefined) {
                let data1 = data0.url;
                const _errs3 = errors;
                if (typeof data1 !== 'string') {
                  validate37.errors = [
                    {
                      instancePath: instancePath + '/' + i0 + '/url',
                      schemaPath: '#/items/properties/url/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema22.items.properties.url.type,
                      parentSchema: schema22.items.properties.url,
                      data: data1,
                    },
                  ];
                  return false;
                }
                var valid1 = _errs3 === errors;
              } else {
                var valid1 = true;
              }
              if (valid1) {
                if (data0.name !== undefined) {
                  let data2 = data0.name;
                  const _errs5 = errors;
                  if (typeof data2 !== 'string') {
                    validate37.errors = [
                      {
                        instancePath: instancePath + '/' + i0 + '/name',
                        schemaPath: '#/items/properties/name/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema22.items.properties.name.type,
                        parentSchema: schema22.items.properties.name,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                  var valid1 = _errs5 === errors;
                } else {
                  var valid1 = true;
                }
                if (valid1) {
                  if (data0.homepage !== undefined) {
                    let data3 = data0.homepage;
                    const _errs7 = errors;
                    if (errors === _errs7) {
                      if (errors === _errs7) {
                        if (typeof data3 === 'string') {
                          if (!formats0(data3)) {
                            validate37.errors = [
                              {
                                instancePath: instancePath + '/' + i0 + '/homepage',
                                schemaPath: '#/items/properties/homepage/format',
                                keyword: 'format',
                                params: { format: 'uri' },
                                message: 'must match format "' + 'uri' + '"',
                                schema: 'uri',
                                parentSchema: schema22.items.properties.homepage,
                                data: data3,
                              },
                            ];
                            return false;
                          }
                        } else {
                          validate37.errors = [
                            {
                              instancePath: instancePath + '/' + i0 + '/homepage',
                              schemaPath: '#/items/properties/homepage/type',
                              keyword: 'type',
                              params: { type: 'string' },
                              message: 'must be string',
                              schema: schema22.items.properties.homepage.type,
                              parentSchema: schema22.items.properties.homepage,
                              data: data3,
                            },
                          ];
                          return false;
                        }
                      }
                    }
                    var valid1 = _errs7 === errors;
                  } else {
                    var valid1 = true;
                  }
                  if (valid1) {
                    if (data0.api !== undefined) {
                      let data4 = data0.api;
                      const _errs9 = errors;
                      if (errors === _errs9) {
                        if (errors === _errs9) {
                          if (typeof data4 === 'string') {
                            if (!formats0(data4)) {
                              validate37.errors = [
                                {
                                  instancePath: instancePath + '/' + i0 + '/api',
                                  schemaPath: '#/items/properties/api/format',
                                  keyword: 'format',
                                  params: { format: 'uri' },
                                  message: 'must match format "' + 'uri' + '"',
                                  schema: 'uri',
                                  parentSchema: schema22.items.properties.api,
                                  data: data4,
                                },
                              ];
                              return false;
                            }
                          } else {
                            validate37.errors = [
                              {
                                instancePath: instancePath + '/' + i0 + '/api',
                                schemaPath: '#/items/properties/api/type',
                                keyword: 'type',
                                params: { type: 'string' },
                                message: 'must be string',
                                schema: schema22.items.properties.api.type,
                                parentSchema: schema22.items.properties.api,
                                data: data4,
                              },
                            ];
                            return false;
                          }
                        }
                      }
                      var valid1 = _errs9 === errors;
                    } else {
                      var valid1 = true;
                    }
                  }
                }
              }
            }
          } else {
            validate37.errors = [
              {
                instancePath: instancePath + '/' + i0,
                schemaPath: '#/items/type',
                keyword: 'type',
                params: { type: 'object' },
                message: 'must be object',
                schema: schema22.items.type,
                parentSchema: schema22.items,
                data: data0,
              },
            ];
            return false;
          }
        }
        var valid0 = _errs1 === errors;
        if (!valid0) {
          break;
        }
      }
    } else {
      validate37.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'array' },
          message: 'must be array',
          schema: schema22.type,
          parentSchema: schema22,
          data,
        },
      ];
      return false;
    }
  }
  validate37.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionBodyRequest = validate38;
const schema23 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': false,
  'x-name': 'createInstitutionBodyRequest',
  'x-location':
    '#/paths//institutions/post/requestBody/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate38(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate38.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema23.properties.name.type,
              parentSchema: schema23.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate38.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema23.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate38.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema23.properties.homepage.type,
                    parentSchema: schema23.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate38.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema23.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate38.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema23.properties.api.type,
                      parentSchema: schema23.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate38.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema23.properties.apiToken.type,
                    parentSchema: schema23.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate38.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema23.type,
          parentSchema: schema23,
          data,
        },
      ];
      return false;
    }
  }
  validate38.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionBodyResponse = validate39;
const schema24 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'createInstitutionBodyResponse',
  'x-location':
    '#/paths//institutions/post/requestBody/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate39(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate39.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema24.required,
            parentSchema: schema24,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate39.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema24.properties.url.type,
                parentSchema: schema24.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate39.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema24.properties.name.type,
                  parentSchema: schema24.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate39.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema24.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate39.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema24.properties.homepage.type,
                        parentSchema: schema24.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate39.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema24.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate39.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema24.properties.api.type,
                          parentSchema: schema24.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate39.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema24.type,
          parentSchema: schema24,
          data,
        },
      ];
      return false;
    }
  }
  validate39.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionResponse201Request = validate40;
const schema25 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': false,
  'x-name': 'createInstitutionResponse201Request',
  'x-location':
    '#/paths//institutions/post/responses/201/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate40(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate40.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema25.properties.name.type,
              parentSchema: schema25.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate40.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema25.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate40.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema25.properties.homepage.type,
                    parentSchema: schema25.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate40.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema25.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate40.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema25.properties.api.type,
                      parentSchema: schema25.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate40.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema25.properties.apiToken.type,
                    parentSchema: schema25.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate40.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema25.type,
          parentSchema: schema25,
          data,
        },
      ];
      return false;
    }
  }
  validate40.errors = vErrors;
  return errors === 0;
}
exports.validateCreateInstitutionResponse201Response = validate41;
const schema26 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'createInstitutionResponse201Response',
  'x-location':
    '#/paths//institutions/post/responses/201/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate41(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate41.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema26.required,
            parentSchema: schema26,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate41.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema26.properties.url.type,
                parentSchema: schema26.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate41.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema26.properties.name.type,
                  parentSchema: schema26.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate41.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema26.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate41.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema26.properties.homepage.type,
                        parentSchema: schema26.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate41.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema26.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate41.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema26.properties.api.type,
                          parentSchema: schema26.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate41.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema26.type,
          parentSchema: schema26,
          data,
        },
      ];
      return false;
    }
  }
  validate41.errors = vErrors;
  return errors === 0;
}
exports.validateGetInstitutionResponse200Request = validate42;
const schema27 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': false,
  'x-name': 'getInstitutionResponse200Request',
  'x-location':
    '#/paths//institutions/{institution_id}/get/responses/200/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate42(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate42.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema27.properties.name.type,
              parentSchema: schema27.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate42.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema27.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate42.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema27.properties.homepage.type,
                    parentSchema: schema27.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate42.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema27.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate42.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema27.properties.api.type,
                      parentSchema: schema27.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate42.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema27.properties.apiToken.type,
                    parentSchema: schema27.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate42.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema27.type,
          parentSchema: schema27,
          data,
        },
      ];
      return false;
    }
  }
  validate42.errors = vErrors;
  return errors === 0;
}
exports.validateGetInstitutionResponse200Response = validate43;
const schema28 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'getInstitutionResponse200Response',
  'x-location':
    '#/paths//institutions/{institution_id}/get/responses/200/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate43(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate43.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema28.required,
            parentSchema: schema28,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate43.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema28.properties.url.type,
                parentSchema: schema28.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate43.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema28.properties.name.type,
                  parentSchema: schema28.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate43.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema28.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate43.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema28.properties.homepage.type,
                        parentSchema: schema28.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate43.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema28.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate43.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema28.properties.api.type,
                          parentSchema: schema28.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate43.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema28.type,
          parentSchema: schema28,
          data,
        },
      ];
      return false;
    }
  }
  validate43.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionBodyRequest = validate44;
const schema29 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': false,
  'x-name': 'updateInstitutionBodyRequest',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/requestBody/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate44(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate44.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema29.properties.name.type,
              parentSchema: schema29.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate44.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema29.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate44.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema29.properties.homepage.type,
                    parentSchema: schema29.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate44.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema29.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate44.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema29.properties.api.type,
                      parentSchema: schema29.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate44.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema29.properties.apiToken.type,
                    parentSchema: schema29.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate44.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema29.type,
          parentSchema: schema29,
          data,
        },
      ];
      return false;
    }
  }
  validate44.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionBodyResponse = validate45;
const schema30 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'updateInstitutionBodyResponse',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/requestBody/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate45(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate45.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema30.required,
            parentSchema: schema30,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate45.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema30.properties.url.type,
                parentSchema: schema30.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate45.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema30.properties.name.type,
                  parentSchema: schema30.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate45.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema30.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate45.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema30.properties.homepage.type,
                        parentSchema: schema30.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate45.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema30.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate45.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema30.properties.api.type,
                          parentSchema: schema30.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate45.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema30.type,
          parentSchema: schema30,
          data,
        },
      ];
      return false;
    }
  }
  validate45.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionResponse200Request = validate46;
const schema31 = {
  title: 'Institution',
  type: 'object',
  properties: {
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
    apiToken: { type: 'string', writeOnly: true },
  },
  required: [],
  'x-standalone': false,
  'x-name': 'updateInstitutionResponse200Request',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/responses/200/content/application/json/schema_request',
  'x-schema-type': 'request',
};
function validate46(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      if (data.name !== undefined) {
        let data0 = data.name;
        const _errs1 = errors;
        if (typeof data0 !== 'string') {
          validate46.errors = [
            {
              instancePath: instancePath + '/name',
              schemaPath: '#/properties/name/type',
              keyword: 'type',
              params: { type: 'string' },
              message: 'must be string',
              schema: schema31.properties.name.type,
              parentSchema: schema31.properties.name,
              data: data0,
            },
          ];
          return false;
        }
        var valid0 = _errs1 === errors;
      } else {
        var valid0 = true;
      }
      if (valid0) {
        if (data.homepage !== undefined) {
          let data1 = data.homepage;
          const _errs3 = errors;
          if (errors === _errs3) {
            if (errors === _errs3) {
              if (typeof data1 === 'string') {
                if (!formats0(data1)) {
                  validate46.errors = [
                    {
                      instancePath: instancePath + '/homepage',
                      schemaPath: '#/properties/homepage/format',
                      keyword: 'format',
                      params: { format: 'uri' },
                      message: 'must match format "' + 'uri' + '"',
                      schema: 'uri',
                      parentSchema: schema31.properties.homepage,
                      data: data1,
                    },
                  ];
                  return false;
                }
              } else {
                validate46.errors = [
                  {
                    instancePath: instancePath + '/homepage',
                    schemaPath: '#/properties/homepage/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema31.properties.homepage.type,
                    parentSchema: schema31.properties.homepage,
                    data: data1,
                  },
                ];
                return false;
              }
            }
          }
          var valid0 = _errs3 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.api !== undefined) {
            let data2 = data.api;
            const _errs5 = errors;
            if (errors === _errs5) {
              if (errors === _errs5) {
                if (typeof data2 === 'string') {
                  if (!formats0(data2)) {
                    validate46.errors = [
                      {
                        instancePath: instancePath + '/api',
                        schemaPath: '#/properties/api/format',
                        keyword: 'format',
                        params: { format: 'uri' },
                        message: 'must match format "' + 'uri' + '"',
                        schema: 'uri',
                        parentSchema: schema31.properties.api,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                } else {
                  validate46.errors = [
                    {
                      instancePath: instancePath + '/api',
                      schemaPath: '#/properties/api/type',
                      keyword: 'type',
                      params: { type: 'string' },
                      message: 'must be string',
                      schema: schema31.properties.api.type,
                      parentSchema: schema31.properties.api,
                      data: data2,
                    },
                  ];
                  return false;
                }
              }
            }
            var valid0 = _errs5 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.apiToken !== undefined) {
              let data3 = data.apiToken;
              const _errs7 = errors;
              if (typeof data3 !== 'string') {
                validate46.errors = [
                  {
                    instancePath: instancePath + '/apiToken',
                    schemaPath: '#/properties/apiToken/type',
                    keyword: 'type',
                    params: { type: 'string' },
                    message: 'must be string',
                    schema: schema31.properties.apiToken.type,
                    parentSchema: schema31.properties.apiToken,
                    data: data3,
                  },
                ];
                return false;
              }
              var valid0 = _errs7 === errors;
            } else {
              var valid0 = true;
            }
          }
        }
      }
    } else {
      validate46.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema31.type,
          parentSchema: schema31,
          data,
        },
      ];
      return false;
    }
  }
  validate46.errors = vErrors;
  return errors === 0;
}
exports.validateUpdateInstitutionResponse200Response = validate47;
const schema32 = {
  title: 'Institution',
  type: 'object',
  properties: {
    url: { type: 'string', readOnly: true },
    name: { type: 'string' },
    homepage: { type: 'string', format: 'uri' },
    api: { type: 'string', format: 'uri' },
  },
  required: ['url'],
  'x-standalone': false,
  'x-name': 'updateInstitutionResponse200Response',
  'x-location':
    '#/paths//institutions/{institution_id}/patch/responses/200/content/application/json/schema_response',
  'x-schema-type': 'response',
};
function validate47(
  data,
  { instancePath = '', parentData, parentDataProperty, rootData = data } = {},
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == 'object' && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = 'url')) {
        validate47.errors = [
          {
            instancePath,
            schemaPath: '#/required',
            keyword: 'required',
            params: { missingProperty: missing0 },
            message: "must have required property '" + missing0 + "'",
            schema: schema32.required,
            parentSchema: schema32,
            data,
          },
        ];
        return false;
      } else {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs1 = errors;
          if (typeof data0 !== 'string') {
            validate47.errors = [
              {
                instancePath: instancePath + '/url',
                schemaPath: '#/properties/url/type',
                keyword: 'type',
                params: { type: 'string' },
                message: 'must be string',
                schema: schema32.properties.url.type,
                parentSchema: schema32.properties.url,
                data: data0,
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.name !== undefined) {
            let data1 = data.name;
            const _errs3 = errors;
            if (typeof data1 !== 'string') {
              validate47.errors = [
                {
                  instancePath: instancePath + '/name',
                  schemaPath: '#/properties/name/type',
                  keyword: 'type',
                  params: { type: 'string' },
                  message: 'must be string',
                  schema: schema32.properties.name.type,
                  parentSchema: schema32.properties.name,
                  data: data1,
                },
              ];
              return false;
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.homepage !== undefined) {
              let data2 = data.homepage;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === 'string') {
                    if (!formats0(data2)) {
                      validate47.errors = [
                        {
                          instancePath: instancePath + '/homepage',
                          schemaPath: '#/properties/homepage/format',
                          keyword: 'format',
                          params: { format: 'uri' },
                          message: 'must match format "' + 'uri' + '"',
                          schema: 'uri',
                          parentSchema: schema32.properties.homepage,
                          data: data2,
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate47.errors = [
                      {
                        instancePath: instancePath + '/homepage',
                        schemaPath: '#/properties/homepage/type',
                        keyword: 'type',
                        params: { type: 'string' },
                        message: 'must be string',
                        schema: schema32.properties.homepage.type,
                        parentSchema: schema32.properties.homepage,
                        data: data2,
                      },
                    ];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.api !== undefined) {
                let data3 = data.api;
                const _errs7 = errors;
                if (errors === _errs7) {
                  if (errors === _errs7) {
                    if (typeof data3 === 'string') {
                      if (!formats0(data3)) {
                        validate47.errors = [
                          {
                            instancePath: instancePath + '/api',
                            schemaPath: '#/properties/api/format',
                            keyword: 'format',
                            params: { format: 'uri' },
                            message: 'must match format "' + 'uri' + '"',
                            schema: 'uri',
                            parentSchema: schema32.properties.api,
                            data: data3,
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate47.errors = [
                        {
                          instancePath: instancePath + '/api',
                          schemaPath: '#/properties/api/type',
                          keyword: 'type',
                          params: { type: 'string' },
                          message: 'must be string',
                          schema: schema32.properties.api.type,
                          parentSchema: schema32.properties.api,
                          data: data3,
                        },
                      ];
                      return false;
                    }
                  }
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
            }
          }
        }
      }
    } else {
      validate47.errors = [
        {
          instancePath,
          schemaPath: '#/type',
          keyword: 'type',
          params: { type: 'object' },
          message: 'must be object',
          schema: schema32.type,
          parentSchema: schema32,
          data,
        },
      ];
      return false;
    }
  }
  validate47.errors = vErrors;
  return errors === 0;
}
