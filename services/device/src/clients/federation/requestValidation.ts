/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to listInstitutions()
 */
export function validateListInstitutionsInput() {
  return true;
}

/**
 * This function validates the outputs of listInstitutions()
 */
export function validateListInstitutionsOutput(
  response: ResponseData,
): response is Signatures.ListInstitutionsResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateListInstitutionsResponse200Response(response.body)) {
      (validateListInstitutionsOutput as FunctionWithErrors).errors = (
        BasicValidation.validateListInstitutionsResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (validateListInstitutionsOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createInstitution()
 */
export function validateCreateInstitutionInput(body: Signatures.CreateInstitutionBody) {
  if (!BasicValidation.validateCreateInstitutionBodyRequest(body)) {
    (validateCreateInstitutionInput as FunctionWithErrors).errors = (
      BasicValidation.validateCreateInstitutionBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createInstitution()
 */
export function validateCreateInstitutionOutput(
  response: ResponseData,
): response is Signatures.CreateInstitutionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateCreateInstitutionResponse201Response(response.body)) {
      (validateCreateInstitutionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreateInstitutionResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (validateCreateInstitutionOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getInstitution()
 */
export function validateGetInstitutionInput(
  parameters: Signatures.GetInstitutionParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateInstitutionIdRequest(parameters['institution_id'])) {
      (validateGetInstitutionInput as FunctionWithErrors).errors = (
        BasicValidation.validateInstitutionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getInstitution()
 */
export function validateGetInstitutionOutput(
  response: ResponseData,
): response is Signatures.GetInstitutionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetInstitutionResponse200Response(response.body)) {
      (validateGetInstitutionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetInstitutionResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (validateGetInstitutionOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to updateInstitution()
 */
export function validateUpdateInstitutionInput(
  parameters: Signatures.UpdateInstitutionParameters,
  body: Signatures.UpdateInstitutionBody,
) {
  if (parameters) {
    if (!BasicValidation.validateInstitutionIdRequest(parameters['institution_id'])) {
      (validateUpdateInstitutionInput as FunctionWithErrors).errors = (
        BasicValidation.validateInstitutionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateUpdateInstitutionBodyRequest(body)) {
    (validateUpdateInstitutionInput as FunctionWithErrors).errors = (
      BasicValidation.validateUpdateInstitutionBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of updateInstitution()
 */
export function validateUpdateInstitutionOutput(
  response: ResponseData,
): response is Signatures.UpdateInstitutionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateUpdateInstitutionResponse200Response(response.body)) {
      (validateUpdateInstitutionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateInstitutionResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (validateUpdateInstitutionOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deleteInstitution()
 */
export function validateDeleteInstitutionInput(
  parameters: Signatures.DeleteInstitutionParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateInstitutionIdRequest(parameters['institution_id'])) {
      (validateDeleteInstitutionInput as FunctionWithErrors).errors = (
        BasicValidation.validateInstitutionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deleteInstitution()
 */
export function validateDeleteInstitutionOutput(
  response: ResponseData,
): response is Signatures.DeleteInstitutionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (validateDeleteInstitutionOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyGet()
 */
export function validateProxyGetInput(parameters: Signatures.ProxyGetParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyGetInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyGet()
 */
export function validateProxyGetOutput(
  response: ResponseData,
): response is Signatures.ProxyGetResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyGetOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyPost()
 */
export function validateProxyPostInput(parameters: Signatures.ProxyPostParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyPostInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyPost()
 */
export function validateProxyPostOutput(
  response: ResponseData,
): response is Signatures.ProxyPostResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyPostOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyPut()
 */
export function validateProxyPutInput(parameters: Signatures.ProxyPutParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyPutInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyPut()
 */
export function validateProxyPutOutput(
  response: ResponseData,
): response is Signatures.ProxyPutResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyPutOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyPatch()
 */
export function validateProxyPatchInput(parameters: Signatures.ProxyPatchParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyPatchInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyPatch()
 */
export function validateProxyPatchOutput(
  response: ResponseData,
): response is Signatures.ProxyPatchResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyPatchOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyDelete()
 */
export function validateProxyDeleteInput(parameters: Signatures.ProxyDeleteParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyDeleteInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyDelete()
 */
export function validateProxyDeleteOutput(
  response: ResponseData,
): response is Signatures.ProxyDeleteResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyDeleteOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyHead()
 */
export function validateProxyHeadInput(parameters: Signatures.ProxyHeadParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyHeadInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyHead()
 */
export function validateProxyHeadOutput(
  response: ResponseData,
): response is Signatures.ProxyHeadResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyHeadOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyOptions()
 */
export function validateProxyOptionsInput(parameters: Signatures.ProxyOptionsParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyOptionsInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyOptions()
 */
export function validateProxyOptionsOutput(
  response: ResponseData,
): response is Signatures.ProxyOptionsResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyOptionsOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to proxyTrace()
 */
export function validateProxyTraceInput(parameters: Signatures.ProxyTraceParameters) {
  if (parameters) {
    if (
      !BasicValidation.validateURLRequest(parameters['URL']) &&
      parameters['URL'] !== undefined
    ) {
      (validateProxyTraceInput as FunctionWithErrors).errors = (
        BasicValidation.validateURLRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  return true;
}

/**
 * This function validates the outputs of proxyTrace()
 */
export function validateProxyTraceOutput(
  response: ResponseData,
): response is Signatures.ProxyTraceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status >= 100 && response.status < 200) {
    return true;
  }

  if (response.status >= 200 && response.status < 300) {
    return true;
  }

  if (response.status >= 300 && response.status < 400) {
    return true;
  }

  if (response.status >= 400 && response.status < 500) {
    return true;
  }

  if (response.status >= 500 && response.status < 600) {
    return true;
  }

  (validateProxyTraceOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}
