/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/ban-ts-comment */
import * as Types from './types.js';
// @ts-ignore
import { type Require } from './types.js';

/**
 * Typing for the body of the request made by schedule()
 * @category schedule()
 */
export type ScheduleBody =
  | {
      /**
       * An experiment describes a set of devices and how they should be connected (potentially among other metadata).
       */
      Experiment: Types.Experiment<'request'>;
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: Types.Timeslot<'request'>;
      /**
       * If true, show only one timetable per device instead of one for all available physical devices.
       */
      Combined?: boolean;
      /**
       * (private) Show only devices of this institution. Give an error if a device of an other institution is requested.
       */
      onlyOwn?: boolean;
      [k: string]: unknown;
    }
  | undefined;

/**
 * Typing for all possible responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleResponse = ScheduleSuccessResponse | ScheduleErrorResponse;

/**
 * Typing for all successful responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleSuccessResponse = ScheduleResponse200;

/**
 * Typing for all error responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleErrorResponse =
  | ScheduleResponse400
  | ScheduleResponse401
  | ScheduleResponse403
  | ScheduleResponse404
  | ScheduleResponse422
  | ScheduleResponse500
  | ScheduleResponse503;

/**
 * Typing for a response with status 200 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    /**
     * ID of the device (or * if combined).
     */
    Device: string;
    /**
     * Array of booked times.
     */
    Booked: Types.Timeslot<'response'>[];
    /**
     * Array of free times.
     */
    Free: Types.Timeslot<'response'>[];
    [k: string]: unknown;
  }[];
}

/**
 * Typing for a response with status 400 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 422 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse422 extends Types.ErrorResponse {
  status: 422;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 500 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}
