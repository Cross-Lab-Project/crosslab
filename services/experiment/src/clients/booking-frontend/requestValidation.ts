/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to newBooking()
 */
export function validateNewBookingInput(body: Signatures.NewBookingBody) {
  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateNewBookingBodyRequest(body)) {
    (validateNewBookingInput as FunctionWithErrors).errors = (
      BasicValidation.validateNewBookingBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of newBooking()
 */
export function validateNewBookingOutput(
  response: ResponseData,
): response is Signatures.NewBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateNewBookingResponse200Response(response.body)) {
      (validateNewBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateNewBookingResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateNewBookingResponse500Response(response.body)) {
      (validateNewBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateNewBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateNewBookingOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to updateBooking()
 */
export function validateUpdateBookingInput(
  parameters: Signatures.UpdateBookingParameters,
  body: Signatures.UpdateBookingBody,
) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateUpdateBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (!BasicValidation.validateUpdateBookingBodyRequest(body)) {
    (validateUpdateBookingInput as FunctionWithErrors).errors = (
      BasicValidation.validateUpdateBookingBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of updateBooking()
 */
export function validateUpdateBookingOutput(
  response: ResponseData,
): response is Signatures.UpdateBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateUpdateBookingResponse200Response(response.body)) {
      (validateUpdateBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateBookingResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    if (!BasicValidation.validateUpdateBookingResponse400Response(response.body)) {
      (validateUpdateBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateBookingResponse400Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 423) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateUpdateBookingResponse500Response(response.body)) {
      (validateUpdateBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateUpdateBookingOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deleteBooking()
 */
export function validateDeleteBookingInput(
  parameters: Signatures.DeleteBookingParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateDeleteBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deleteBooking()
 */
export function validateDeleteBookingOutput(
  response: ResponseData,
): response is Signatures.DeleteBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 423) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateDeleteBookingResponse500Response(response.body)) {
      (validateDeleteBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateDeleteBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateDeleteBookingOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getBooking()
 */
export function validateGetBookingInput(parameters: Signatures.GetBookingParameters) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateGetBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getBooking()
 */
export function validateGetBookingOutput(
  response: ResponseData,
): response is Signatures.GetBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetBookingResponse200Response(response.body)) {
      (validateGetBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetBookingResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateGetBookingResponse500Response(response.body)) {
      (validateGetBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateGetBookingOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to destroyBooking()
 */
export function validateDestroyBookingInput(
  parameters: Signatures.DestroyBookingParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateDestroyBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of destroyBooking()
 */
export function validateDestroyBookingOutput(
  response: ResponseData,
): response is Signatures.DestroyBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 423) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateDestroyBookingResponse500Response(response.body)) {
      (validateDestroyBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateDestroyBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateDestroyBookingOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}
