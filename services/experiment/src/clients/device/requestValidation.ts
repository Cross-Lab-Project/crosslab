/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to listDevices()
 */
export function validateListDevicesInput() {
  return true;
}

/**
 * This function validates the outputs of listDevices()
 */
export function validateListDevicesOutput(
  response: ResponseData,
): response is Signatures.ListDevicesResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateListDevicesResponse200Response(response.body)) {
      (validateListDevicesOutput as FunctionWithErrors).errors = (
        BasicValidation.validateListDevicesResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateListDevicesOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createDevice()
 */
export function validateCreateDeviceInput(
  parameters: Signatures.CreateDeviceParameters,
  body: Signatures.CreateDeviceBody,
) {
  if (parameters) {
    if (
      !BasicValidation.validateChangedUrlRequest(parameters['changedUrl']) &&
      parameters['changedUrl'] !== undefined
    ) {
      (validateCreateDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateChangedUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  if (!BasicValidation.validateCreateDeviceBodyRequest(body)) {
    (validateCreateDeviceInput as FunctionWithErrors).errors = (
      BasicValidation.validateCreateDeviceBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createDevice()
 */
export function validateCreateDeviceOutput(
  response: ResponseData,
): response is Signatures.CreateDeviceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateCreateDeviceResponse201Response(response.body)) {
      (validateCreateDeviceOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreateDeviceResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateCreateDeviceOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getDevice()
 */
export function validateGetDeviceInput(parameters: Signatures.GetDeviceParameters) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateGetDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateFlatGroupRequest(parameters['flat_group']) &&
      parameters['flat_group'] !== undefined
    ) {
      (validateGetDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateFlatGroupRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getDevice()
 */
export function validateGetDeviceOutput(
  response: ResponseData,
): response is Signatures.GetDeviceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetDeviceResponse200Response(response.body)) {
      (validateGetDeviceOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetDeviceResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateGetDeviceOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to updateDevice()
 */
export function validateUpdateDeviceInput(
  parameters: Signatures.UpdateDeviceParameters,
  body: Signatures.UpdateDeviceBody,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateUpdateDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateChangedUrlRequest(parameters['changedUrl']) &&
      parameters['changedUrl'] !== undefined
    ) {
      (validateUpdateDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateChangedUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateUpdateDeviceBodyRequest(body)) {
    (validateUpdateDeviceInput as FunctionWithErrors).errors = (
      BasicValidation.validateUpdateDeviceBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of updateDevice()
 */
export function validateUpdateDeviceOutput(
  response: ResponseData,
): response is Signatures.UpdateDeviceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateUpdateDeviceResponse200Response(response.body)) {
      (validateUpdateDeviceOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUpdateDeviceResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateUpdateDeviceOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deleteDevice()
 */
export function validateDeleteDeviceInput(parameters: Signatures.DeleteDeviceParameters) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateDeleteDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deleteDevice()
 */
export function validateDeleteDeviceOutput(
  response: ResponseData,
): response is Signatures.DeleteDeviceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateDeleteDeviceOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to instantiateDevice()
 */
export function validateInstantiateDeviceInput(
  parameters: Signatures.InstantiateDeviceParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateInstantiateDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateChangedUrlRequest(parameters['changedUrl']) &&
      parameters['changedUrl'] !== undefined
    ) {
      (validateInstantiateDeviceInput as FunctionWithErrors).errors = (
        BasicValidation.validateChangedUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of instantiateDevice()
 */
export function validateInstantiateDeviceOutput(
  response: ResponseData,
): response is Signatures.InstantiateDeviceResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateInstantiateDeviceResponse201Response(response.body)) {
      (validateInstantiateDeviceOutput as FunctionWithErrors).errors = (
        BasicValidation.validateInstantiateDeviceResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateInstantiateDeviceOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getDeviceAvailability()
 */
export function validateGetDeviceAvailabilityInput(
  parameters: Signatures.GetDeviceAvailabilityParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateGetDeviceAvailabilityInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateStartTimeRequest(parameters['startTime']) &&
      parameters['startTime'] !== undefined
    ) {
      (validateGetDeviceAvailabilityInput as FunctionWithErrors).errors = (
        BasicValidation.validateStartTimeRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateEndTimeRequest(parameters['endTime']) &&
      parameters['endTime'] !== undefined
    ) {
      (validateGetDeviceAvailabilityInput as FunctionWithErrors).errors = (
        BasicValidation.validateEndTimeRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getDeviceAvailability()
 */
export function validateGetDeviceAvailabilityOutput(
  response: ResponseData,
): response is Signatures.GetDeviceAvailabilityResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (
      !BasicValidation.validateGetDeviceAvailabilityResponse200Response(response.body)
    ) {
      (validateGetDeviceAvailabilityOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetDeviceAvailabilityResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateGetDeviceAvailabilityOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deleteDeviceAvailabilityRules()
 */
export function validateDeleteDeviceAvailabilityRulesInput(
  parameters: Signatures.DeleteDeviceAvailabilityRulesParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateDeleteDeviceAvailabilityRulesInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deleteDeviceAvailabilityRules()
 */
export function validateDeleteDeviceAvailabilityRulesOutput(
  response: ResponseData,
): response is Signatures.DeleteDeviceAvailabilityRulesResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateDeleteDeviceAvailabilityRulesOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to addDeviceAvailabilityRules()
 */
export function validateAddDeviceAvailabilityRulesInput(
  parameters: Signatures.AddDeviceAvailabilityRulesParameters,
  body: Signatures.AddDeviceAvailabilityRulesBody,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateAddDeviceAvailabilityRulesInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateAddDeviceAvailabilityRulesBodyRequest(body)) {
    (validateAddDeviceAvailabilityRulesInput as FunctionWithErrors).errors = (
      BasicValidation.validateAddDeviceAvailabilityRulesBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of addDeviceAvailabilityRules()
 */
export function validateAddDeviceAvailabilityRulesOutput(
  response: ResponseData,
): response is Signatures.AddDeviceAvailabilityRulesResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (
      !BasicValidation.validateAddDeviceAvailabilityRulesResponse200Response(
        response.body,
      )
    ) {
      (validateAddDeviceAvailabilityRulesOutput as FunctionWithErrors).errors = (
        BasicValidation.validateAddDeviceAvailabilityRulesResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateAddDeviceAvailabilityRulesOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createWebsocketToken()
 */
export function validateCreateWebsocketTokenInput(
  parameters: Signatures.CreateWebsocketTokenParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateCreateWebsocketTokenInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createWebsocketToken()
 */
export function validateCreateWebsocketTokenOutput(
  response: ResponseData,
): response is Signatures.CreateWebsocketTokenResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateCreateWebsocketTokenResponse200Response(response.body)) {
      (validateCreateWebsocketTokenOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreateWebsocketTokenResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateCreateWebsocketTokenOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to sendSignalingMessage()
 */
export function validateSendSignalingMessageInput(
  parameters: Signatures.SendSignalingMessageParameters,
  body: Signatures.SendSignalingMessageBody,
) {
  if (parameters) {
    if (!BasicValidation.validateDeviceIdRequest(parameters['device_id'])) {
      (validateSendSignalingMessageInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (!BasicValidation.validateSendSignalingMessageBodyRequest(body)) {
    (validateSendSignalingMessageInput as FunctionWithErrors).errors = (
      BasicValidation.validateSendSignalingMessageBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of sendSignalingMessage()
 */
export function validateSendSignalingMessageOutput(
  response: ResponseData,
): response is Signatures.SendSignalingMessageResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateSendSignalingMessageOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to listPeerconnections()
 */
export function validateListPeerconnectionsInput() {
  return true;
}

/**
 * This function validates the outputs of listPeerconnections()
 */
export function validateListPeerconnectionsOutput(
  response: ResponseData,
): response is Signatures.ListPeerconnectionsResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateListPeerconnectionsResponse200Response(response.body)) {
      (validateListPeerconnectionsOutput as FunctionWithErrors).errors = (
        BasicValidation.validateListPeerconnectionsResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateListPeerconnectionsOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to createPeerconnection()
 */
export function validateCreatePeerconnectionInput(
  parameters: Signatures.CreatePeerconnectionParameters,
  body: Signatures.CreatePeerconnectionBody,
) {
  if (parameters) {
    if (
      !BasicValidation.validateClosedUrlRequest(parameters['closedUrl']) &&
      parameters['closedUrl'] !== undefined
    ) {
      (validateCreatePeerconnectionInput as FunctionWithErrors).errors = (
        BasicValidation.validateClosedUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (
      !BasicValidation.validateStatusChangedUrlRequest(parameters['statusChangedUrl']) &&
      parameters['statusChangedUrl'] !== undefined
    ) {
      (validateCreatePeerconnectionInput as FunctionWithErrors).errors = (
        BasicValidation.validateStatusChangedUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    if (parameters !== undefined) {
      return false;
    }
  }

  if (!BasicValidation.validateCreatePeerconnectionBodyRequest(body)) {
    (validateCreatePeerconnectionInput as FunctionWithErrors).errors = (
      BasicValidation.validateCreatePeerconnectionBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of createPeerconnection()
 */
export function validateCreatePeerconnectionOutput(
  response: ResponseData,
): response is Signatures.CreatePeerconnectionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 201) {
    if (!BasicValidation.validateCreatePeerconnectionResponse201Response(response.body)) {
      (validateCreatePeerconnectionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreatePeerconnectionResponse201Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 202) {
    if (!BasicValidation.validateCreatePeerconnectionResponse202Response(response.body)) {
      (validateCreatePeerconnectionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateCreatePeerconnectionResponse202Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateCreatePeerconnectionOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to getPeerconnection()
 */
export function validateGetPeerconnectionInput(
  parameters: Signatures.GetPeerconnectionParameters,
) {
  if (parameters) {
    if (
      !BasicValidation.validatePeerconnectionIdRequest(parameters['peerconnection_id'])
    ) {
      (validateGetPeerconnectionInput as FunctionWithErrors).errors = (
        BasicValidation.validatePeerconnectionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of getPeerconnection()
 */
export function validateGetPeerconnectionOutput(
  response: ResponseData,
): response is Signatures.GetPeerconnectionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateGetPeerconnectionResponse200Response(response.body)) {
      (validateGetPeerconnectionOutput as FunctionWithErrors).errors = (
        BasicValidation.validateGetPeerconnectionResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateGetPeerconnectionOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to deletePeerconnection()
 */
export function validateDeletePeerconnectionInput(
  parameters: Signatures.DeletePeerconnectionParameters,
) {
  if (parameters) {
    if (
      !BasicValidation.validatePeerconnectionIdRequest(parameters['peerconnection_id'])
    ) {
      (validateDeletePeerconnectionInput as FunctionWithErrors).errors = (
        BasicValidation.validatePeerconnectionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of deletePeerconnection()
 */
export function validateDeletePeerconnectionOutput(
  response: ResponseData,
): response is Signatures.DeletePeerconnectionResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 202) {
    return true;
  }

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validateDeletePeerconnectionOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to patchPeerconnectionDeviceStatus()
 */
export function validatePatchPeerconnectionDeviceStatusInput(
  parameters: Signatures.PatchPeerconnectionDeviceStatusParameters,
  body: Signatures.PatchPeerconnectionDeviceStatusBody,
) {
  if (parameters) {
    if (
      !BasicValidation.validatePeerconnectionIdRequest(parameters['peerconnection_id'])
    ) {
      (validatePatchPeerconnectionDeviceStatusInput as FunctionWithErrors).errors = (
        BasicValidation.validatePeerconnectionIdRequest as FunctionWithErrors
      ).errors;
      return false;
    }
    if (!BasicValidation.validateDeviceUrlRequest(parameters['device_url'])) {
      (validatePatchPeerconnectionDeviceStatusInput as FunctionWithErrors).errors = (
        BasicValidation.validateDeviceUrlRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  if (!BasicValidation.validatePatchPeerconnectionDeviceStatusBodyRequest(body)) {
    (validatePatchPeerconnectionDeviceStatusInput as FunctionWithErrors).errors = (
      BasicValidation.validatePatchPeerconnectionDeviceStatusBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of patchPeerconnectionDeviceStatus()
 */
export function validatePatchPeerconnectionDeviceStatusOutput(
  response: ResponseData,
): response is Signatures.PatchPeerconnectionDeviceStatusResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 204) {
    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    return true;
  }

  (
    validatePatchPeerconnectionDeviceStatusOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}
