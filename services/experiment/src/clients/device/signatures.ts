/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as Types from './types.js';

/**
 * Typing for all possible responses to the request made by listDevices()
 * @category listDevices()
 */
export type ListDevicesResponse = ListDevicesSuccessResponse | ListDevicesErrorResponse;

/**
 * Typing for all successful responses to the request made by listDevices()
 * @category listDevices()
 */
export type ListDevicesSuccessResponse = ListDevicesResponse200;

/**
 * Typing for all error responses to the request made by listDevices()
 * @category listDevices()
 */
export type ListDevicesErrorResponse =
  | ListDevicesResponse400
  | ListDevicesResponse401
  | ListDevicesResponse403
  | ListDevicesResponse404
  | ListDevicesResponse500;

/**
 * Typing for a response with status 200 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.DeviceOverview<'response'>[];
}

/**
 * Typing for a response with status 400 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by listDevices()
 * @category listDevices()
 */
export interface ListDevicesResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by createDevice()
 * @category createDevice()
 */
export type CreateDeviceParameters = {
  changedUrl?: string;
};

/**
 * Typing for the body of the request made by createDevice()
 * @category createDevice()
 */
export type CreateDeviceBody = Types.Device<'request'>;

/**
 * Typing for all possible responses to the request made by createDevice()
 * @category createDevice()
 */
export type CreateDeviceResponse =
  | CreateDeviceSuccessResponse
  | CreateDeviceErrorResponse;

/**
 * Typing for all successful responses to the request made by createDevice()
 * @category createDevice()
 */
export type CreateDeviceSuccessResponse = CreateDeviceResponse201;

/**
 * Typing for all error responses to the request made by createDevice()
 * @category createDevice()
 */
export type CreateDeviceErrorResponse =
  | CreateDeviceResponse400
  | CreateDeviceResponse401
  | CreateDeviceResponse403
  | CreateDeviceResponse404
  | CreateDeviceResponse500;

/**
 * Typing for a response with status 201 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Device<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by createDevice()
 * @category createDevice()
 */
export interface CreateDeviceResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by getDevice()
 * @category getDevice()
 */
export type GetDeviceParameters = {
  device_id: string;
  flat_group?: boolean;
};

/**
 * Typing for all possible responses to the request made by getDevice()
 * @category getDevice()
 */
export type GetDeviceResponse = GetDeviceSuccessResponse | GetDeviceErrorResponse;

/**
 * Typing for all successful responses to the request made by getDevice()
 * @category getDevice()
 */
export type GetDeviceSuccessResponse = GetDeviceResponse200;

/**
 * Typing for all error responses to the request made by getDevice()
 * @category getDevice()
 */
export type GetDeviceErrorResponse =
  | GetDeviceResponse400
  | GetDeviceResponse401
  | GetDeviceResponse403
  | GetDeviceResponse404
  | GetDeviceResponse500;

/**
 * Typing for a response with status 200 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Device<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getDevice()
 * @category getDevice()
 */
export interface GetDeviceResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by updateDevice()
 * @category updateDevice()
 */
export type UpdateDeviceParameters = {
  device_id: string;
  changedUrl?: string;
};

/**
 * Typing for the body of the request made by updateDevice()
 * @category updateDevice()
 */
export type UpdateDeviceBody = Types.DeviceUpdate<'request'> | undefined;

/**
 * Typing for all possible responses to the request made by updateDevice()
 * @category updateDevice()
 */
export type UpdateDeviceResponse =
  | UpdateDeviceSuccessResponse
  | UpdateDeviceErrorResponse;

/**
 * Typing for all successful responses to the request made by updateDevice()
 * @category updateDevice()
 */
export type UpdateDeviceSuccessResponse = UpdateDeviceResponse200;

/**
 * Typing for all error responses to the request made by updateDevice()
 * @category updateDevice()
 */
export type UpdateDeviceErrorResponse =
  | UpdateDeviceResponse400
  | UpdateDeviceResponse401
  | UpdateDeviceResponse403
  | UpdateDeviceResponse404
  | UpdateDeviceResponse500;

/**
 * Typing for a response with status 200 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Device<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by updateDevice()
 * @category updateDevice()
 */
export interface UpdateDeviceResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by deleteDevice()
 * @category deleteDevice()
 */
export type DeleteDeviceParameters = {
  device_id: string;
};

/**
 * Typing for all possible responses to the request made by deleteDevice()
 * @category deleteDevice()
 */
export type DeleteDeviceResponse =
  | DeleteDeviceSuccessResponse
  | DeleteDeviceErrorResponse;

/**
 * Typing for all successful responses to the request made by deleteDevice()
 * @category deleteDevice()
 */
export type DeleteDeviceSuccessResponse = DeleteDeviceResponse204;

/**
 * Typing for all error responses to the request made by deleteDevice()
 * @category deleteDevice()
 */
export type DeleteDeviceErrorResponse =
  | DeleteDeviceResponse400
  | DeleteDeviceResponse401
  | DeleteDeviceResponse403
  | DeleteDeviceResponse404
  | DeleteDeviceResponse500;

/**
 * Typing for a response with status 204 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse204 extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by deleteDevice()
 * @category deleteDevice()
 */
export interface DeleteDeviceResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export type InstantiateDeviceParameters = {
  device_id: string;
  changedUrl?: string;
};

/**
 * Typing for all possible responses to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export type InstantiateDeviceResponse =
  | InstantiateDeviceSuccessResponse
  | InstantiateDeviceErrorResponse;

/**
 * Typing for all successful responses to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export type InstantiateDeviceSuccessResponse = InstantiateDeviceResponse201;

/**
 * Typing for all error responses to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export type InstantiateDeviceErrorResponse =
  | InstantiateDeviceResponse400
  | InstantiateDeviceResponse401
  | InstantiateDeviceResponse403
  | InstantiateDeviceResponse404
  | InstantiateDeviceResponse500;

/**
 * Typing for a response with status 201 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    instance: Types.ConcreteDevice<'response'>;
    deviceToken: string;
    [k: string]: unknown;
  };
}

/**
 * Typing for a response with status 400 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by instantiateDevice()
 * @category instantiateDevice()
 */
export interface InstantiateDeviceResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export type GetDeviceAvailabilityParameters = {
  device_id: string;
  startTime?: string;
  endTime?: string;
};

/**
 * Typing for all possible responses to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export type GetDeviceAvailabilityResponse =
  | GetDeviceAvailabilitySuccessResponse
  | GetDeviceAvailabilityErrorResponse;

/**
 * Typing for all successful responses to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export type GetDeviceAvailabilitySuccessResponse = GetDeviceAvailabilityResponse200;

/**
 * Typing for all error responses to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export type GetDeviceAvailabilityErrorResponse =
  | GetDeviceAvailabilityResponse400
  | GetDeviceAvailabilityResponse401
  | GetDeviceAvailabilityResponse403
  | GetDeviceAvailabilityResponse404
  | GetDeviceAvailabilityResponse500;

/**
 * Typing for a response with status 200 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Availability<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getDeviceAvailability()
 * @category getDeviceAvailability()
 */
export interface GetDeviceAvailabilityResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export type DeleteDeviceAvailabilityRulesParameters = {
  device_id: string;
};

/**
 * Typing for all possible responses to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export type DeleteDeviceAvailabilityRulesResponse =
  | DeleteDeviceAvailabilityRulesSuccessResponse
  | DeleteDeviceAvailabilityRulesErrorResponse;

/**
 * Typing for all successful responses to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export type DeleteDeviceAvailabilityRulesSuccessResponse =
  DeleteDeviceAvailabilityRulesResponse204;

/**
 * Typing for all error responses to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export type DeleteDeviceAvailabilityRulesErrorResponse =
  | DeleteDeviceAvailabilityRulesResponse400
  | DeleteDeviceAvailabilityRulesResponse401
  | DeleteDeviceAvailabilityRulesResponse403
  | DeleteDeviceAvailabilityRulesResponse404
  | DeleteDeviceAvailabilityRulesResponse500;

/**
 * Typing for a response with status 204 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse204 extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by deleteDeviceAvailabilityRules()
 * @category deleteDeviceAvailabilityRules()
 */
export interface DeleteDeviceAvailabilityRulesResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export type AddDeviceAvailabilityRulesParameters = {
  device_id: string;
};

/**
 * Typing for the body of the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export type AddDeviceAvailabilityRulesBody =
  | Types.AvailabilityRule<'request'>[]
  | undefined;

/**
 * Typing for all possible responses to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export type AddDeviceAvailabilityRulesResponse =
  | AddDeviceAvailabilityRulesSuccessResponse
  | AddDeviceAvailabilityRulesErrorResponse;

/**
 * Typing for all successful responses to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export type AddDeviceAvailabilityRulesSuccessResponse =
  AddDeviceAvailabilityRulesResponse200;

/**
 * Typing for all error responses to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export type AddDeviceAvailabilityRulesErrorResponse =
  | AddDeviceAvailabilityRulesResponse400
  | AddDeviceAvailabilityRulesResponse401
  | AddDeviceAvailabilityRulesResponse403
  | AddDeviceAvailabilityRulesResponse404
  | AddDeviceAvailabilityRulesResponse500;

/**
 * Typing for a response with status 200 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Availability<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by addDeviceAvailabilityRules()
 * @category addDeviceAvailabilityRules()
 */
export interface AddDeviceAvailabilityRulesResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export type CreateWebsocketTokenParameters = {
  device_id: string;
};

/**
 * Typing for all possible responses to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export type CreateWebsocketTokenResponse =
  | CreateWebsocketTokenSuccessResponse
  | CreateWebsocketTokenErrorResponse;

/**
 * Typing for all successful responses to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export type CreateWebsocketTokenSuccessResponse = CreateWebsocketTokenResponse200;

/**
 * Typing for all error responses to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export type CreateWebsocketTokenErrorResponse =
  | CreateWebsocketTokenResponse400
  | CreateWebsocketTokenResponse401
  | CreateWebsocketTokenResponse403
  | CreateWebsocketTokenResponse404
  | CreateWebsocketTokenResponse500;

/**
 * Typing for a response with status 200 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 400 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by createWebsocketToken()
 * @category createWebsocketToken()
 */
export interface CreateWebsocketTokenResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export type SendSignalingMessageParameters = {
  device_id: string;
};

/**
 * Typing for the body of the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export type SendSignalingMessageBody =
  | Types.CreatePeerconnectionMessage<'request'>
  | Types.ClosePeerconnectionMessage<'request'>
  | Types.SignalingMessage<'request'>
  | Types.ConfigurationMessage<'request'>;

/**
 * Typing for all possible responses to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export type SendSignalingMessageResponse =
  | SendSignalingMessageSuccessResponse
  | SendSignalingMessageErrorResponse;

/**
 * Typing for all successful responses to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export type SendSignalingMessageSuccessResponse = SendSignalingMessageResponse200;

/**
 * Typing for all error responses to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export type SendSignalingMessageErrorResponse =
  | SendSignalingMessageResponse400
  | SendSignalingMessageResponse401
  | SendSignalingMessageResponse403
  | SendSignalingMessageResponse404
  | SendSignalingMessageResponse500;

/**
 * Typing for a response with status 200 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by sendSignalingMessage()
 * @category sendSignalingMessage()
 */
export interface SendSignalingMessageResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for all possible responses to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export type ListPeerconnectionsResponse =
  | ListPeerconnectionsSuccessResponse
  | ListPeerconnectionsErrorResponse;

/**
 * Typing for all successful responses to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export type ListPeerconnectionsSuccessResponse = ListPeerconnectionsResponse200;

/**
 * Typing for all error responses to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export type ListPeerconnectionsErrorResponse =
  | ListPeerconnectionsResponse400
  | ListPeerconnectionsResponse401
  | ListPeerconnectionsResponse403
  | ListPeerconnectionsResponse404
  | ListPeerconnectionsResponse500;

/**
 * Typing for a response with status 200 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.PeerconnectionOverview<'response'>[];
}

/**
 * Typing for a response with status 400 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by listPeerconnections()
 * @category listPeerconnections()
 */
export interface ListPeerconnectionsResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export type CreatePeerconnectionParameters = {
  closedUrl?: string;
  statusChangedUrl?: string;
};

/**
 * Typing for the body of the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export type CreatePeerconnectionBody = Types.Peerconnection<'request'>;

/**
 * Typing for all possible responses to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export type CreatePeerconnectionResponse =
  | CreatePeerconnectionSuccessResponse
  | CreatePeerconnectionErrorResponse;

/**
 * Typing for all successful responses to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export type CreatePeerconnectionSuccessResponse =
  | CreatePeerconnectionResponse201
  | CreatePeerconnectionResponse202;

/**
 * Typing for all error responses to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export type CreatePeerconnectionErrorResponse =
  | CreatePeerconnectionResponse400
  | CreatePeerconnectionResponse401
  | CreatePeerconnectionResponse403
  | CreatePeerconnectionResponse404
  | CreatePeerconnectionResponse500;

/**
 * Typing for a response with status 201 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse201 extends Types.SuccessResponse {
  status: 201;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Peerconnection<'response'>;
}

/**
 * Typing for a response with status 202 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse202 extends Types.SuccessResponse {
  status: 202;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Peerconnection<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by createPeerconnection()
 * @category createPeerconnection()
 */
export interface CreatePeerconnectionResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export type GetPeerconnectionParameters = {
  peerconnection_id: string;
};

/**
 * Typing for all possible responses to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export type GetPeerconnectionResponse =
  | GetPeerconnectionSuccessResponse
  | GetPeerconnectionErrorResponse;

/**
 * Typing for all successful responses to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export type GetPeerconnectionSuccessResponse = GetPeerconnectionResponse200;

/**
 * Typing for all error responses to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export type GetPeerconnectionErrorResponse =
  | GetPeerconnectionResponse400
  | GetPeerconnectionResponse401
  | GetPeerconnectionResponse403
  | GetPeerconnectionResponse404
  | GetPeerconnectionResponse500;

/**
 * Typing for a response with status 200 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: Types.Peerconnection<'response'>;
}

/**
 * Typing for a response with status 400 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getPeerconnection()
 * @category getPeerconnection()
 */
export interface GetPeerconnectionResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export type DeletePeerconnectionParameters = {
  peerconnection_id: string;
};

/**
 * Typing for all possible responses to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export type DeletePeerconnectionResponse =
  | DeletePeerconnectionSuccessResponse
  | DeletePeerconnectionErrorResponse;

/**
 * Typing for all successful responses to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export type DeletePeerconnectionSuccessResponse =
  | DeletePeerconnectionResponse202
  | DeletePeerconnectionResponse204;

/**
 * Typing for all error responses to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export type DeletePeerconnectionErrorResponse =
  | DeletePeerconnectionResponse400
  | DeletePeerconnectionResponse401
  | DeletePeerconnectionResponse403
  | DeletePeerconnectionResponse404
  | DeletePeerconnectionResponse500;

/**
 * Typing for a response with status 202 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse202 extends Types.SuccessResponse {
  status: 202;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 204 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse204 extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by deletePeerconnection()
 * @category deletePeerconnection()
 */
export interface DeletePeerconnectionResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export type PatchPeerconnectionDeviceStatusParameters = {
  peerconnection_id: string;
  device_url: string;
};

/**
 * Typing for the body of the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export type PatchPeerconnectionDeviceStatusBody = {
  /**
   * The status of the peerconnection.
   */
  status: Types.ConnectionStatus<'request'>;
  [k: string]: unknown;
};

/**
 * Typing for all possible responses to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export type PatchPeerconnectionDeviceStatusResponse =
  | PatchPeerconnectionDeviceStatusSuccessResponse
  | PatchPeerconnectionDeviceStatusErrorResponse;

/**
 * Typing for all successful responses to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export type PatchPeerconnectionDeviceStatusSuccessResponse =
  PatchPeerconnectionDeviceStatusResponse204;

/**
 * Typing for all error responses to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export type PatchPeerconnectionDeviceStatusErrorResponse =
  | PatchPeerconnectionDeviceStatusResponse400
  | PatchPeerconnectionDeviceStatusResponse401
  | PatchPeerconnectionDeviceStatusResponse403
  | PatchPeerconnectionDeviceStatusResponse404
  | PatchPeerconnectionDeviceStatusResponse500;

/**
 * Typing for a response with status 204 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse204
  extends Types.SuccessResponse {
  status: 204;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 400 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by patchPeerconnectionDeviceStatus()
 * @category patchPeerconnectionDeviceStatus()
 */
export interface PatchPeerconnectionDeviceStatusResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}
