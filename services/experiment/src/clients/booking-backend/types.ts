/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as _BasicValidation from './basicValidation.cjs';

/**
 * @internal
 */
export interface FunctionWithErrors {
  (...args: unknown[]): unknown;
  errors?: unknown;
}

/**
 * @internal
 */
export interface RequestInfo {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'OPTIONS' | 'PATCH' | 'HEAD';
  body?: string;
  headers?: [string, string][];
}

/**
 * @internal
 */
export type FetchFunction = (
  url: string,
  info?: RequestInfo,
) => Promise<ResponseData> | ResponseData;

export interface ResponseData {
  status: number;
  headers?: {
    [key: string]: string | undefined;
  };
  body?: unknown;
}

export interface SuccessResponse extends ResponseData {
  success?: true;
}

export interface ErrorResponse extends ResponseData {
  success?: false;
}

/**
 * @internal
 */
export function isSuccessResponse(response: ResponseData): response is SuccessResponse {
  return response.status < 400;
}

/**
 * @internal
 */
export function isErrorResponse(response: ResponseData): response is ErrorResponse {
  return response.status >= 400;
}

/**
 * This type allows to pick the required properties of another type.
 */
export type Require<Type, Key extends keyof Type> = Partial<Type> & {
  [Property in Key]-?: Type[Property];
};

export type SizedTuple<
  T,
  MIN extends number | undefined = undefined,
  MAX extends number | undefined = undefined,
> = MIN extends number
  ? MAX extends number
    ? _SizedTuple<T, NumericRangeTuple<MIN, MAX>>
    : TupleObject<T, NumericRangeTuple<0, MIN>> & T[]
  : MAX extends number
  ? _SizedTuple<T, NumericRangeTuple<0, MAX>, true>
  : T[];

type _SizedTuple<T, ARR extends number[], Z extends boolean = false> = ARR extends [
  infer HEAD extends number,
  ...infer TAIL extends number[],
]
  ? Tuple<T, HEAD, Z> | _SizedTuple<T, TAIL, Z>
  : never;

type Tuple<T, N extends number, Z extends boolean = false> = _Tuple<
  T,
  NumericRangeTuple<Z extends true ? 0 : 1, N>
>;

type _Tuple<T, N extends number[]> = N extends [
  infer HEAD,
  ...infer TAIL extends number[],
]
  ? HEAD extends 0
    ? [] | _Tuple<T, TAIL>
    : [T, ..._Tuple<T, TAIL>]
  : [];

type TupleObject<T, N extends number[]> = N extends [
  infer HEAD extends number,
  ...infer TAIL extends number[],
]
  ? TAIL extends []
    ? Record<string, never>
    : { [P in HEAD]: T } & TupleObject<T, TAIL>
  : Record<string, never>;

export type NumericRange<
  START extends number,
  END extends number,
  ARR extends unknown[] = [],
  ACC extends number = never,
> = ARR['length'] extends END
  ? ACC | START | END
  : NumericRange<
      START,
      END,
      [...ARR, 1],
      ARR[START] extends undefined ? ACC : ACC | ARR['length']
    >;

type NumericRangeTuple<
  START extends number,
  END extends number,
  ARR extends unknown[] = [],
  ACC extends number[] = [],
> = ARR['length'] extends END
  ? [START, ...ACC, END]
  : NumericRangeTuple<
      START,
      END,
      [...ARR, 1],
      ARR[START] extends undefined ? ACC : [...ACC, ARR['length']]
    >;

/**
 * A booking in the booking system.
 */
export type Booking<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * Unique ID of the booking.
       */
      ID: string;
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: {
        /**
         * Start time of the booking.
         */
        Start: string;
        /**
         * End time of the booking.
         */
        End: string;
        [k: string]: unknown;
      };
      Devices: string[];
      /**
       * Type of booking. Currently, only one type is defined, but others might follow (e.g. priority booking). If empty, 'normal' is assumed.
       */
      Type?: 'normal';
      /**
       * Current status of the booking. While the booking is pending, it can not be used. Will change automatically and can not be set by user. 'rejected' is set when the initial booking failed, 'cancelled' when the booking was deleted / cancelled after it was once active. The 'active-*' will be used when a device was added after the booking was locked.
       *
       */
      Status:
        | 'pending'
        | 'booked'
        | 'rejected'
        | 'cancelled'
        | 'active'
        | 'active-pending'
        | 'active-rejected';
      /**
       * If true, this booking was done by you.
       */
      You: boolean;
      /**
       * Shows whether the booking was done by an external institution.
       */
      External: boolean;
      /**
       * User readable notes about the status of the booking (e.g. if devices are unknown).
       */
      Message?: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * Unique ID of the booking.
       */
      ID: string;
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: {
        /**
         * Start time of the booking.
         */
        Start: string;
        /**
         * End time of the booking.
         */
        End: string;
        [k: string]: unknown;
      };
      Devices: string[];
      /**
       * Type of booking. Currently, only one type is defined, but others might follow (e.g. priority booking). If empty, 'normal' is assumed.
       */
      Type?: 'normal';
      /**
       * Current status of the booking. While the booking is pending, it can not be used. Will change automatically and can not be set by user. 'rejected' is set when the initial booking failed, 'cancelled' when the booking was deleted / cancelled after it was once active. The 'active-*' will be used when a device was added after the booking was locked.
       *
       */
      Status:
        | 'pending'
        | 'booked'
        | 'rejected'
        | 'cancelled'
        | 'active'
        | 'active-pending'
        | 'active-rejected';
      /**
       * If true, this booking was done by you.
       */
      You: boolean;
      /**
       * Shows whether the booking was done by an external institution.
       */
      External: boolean;
      /**
       * User readable notes about the status of the booking (e.g. if devices are unknown).
       */
      Message?: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * Unique ID of the booking.
       */
      ID: string;
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: {
        /**
         * Start time of the booking.
         */
        Start: string;
        /**
         * End time of the booking.
         */
        End: string;
        [k: string]: unknown;
      };
      Devices: string[];
      /**
       * Type of booking. Currently, only one type is defined, but others might follow (e.g. priority booking). If empty, 'normal' is assumed.
       */
      Type?: 'normal';
      /**
       * Current status of the booking. While the booking is pending, it can not be used. Will change automatically and can not be set by user. 'rejected' is set when the initial booking failed, 'cancelled' when the booking was deleted / cancelled after it was once active. The 'active-*' will be used when a device was added after the booking was locked.
       *
       */
      Status:
        | 'pending'
        | 'booked'
        | 'rejected'
        | 'cancelled'
        | 'active'
        | 'active-pending'
        | 'active-rejected';
      /**
       * If true, this booking was done by you.
       */
      You: boolean;
      /**
       * Shows whether the booking was done by an external institution.
       */
      External: boolean;
      /**
       * User readable notes about the status of the booking (e.g. if devices are unknown).
       */
      Message?: string;
      [k: string]: unknown;
    }
  : never;

/**
 * A device might either be a physical/virtual device or a group of device.
 */
export type Device<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * Unique ID of the device. Contains the institution (by having an end point at that institution)
       */
      ID: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * Unique ID of the device. Contains the institution (by having an end point at that institution)
       */
      ID: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * Unique ID of the device. Contains the institution (by having an end point at that institution)
       */
      ID: string;
      [k: string]: unknown;
    }
  : never;

/**
 * An experiment describes a set of devices and how they should be connected (potentially among other metadata).
 */
export type Experiment<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * List of devices used in experiment.
       */
      Devices: Device[];
      /**
       * User provided description, for example might be a reason for the booking (e.g. maintenance) or a link to the experiment. Might be empty or missing.
       *
       */
      Description?: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * List of devices used in experiment.
       */
      Devices: Device<'request'>[];
      /**
       * User provided description, for example might be a reason for the booking (e.g. maintenance) or a link to the experiment. Might be empty or missing.
       *
       */
      Description?: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * List of devices used in experiment.
       */
      Devices: Device<'response'>[];
      /**
       * User provided description, for example might be a reason for the booking (e.g. maintenance) or a link to the experiment. Might be empty or missing.
       *
       */
      Description?: string;
      [k: string]: unknown;
    }
  : never;

/**
 * A time slot represents a slice of time used for bookings.
 */
export type Timeslot<T extends 'request' | 'response' | 'all' = 'all'> = T extends 'all'
  ? {
      /**
       * Start time of the booking.
       */
      Start: string;
      /**
       * End time of the booking.
       */
      End: string;
      [k: string]: unknown;
    }
  : T extends 'request'
  ? {
      /**
       * Start time of the booking.
       */
      Start: string;
      /**
       * End time of the booking.
       */
      End: string;
      [k: string]: unknown;
    }
  : T extends 'response'
  ? {
      /**
       * Start time of the booking.
       */
      Start: string;
      /**
       * End time of the booking.
       */
      End: string;
      [k: string]: unknown;
    }
  : never;
