/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to lockBooking()
 */
export function validateLockBookingInput(parameters: Signatures.LockBookingParameters) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateLockBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of lockBooking()
 */
export function validateLockBookingOutput(
  response: ResponseData,
): response is Signatures.LockBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateLockBookingResponse200Response(response.body)) {
      (validateLockBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateLockBookingResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 412) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateLockBookingResponse500Response(response.body)) {
      (validateLockBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateLockBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (validateLockBookingOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to unlockBooking()
 */
export function validateUnlockBookingInput(
  parameters: Signatures.UnlockBookingParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateUnlockBookingInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of unlockBooking()
 */
export function validateUnlockBookingOutput(
  response: ResponseData,
): response is Signatures.UnlockBookingResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 412) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateUnlockBookingResponse500Response(response.body)) {
      (validateUnlockBookingOutput as FunctionWithErrors).errors = (
        BasicValidation.validateUnlockBookingResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (validateUnlockBookingOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}

/**
 * This function validates the inputs to bookingCallback()
 */
export function validateBookingCallbackInput(
  parameters: Signatures.BookingCallbackParameters,
) {
  if (parameters) {
    if (!BasicValidation.validateIDRequest(parameters['ID'])) {
      (validateBookingCallbackInput as FunctionWithErrors).errors = (
        BasicValidation.validateIDRequest as FunctionWithErrors
      ).errors;
      return false;
    }
  } else {
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of bookingCallback()
 */
export function validateBookingCallbackOutput(
  response: ResponseData,
): response is Signatures.BookingCallbackResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    return true;
  }

  if (response.status === 404) {
    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateBookingCallbackResponse500Response(response.body)) {
      (validateBookingCallbackOutput as FunctionWithErrors).errors = (
        BasicValidation.validateBookingCallbackResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (validateBookingCallbackOutput as FunctionWithErrors).errors =
    `Response status ${response.status} is unexpected`;

  return false;
}
