/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/ban-ts-comment */
import * as Types from './types.js';
// @ts-ignore
import { type Require } from './types.js';

/**
 * Typing for the body of the request made by schedule()
 * @category schedule()
 */
export type ScheduleBody =
  | {
      /**
       * An experiment describes a set of devices and how they should be connected (potentially among other metadata).
       */
      Experiment: Types.Experiment<'request'>;
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: Types.Timeslot<'request'>;
      /**
       * If true, show only one timetable per device instead of one for all available physical devices.
       */
      Combined?: boolean;
      /**
       * (private) Show only devices of this institution. Give an error if a device of an other institution is requested.
       */
      onlyOwn?: boolean;
      [k: string]: unknown;
    }
  | undefined;

/**
 * Typing for all possible responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleResponse = ScheduleSuccessResponse | ScheduleErrorResponse;

/**
 * Typing for all successful responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleSuccessResponse = ScheduleResponse200;

/**
 * Typing for all error responses to the request made by schedule()
 * @category schedule()
 */
export type ScheduleErrorResponse =
  | ScheduleResponse400
  | ScheduleResponse401
  | ScheduleResponse403
  | ScheduleResponse404
  | ScheduleResponse422
  | ScheduleResponse500
  | ScheduleResponse503;

/**
 * Typing for a response with status 200 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    /**
     * ID of the device (or * if combined).
     */
    Device: string;
    /**
     * Array of booked times.
     */
    Booked: Types.Timeslot<'response'>[];
    /**
     * Array of free times.
     */
    Free: Types.Timeslot<'response'>[];
    [k: string]: unknown;
  }[];
}

/**
 * Typing for a response with status 400 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 422 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse422 extends Types.ErrorResponse {
  status: 422;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 500 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by schedule()
 * @category schedule()
 */
export interface ScheduleResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the body of the request made by newBooking()
 * @category newBooking()
 */
export type NewBookingBody =
  | {
      /**
       * List of devices which should be added.
       */
      Devices: Types.Device<'request'>[];
      /**
       * A time slot represents a slice of time used for bookings.
       */
      Time: Types.Timeslot<'request'>;
      /**
       * Type of booking. Currently, only one type is defined, but others might follow (e.g. priority booking). If empty, 'normal' is assumed.
       */
      Type?: 'normal';
      [k: string]: unknown;
    }
  | undefined;

/**
 * Typing for all possible responses to the request made by newBooking()
 * @category newBooking()
 */
export type NewBookingResponse = NewBookingSuccessResponse | NewBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by newBooking()
 * @category newBooking()
 */
export type NewBookingSuccessResponse = NewBookingResponse200;

/**
 * Typing for all error responses to the request made by newBooking()
 * @category newBooking()
 */
export type NewBookingErrorResponse =
  | NewBookingResponse401
  | NewBookingResponse403
  | NewBookingResponse500
  | NewBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by newBooking()
 * @category newBooking()
 */
export interface NewBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    /**
     * ID at which the booking can be managed.
     */
    BookingID: string;
    [k: string]: unknown;
  };
}

/**
 * Typing for a response with status 401 to the request made by newBooking()
 * @category newBooking()
 */
export interface NewBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by newBooking()
 * @category newBooking()
 */
export interface NewBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by newBooking()
 * @category newBooking()
 */
export interface NewBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by newBooking()
 * @category newBooking()
 */
export interface NewBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by updateBooking()
 * @category updateBooking()
 */
export type UpdateBookingParameters = {
  ID: string;
};

/**
 * Typing for the body of the request made by updateBooking()
 * @category updateBooking()
 */
export type UpdateBookingBody =
  | {
      /**
       * Expresses whether the devices should be locked. Must match current status of booking. Is assumed to be false if not set.
       */
      Locked?: boolean;
      /**
       * List of devices which should be added.
       */
      Devices?: Types.Device<'request'>[];
      [k: string]: unknown;
    }
  | {
      /**
       * Callback which should be called at changes.
       */
      Callback?: string;
      [k: string]: unknown;
    };

/**
 * Typing for all possible responses to the request made by updateBooking()
 * @category updateBooking()
 */
export type UpdateBookingResponse =
  | UpdateBookingSuccessResponse
  | UpdateBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by updateBooking()
 * @category updateBooking()
 */
export type UpdateBookingSuccessResponse = UpdateBookingResponse200;

/**
 * Typing for all error responses to the request made by updateBooking()
 * @category updateBooking()
 */
export type UpdateBookingErrorResponse =
  | UpdateBookingResponse400
  | UpdateBookingResponse401
  | UpdateBookingResponse403
  | UpdateBookingResponse404
  | UpdateBookingResponse423
  | UpdateBookingResponse500
  | UpdateBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    BookingID: string;
    [k: string]: unknown;
  };
}

/**
 * Typing for a response with status 400 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse400 extends Types.ErrorResponse {
  status: 400;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 401 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 423 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse423 extends Types.ErrorResponse {
  status: 423;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by updateBooking()
 * @category updateBooking()
 */
export interface UpdateBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by deleteBooking()
 * @category deleteBooking()
 */
export type DeleteBookingParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by deleteBooking()
 * @category deleteBooking()
 */
export type DeleteBookingResponse =
  | DeleteBookingSuccessResponse
  | DeleteBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by deleteBooking()
 * @category deleteBooking()
 */
export type DeleteBookingSuccessResponse = DeleteBookingResponse200;

/**
 * Typing for all error responses to the request made by deleteBooking()
 * @category deleteBooking()
 */
export type DeleteBookingErrorResponse =
  | DeleteBookingResponse401
  | DeleteBookingResponse403
  | DeleteBookingResponse404
  | DeleteBookingResponse423
  | DeleteBookingResponse500
  | DeleteBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 423 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse423 extends Types.ErrorResponse {
  status: 423;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by deleteBooking()
 * @category deleteBooking()
 */
export interface DeleteBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by getBooking()
 * @category getBooking()
 */
export type GetBookingParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by getBooking()
 * @category getBooking()
 */
export type GetBookingResponse = GetBookingSuccessResponse | GetBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by getBooking()
 * @category getBooking()
 */
export type GetBookingSuccessResponse = GetBookingResponse200;

/**
 * Typing for all error responses to the request made by getBooking()
 * @category getBooking()
 */
export type GetBookingErrorResponse =
  | GetBookingResponse401
  | GetBookingResponse403
  | GetBookingResponse404
  | GetBookingResponse500
  | GetBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    /**
     * A booking in the booking system.
     */
    Booking: Types.Booking<'response'>;
    /**
     * Shows if the booking is in a locked status.
     */
    Locked: boolean;
    [k: string]: unknown;
  };
}

/**
 * Typing for a response with status 401 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by getBooking()
 * @category getBooking()
 */
export interface GetBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by destroyBooking()
 * @category destroyBooking()
 */
export type DestroyBookingParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by destroyBooking()
 * @category destroyBooking()
 */
export type DestroyBookingResponse =
  | DestroyBookingSuccessResponse
  | DestroyBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by destroyBooking()
 * @category destroyBooking()
 */
export type DestroyBookingSuccessResponse = DestroyBookingResponse200;

/**
 * Typing for all error responses to the request made by destroyBooking()
 * @category destroyBooking()
 */
export type DestroyBookingErrorResponse =
  | DestroyBookingResponse401
  | DestroyBookingResponse403
  | DestroyBookingResponse404
  | DestroyBookingResponse423
  | DestroyBookingResponse500
  | DestroyBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 423 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse423 extends Types.ErrorResponse {
  status: 423;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by destroyBooking()
 * @category destroyBooking()
 */
export interface DestroyBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by lockBooking()
 * @category lockBooking()
 */
export type LockBookingParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by lockBooking()
 * @category lockBooking()
 */
export type LockBookingResponse = LockBookingSuccessResponse | LockBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by lockBooking()
 * @category lockBooking()
 */
export type LockBookingSuccessResponse = LockBookingResponse200;

/**
 * Typing for all error responses to the request made by lockBooking()
 * @category lockBooking()
 */
export type LockBookingErrorResponse =
  | LockBookingResponse401
  | LockBookingResponse403
  | LockBookingResponse404
  | LockBookingResponse412
  | LockBookingResponse500
  | LockBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body: {
    Requested: string;
    Selected: string;
    [k: string]: unknown;
  }[];
}

/**
 * Typing for a response with status 401 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 412 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse412 extends Types.ErrorResponse {
  status: 412;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by lockBooking()
 * @category lockBooking()
 */
export interface LockBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by unlockBooking()
 * @category unlockBooking()
 */
export type UnlockBookingParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by unlockBooking()
 * @category unlockBooking()
 */
export type UnlockBookingResponse =
  | UnlockBookingSuccessResponse
  | UnlockBookingErrorResponse;

/**
 * Typing for all successful responses to the request made by unlockBooking()
 * @category unlockBooking()
 */
export type UnlockBookingSuccessResponse = UnlockBookingResponse200;

/**
 * Typing for all error responses to the request made by unlockBooking()
 * @category unlockBooking()
 */
export type UnlockBookingErrorResponse =
  | UnlockBookingResponse401
  | UnlockBookingResponse403
  | UnlockBookingResponse404
  | UnlockBookingResponse412
  | UnlockBookingResponse500
  | UnlockBookingResponse503;

/**
 * Typing for a response with status 200 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 401 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse401 extends Types.ErrorResponse {
  status: 401;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 403 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse403 extends Types.ErrorResponse {
  status: 403;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 412 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse412 extends Types.ErrorResponse {
  status: 412;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by unlockBooking()
 * @category unlockBooking()
 */
export interface UnlockBookingResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for the parameters of the request made by bookingCallback()
 * @category bookingCallback()
 */
export type BookingCallbackParameters = {
  ID: string;
};

/**
 * Typing for all possible responses to the request made by bookingCallback()
 * @category bookingCallback()
 */
export type BookingCallbackResponse =
  | BookingCallbackSuccessResponse
  | BookingCallbackErrorResponse;

/**
 * Typing for all successful responses to the request made by bookingCallback()
 * @category bookingCallback()
 */
export type BookingCallbackSuccessResponse = BookingCallbackResponse200;

/**
 * Typing for all error responses to the request made by bookingCallback()
 * @category bookingCallback()
 */
export type BookingCallbackErrorResponse =
  | BookingCallbackResponse404
  | BookingCallbackResponse500
  | BookingCallbackResponse503;

/**
 * Typing for a response with status 200 to the request made by bookingCallback()
 * @category bookingCallback()
 */
export interface BookingCallbackResponse200 extends Types.SuccessResponse {
  status: 200;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 404 to the request made by bookingCallback()
 * @category bookingCallback()
 */
export interface BookingCallbackResponse404 extends Types.ErrorResponse {
  status: 404;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}

/**
 * Typing for a response with status 500 to the request made by bookingCallback()
 * @category bookingCallback()
 */
export interface BookingCallbackResponse500 extends Types.ErrorResponse {
  status: 500;
  headers?: {
    [k: string]: string | undefined;
  };
  body: string;
}

/**
 * Typing for a response with status 503 to the request made by bookingCallback()
 * @category bookingCallback()
 */
export interface BookingCallbackResponse503 extends Types.ErrorResponse {
  status: 503;
  headers?: {
    [k: string]: string | undefined;
  };
  body?: undefined;
}
