/**
 * This file was automatically generated by openapi-codegeneration.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-codegeneration to regenerate this file.
 */
import * as BasicValidation from './basicValidation.cjs';
import * as Signatures from './signatures.js';
import { FunctionWithErrors, ResponseData } from './types.js';

/**
 * This function validates the inputs to schedule()
 */
export function validateScheduleInput(body: Signatures.ScheduleBody) {
  if (body === undefined) {
    return true;
  }

  if (!BasicValidation.validateScheduleBodyRequest(body)) {
    (validateScheduleInput as FunctionWithErrors).errors = (
      BasicValidation.validateScheduleBodyRequest as FunctionWithErrors
    ).errors;
    return false;
  }

  return true;
}

/**
 * This function validates the outputs of schedule()
 */
export function validateScheduleOutput(
  response: ResponseData,
): response is Signatures.ScheduleResponse {
  if (response.status < 100 || response.status >= 600) return false;

  if (response.status === 200) {
    if (!BasicValidation.validateScheduleResponse200Response(response.body)) {
      (validateScheduleOutput as FunctionWithErrors).errors = (
        BasicValidation.validateScheduleResponse200Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 400) {
    return true;
  }

  if (response.status === 401) {
    return true;
  }

  if (response.status === 403) {
    return true;
  }

  if (response.status === 404) {
    if (!BasicValidation.validateScheduleResponse404Response(response.body)) {
      (validateScheduleOutput as FunctionWithErrors).errors = (
        BasicValidation.validateScheduleResponse404Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 422) {
    if (!BasicValidation.validateScheduleResponse422Response(response.body)) {
      (validateScheduleOutput as FunctionWithErrors).errors = (
        BasicValidation.validateScheduleResponse422Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 500) {
    if (!BasicValidation.validateScheduleResponse500Response(response.body)) {
      (validateScheduleOutput as FunctionWithErrors).errors = (
        BasicValidation.validateScheduleResponse500Response as FunctionWithErrors
      ).errors;
      return false;
    }

    return true;
  }

  if (response.status === 503) {
    return true;
  }

  (
    validateScheduleOutput as FunctionWithErrors
  ).errors = `Response status ${response.status} is unexpected`;

  return false;
}
