{
  "openapi": "3.1.0",
  "info": {
    "title": "CrossLab Experiment Service REST API (internal)",
    "description": "This is the OpenAPI description of the internal CrossLab Experiment Service REST API.",
    "version": "0.0.1"
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "As this is the API description of the internal Experiment API, the only supported security schema is the JWT bearer token.\nThis token will be populated by the API Gateway.\nTo learn about the general Authentification scheme, please refer to the [Authentication section]() in the CrossLab architecture description."
      }
    },
    "schemas": {
      "experiment_overview": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the experiment",
            "format": "uri",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Status of the experiment",
            "enum": [
              "created",
              "booked",
              "running",
              "finished"
            ]
          }
        }
      },
      "name": {
        "type": "string",
        "description": "Name for an experiment role."
      },
      "role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for an experiment role."
          },
          "description": {
            "type": "string"
          }
        }
      },
      "service_configuration": {
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "format": "uri",
            "description": "Type of the service"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration of the service\n\nThis configuration object will be merged with the participant configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).\n",
            "additionalProperties": true
          },
          "participants": {
            "type": "array",
            "description": "List of participants for the service",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "$ref": "#/components/schemas/name"
                },
                "serviceId": {
                  "type": "string"
                },
                "config": {
                  "type": "object",
                  "description": "Service configuration of the participant.\n\nThis configuration object will be merged with the service configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).\n",
                  "serviceId": {
                    "type": "string",
                    "description": "ID of the service"
                  },
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "experiment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/experiment_overview"
          },
          {
            "type": "object",
            "properties": {
              "bookingTime": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "devices": {
                "type": "array",
                "description": "Devices associated with the experiment",
                "items": {
                  "type": "object",
                  "properties": {
                    "device": {
                      "description": "URL to the [device](https://cross-lab-project.github.io/crosslab/api/device.html#get-/devices/-device_id-).",
                      "type": "string",
                      "format": "uri"
                    },
                    "role": {
                      "$ref": "#/components/schemas/name"
                    }
                  }
                }
              },
              "roles": {
                "type": "array",
                "description": "Roles that are used in this experiment",
                "items": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "connections": {
                "type": "array",
                "description": "Connections associated with the experiment",
                "items": {
                  "description": "URL to the [peer connection](https://cross-lab-project.github.io/crosslab/api/device.html#get-/peerconnections/-peerconnection_id-).",
                  "type": "string",
                  "fromat": "uri"
                },
                "readOnly": true
              },
              "serviceConfigurations": {
                "type": "array",
                "description": "Services associated with the experiment",
                "items": {
                  "$ref": "#/components/schemas/service_configuration"
                }
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "experiment_id": {
        "in": "path",
        "name": "experiment_id",
        "description": "UUID of the experiment",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": [
          "2cec4f8b-67f1-4914-8edb-25cd2cef06fb"
        ]
      },
      "experiment_changed_url": {
        "name": "changedURL",
        "in": "query",
        "required": false,
        "description": "An URL that will be called when the experiment status changes.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      }
    }
  },
  "tags": [
    {
      "name": "experiment",
      "description": "This tag describes the experiment resource."
    }
  ],
  "paths": {
    "/experiments": {
      "get": {
        "summary": "List experiments",
        "tags": [
          "experiment"
        ],
        "security": [
          {
            "JWT": [
              "experiment",
              "experiment:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all experiments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/experiment_overview"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new experiment",
        "tags": [
          "experiment"
        ],
        "security": [
          {
            "JWT": [
              "experiment",
              "experiment:create"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The experiment was created. A JSON representation of the new experiment is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{experiment_id}": {
      "get": {
        "summary": "View an experiment.",
        "tags": [
          "experiment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          }
        ],
        "security": [
          {
            "JWT": [
              "experiment",
              "experiment:list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON Representation of the experiment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an existing experiment.",
        "description": "With this endpoint an experiment can be changed. The request body may be skipped if you just want to set a hook via the query string parameters.\n\nIf a body is supplied you can choose to include any first level fields which will fully replace the field in the existing experiment.\n",
        "tags": [
          "experiment"
        ],
        "security": [
          {
            "JWT": [
              "experiment",
              "experiment:edit"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          },
          {
            "$ref": "#/components/parameters/experiment_changed_url"
          }
        ],
        "requestBody": {
          "description": "Update the experiment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The experiment was updated"
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": [
                              "event"
                            ]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": [
                              "experiment-changed"
                            ]
                          },
                          "device": {
                            "$ref": "#/components/schemas/experiment"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted experiment. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an experiment",
        "tags": [
          "experiment"
        ],
        "security": [
          {
            "JWT": [
              "experiment",
              "experiment:create"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The experiment was deleted."
          }
        }
      }
    }
  }
}