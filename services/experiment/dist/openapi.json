{
  "openapi": "3.1.0",
  "info": {
    "title": "CrossLab Experiment Service REST API (internal)",
    "description": "This is the OpenAPI description of the internal CrossLab Experiment Service REST API.",
    "version": "0.0.1",
    "x-service-name": "Experiment Service"
  },
  "tags": [
    {
      "name": "experiment",
      "description": "This tag describes the experiment resource."
    },
    {
      "name": "template",
      "description": "This tag describes the template resource"
    }
  ],
  "paths": {
    "/experiments": {
      "get": {
        "operationId": "list_experiments",
        "summary": "List experiments",
        "tags": ["experiment"],
        "security": [
          {
            "JWT": ["experiment", "experiment:read", "experiment:read:owned"]
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all experiments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/experiment_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-optional-url": true
      },
      "post": {
        "operationId": "create_experiment",
        "summary": "Create a new experiment",
        "tags": ["experiment"],
        "security": [
          {
            "JWT": ["experiment", "experiment:create"]
          }
        ],
        "requestBody": {
          "description": "The experiment to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The experiment was created. A JSON representation of the new experiment is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          },
          "202": {
            "description": "The experiment was created and will be set to running eventually. A JSON representation of the new experiment is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "security": [
                  {
                    "JWT": ["experiment", "experiment:create", "experiment:write"]
                  }
                ],
                "summary": "Callback for the \"experiment-changed\" event",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": ["event"]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": ["experiment-changed"]
                          },
                          "device": {
                            "$ref": "#/components/schemas/experiment"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted experiment. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        },
        "x-optional-url": true
      }
    },
    "/experiments/{experiment_id}": {
      "get": {
        "operationId": "get_experiment",
        "summary": "View an experiment.",
        "tags": ["experiment"],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          }
        ],
        "security": [
          {
            "JWT": ["experiment", "experiment:read", "experiment:read:owned"]
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON Representation of the experiment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "operationId": "update_experiment",
        "summary": "Update an existing experiment.",
        "description": "With this endpoint an experiment can be changed. The request body may be skipped if you just want to set a hook via the query string parameters.\n\nIf a body is supplied you can choose to include any first level fields which will fully replace the field in the existing experiment.\n",
        "tags": ["experiment"],
        "security": [
          {
            "JWT": ["experiment", "experiment:write", "experiment:write:owned"]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          },
          {
            "$ref": "#/components/parameters/experiment_changed_url"
          }
        ],
        "requestBody": {
          "description": "Update the experiment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON Representation of the changed experiment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          },
          "202": {
            "description": "The JSON Representation of the changed experiment, that will be set to running eventually",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "callbacks": {
          "changed": {
            "{$request.query.changedUrl}": {
              "post": {
                "security": [
                  {
                    "JWT": ["experiment", "experiment:create", "experiment:write"]
                  }
                ],
                "summary": "Callback for the \"experiment-changed\" event",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "callbackType": {
                            "type": "string",
                            "enum": ["event"]
                          },
                          "eventType": {
                            "type": "string",
                            "enum": ["experiment-changed"]
                          },
                          "device": {
                            "$ref": "#/components/schemas/experiment"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "410": {
                    "description": "The callback is no longer required for the transmitted experiment. The Service is free to remove the callback reference."
                  },
                  "2XX": {
                    "description": "The event was successfully processed."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_experiment",
        "summary": "Delete an experiment",
        "tags": ["experiment"],
        "security": [
          {
            "JWT": ["experiment", "experiment:delete", "experiment:delete:owned"]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/experiment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The experiment was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    },
    "/templates": {
      "get": {
        "security": [
          {
            "JWT": ["template", "template:read", "template:read:owned"]
          }
        ],
        "operationId": "list_template",
        "summary": "List templates",
        "tags": ["template"],
        "responses": {
          "200": {
            "description": "The list of all templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/template_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-optional-url": true
      },
      "post": {
        "security": [
          {
            "JWT": ["template", "template:read", "template:read:owned"]
          }
        ],
        "operationId": "create_template",
        "summary": "Create a new template",
        "tags": ["template"],
        "requestBody": {
          "description": "The template to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/template"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The template was created. A JSON representation of the new template is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            }
          },
          "202": {
            "description": "The template was created and will be set to running eventually. A JSON representation of the new template is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        },
        "x-optional-url": true
      }
    },
    "/templates/{template_id}": {
      "get": {
        "security": [
          {
            "JWT": ["template", "template:read", "template:read:owned"]
          }
        ],
        "operationId": "get_template",
        "summary": "View an template.",
        "tags": ["template"],
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON Representation of the template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "patch": {
        "security": [
          {
            "JWT": ["template", "template:read", "template:read:owned"]
          }
        ],
        "operationId": "update_template",
        "summary": "Update an existing template.",
        "description": "With this endpoint an template can be changed. The request body may be skipped if you just want to set a hook via the query string parameters.\n\nIf a body is supplied you can choose to include any first level fields which will fully replace the field in the existing template.\n",
        "tags": ["template"],
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "requestBody": {
          "description": "Update the template",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/template_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON Representation of the changed template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            }
          },
          "202": {
            "description": "The JSON Representation of the changed template, that will be set to running eventually",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      },
      "delete": {
        "security": [
          {
            "JWT": ["template", "template:read", "template:read:owned"]
          }
        ],
        "operationId": "delete_template",
        "summary": "Delete an template",
        "tags": ["template"],
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The template was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "As this is the API description of the internal Experiment API, the only supported security schema is the JWT bearer token.\nThis token will be populated by the API Gateway.\nTo learn about the general Authentification scheme, please refer to the [Authentication section](https://cross-lab-project.github.io/crosslab/backend.html#authentification) in the CrossLab architecture description."
      }
    },
    "schemas": {
      "experiment_overview": {
        "title": "Experiment Overview",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the experiment",
            "format": "uri",
            "readOnly": true
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "description": "Status of the experiment",
                "readOnly": true,
                "enum": ["created", "booked", "setup", "running", "finished"]
              },
              {
                "type": "string",
                "description": "Status of the experiment",
                "writeOnly": true,
                "enum": ["created", "booked", "running", "finished"]
              }
            ]
          }
        },
        "required": ["url", "status"]
      },
      "device": {
        "title": "Device",
        "type": "object",
        "properties": {
          "device": {
            "description": "URL to the [device](https://cross-lab-project.github.io/crosslab/api/device.html#get-/devices/-device_id-).",
            "type": "string",
            "format": "uri"
          },
          "role": {
            "type": "string",
            "description": "The name of the device's role."
          }
        },
        "required": ["device", "role"]
      },
      "role": {
        "title": "role",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for an experiment role."
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "participant": {
        "title": "Participant",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The name of the participant's role."
          },
          "serviceId": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "description": "Service configuration of the participant.\n\nThis configuration object will be merged with the service configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).\n",
            "additionalProperties": true
          }
        }
      },
      "service_configuration": {
        "title": "Service Configuration",
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "format": "uri",
            "description": "Type of the service"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration of the service\n\nThis configuration object will be merged with the participant configuration to become the service configuration send to the participant (fields of the participant configuration override the service configuration).\n",
            "additionalProperties": true
          },
          "participants": {
            "type": "array",
            "description": "List of participants for the service",
            "items": {
              "$ref": "#/components/schemas/participant"
            }
          }
        }
      },
      "experiment": {
        "title": "Experiment",
        "allOf": [
          {
            "$ref": "#/components/schemas/experiment_overview"
          },
          {
            "type": "object",
            "properties": {
              "bookingTime": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "devices": {
                "type": "array",
                "description": "Devices associated with the experiment",
                "items": {
                  "$ref": "#/components/schemas/device"
                }
              },
              "roles": {
                "type": "array",
                "description": "Roles that are used in this experiment",
                "items": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "connections": {
                "type": "array",
                "description": "Connections associated with the experiment",
                "items": {
                  "description": "URL to the [peer connection](https://cross-lab-project.github.io/crosslab/api/device.html#get-/peerconnections/-peerconnection_id-).",
                  "type": "string",
                  "format": "uri"
                },
                "readOnly": true
              },
              "serviceConfigurations": {
                "type": "array",
                "description": "Services associated with the experiment",
                "items": {
                  "$ref": "#/components/schemas/service_configuration"
                }
              },
              "instantiatedDevices": {
                "type": "array",
                "description": "Instantiated devices that need to be started by the user.",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "codeUrl": {
                      "type": "string",
                      "format": "uri"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "token": {
                      "type": "string"
                    },
                    "instanceOf": {
                      "type": "string",
                      "format": "uri"
                    }
                  },
                  "required": ["codeUrl", "url", "token", "instanceOf"]
                }
              }
            },
            "required": [
              "devices",
              "roles",
              "serviceConfigurations",
              "connections",
              "instantiatedDevices"
            ]
          }
        ]
      },
      "experiment_overview_update": {
        "title": "Experiment Overview Update",
        "type": "object",
        "properties": {
          "status": {
            "anyOf": [
              {
                "type": "string",
                "description": "Status of the experiment",
                "readOnly": true,
                "enum": ["created", "booked", "setup", "running", "finished"]
              },
              {
                "type": "string",
                "description": "Status of the experiment",
                "writeOnly": true,
                "enum": ["created", "booked", "running", "finished"]
              }
            ]
          }
        }
      },
      "experiment_update": {
        "title": "Experiment Update",
        "allOf": [
          {
            "$ref": "#/components/schemas/experiment_overview_update"
          },
          {
            "type": "object",
            "properties": {
              "bookingTime": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "devices": {
                "type": "array",
                "description": "Devices associated with the experiment",
                "items": {
                  "$ref": "#/components/schemas/device"
                }
              },
              "roles": {
                "type": "array",
                "description": "Roles that are used in this experiment",
                "items": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "serviceConfigurations": {
                "type": "array",
                "description": "Services associated with the experiment",
                "items": {
                  "$ref": "#/components/schemas/service_configuration"
                }
              }
            }
          }
        ]
      },
      "template_overview": {
        "title": "Template Overview",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the template",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the template"
          },
          "description": {
            "type": "string",
            "description": "Description of the template"
          }
        },
        "required": ["url", "name"]
      },
      "template": {
        "title": "Template",
        "allOf": [
          {
            "$ref": "#/components/schemas/template_overview"
          },
          {
            "type": "object",
            "properties": {
              "configuration": {
                "type": "object",
                "description": "Configuration of the templated experiment",
                "properties": {
                  "devices": {
                    "type": "array",
                    "description": "Devices associated with the templated experiment",
                    "items": {
                      "$ref": "#/components/schemas/device"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "description": "Roles that are used in this templated experiment",
                    "items": {
                      "$ref": "#/components/schemas/role"
                    }
                  },
                  "serviceConfigurations": {
                    "type": "array",
                    "description": "Services associated with the templated experiment",
                    "items": {
                      "$ref": "#/components/schemas/service_configuration"
                    }
                  }
                },
                "required": ["devices", "roles", "serviceConfigurations"]
              }
            },
            "required": ["configuration"]
          }
        ]
      },
      "template_update": {
        "title": "Template Update",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the template"
          },
          "description": {
            "type": "string",
            "description": "Description of the template"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration of the templated experiment",
            "properties": {
              "devices": {
                "type": "array",
                "description": "Devices associated with the templated experiment",
                "items": {
                  "$ref": "#/components/schemas/device"
                }
              },
              "roles": {
                "type": "array",
                "description": "Roles that are used in this templated experiment",
                "items": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "serviceConfigurations": {
                "type": "array",
                "description": "Services associated with the templated experiment",
                "items": {
                  "$ref": "#/components/schemas/service_configuration"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "experiment_id": {
        "in": "path",
        "name": "experiment_id",
        "description": "UUID of the experiment",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": ["2cec4f8b-67f1-4914-8edb-25cd2cef06fb"]
      },
      "experiment_changed_url": {
        "name": "changedURL",
        "in": "query",
        "required": false,
        "description": "An URL that will be called when the experiment status changes.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "template_id": {
        "in": "path",
        "name": "template_id",
        "description": "UUID of the template",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": ["2cec4f8b-67f1-4914-8edb-25cd2cef06fb"]
      }
    }
  }
}
