# This docker compose file is used to deploy the "core"-services of a Crosslab instance.
# This includes all services to provide the crosslab API. Any additional software like frontend,
# virtual laboratory devices etc. must be deployed on top of this.
#
# All necessary confifguration Options are set via environment variables in the accompanying .env file.
#
version: '3'

networks:
  backend:
  frontend:

volumes:
  db:

x-config: &common-config
  AUTHORIZATION_SERVER: 'http://authorization:3010'
  AUTHORIZATION_PSK: '${AUTHORIZATION_PSK:?}'
  LOGGING: '${LOGGING_LEVEL:-warn}'
  BASE_URL: ${API_BASE_URL}
  DB_TYPE: mariadb
  DB_HOST: db
  DB_PORT: 3306
  AUTH_SERVICE_URL: 'http://authentication:3000'
  DEVICE_SERVICE_URL: 'http://device:3001'
  EXPERIMENT_SERVICE_URL: 'http://experiment:3002'
  FEDERATION_SERVICE_URL: 'http://federation:3003'
  BOOKING_FRONTEND_URL: 'http://booking-frontend:3004'
  BOOKING_BACKEND_URL: 'http://booking-backend:3005'
  SCHEDULE_SERVICE_URL: 'http://schedule-service:3006'
  AUTH_SERVICE_DOMAIN: 'authentication:3000'
  DEVICE_SERVICE_DOMAIN: 'device:3001'
  EXPERIMENT_SERVICE_DOMAIN: 'experiment:3002'
  FEDERATION_SERVICE_DOMAIN: 'federation:3003'
  BOOKING_FRONTEND_DOMAIN: 'booking-frontend:3004'
  BOOKING_BACKEND_DOMAIN: 'booking-backend:3005'
  SCHEDULE_SERVICE_DOMAIN: 'schedule-service:3006'
  AUTHORIZATION_SERVICE_DOMAIN: 'authorization:3010'

services:
  # Database
  db:
    image: mariadb:11.2.3
    networks:
      backend:
    volumes:
      - './config/mariadb:/docker-entrypoint-initdb.d:ro'
      - 'db:/var/lib/mysql'
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:?}
    healthcheck:
      test: ['CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized']
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  rabbitmq:
    image: rabbitmq:3.13.4
    volumes:
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
    networks:
      backend:
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  gateway:
    image: ${GATEWAY_IMAGE:?}
    ports:
      - '${API_PORT}:80'
    environment:
      <<: *common-config
    networks:
      frontend:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  # Services
  authentication:
    image: ${AUTHENTICATION_IMAGE:?}
    environment:
      <<: *common-config
      DB_USERNAME: authentication
      DB_DATABASE: authentication
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:?}
      JWT_SECRET: ${JWT_SECRET:?}
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  authorization:
    image: ${AUTHORIZATION_IMAGE:?}
    environment:
      <<: *common-config
      DB_USERNAME: authorization
      DB_DATABASE: authorization
      JWT_SECRET: ${JWT_SECRET:?}
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  booking-frontend:
    image: ${BOOKING_FRONTEND_IMAGE:?}
    environment:
      <<: *common-config
      BOOKING_DSN: mysql://booking@db:3306/booking?supportBigNumbers=true&bigNumberStrings=true
      AMQP_URL: amqp://rabbitmq:${RABBITMQ_PASSWORD:?}@rabbitmq:5672
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  booking-backend:
    image: ${BOOKING_BACKEND_IMAGE:?}
    environment:
      <<: *common-config
      BOOKING_DSN: mysql://booking@db:3306/booking?supportBigNumbers=true&bigNumberStrings=true
      AMQP_URL: amqp://rabbitmq:${RABBITMQ_PASSWORD:?}@rabbitmq:5672
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  schedule-service:
    image: ${SCHEDULE_SERVICE_IMAGE:?}
    environment:
      <<: *common-config
      BOOKING_DSN: mysql://booking@db:3306/booking?supportBigNumbers=true&bigNumberStrings=true
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  device-reservation:
    image: ${DEVICE_RESERVATION_IMAGE:?}
    environment:
      <<: *common-config
      BOOKING_DSN: mysql://booking@db:3306/booking?supportBigNumbers=true&bigNumberStrings=true
      AMQP_URL: amqp://rabbitmq:${RABBITMQ_PASSWORD:?}@rabbitmq:5672
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  device:
    image: ${DEVICE_IMAGE:?}
    environment:
      <<: *common-config
      DB_USERNAME: device
      DB_DATABASE: device
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  experiment:
    image: ${EXPERIMENT_IMAGE:?}
    environment:
      <<: *common-config
      DB_USERNAME: experiment
      DB_DATABASE: experiment
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
  federation:
    image: ${FEDERATION_IMAGE:?}
    environment:
      <<: *common-config
      DB_USERNAME: federation
      DB_DATABASE: federation
    networks:
      backend:
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    extra_hosts:
      - '${API_BASE_HOST}=host-gateway'
